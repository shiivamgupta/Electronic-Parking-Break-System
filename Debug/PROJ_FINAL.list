
PROJ_FINAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007f9c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000108  08008130  08008130  00018130  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008238  08008238  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  08008238  08008238  00018238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008240  08008240  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008240  08008240  00018240  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008244  08008244  00018244  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08008248  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004b58  20000088  080082d0  00020088  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20004be0  080082d0  00024be0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a7e2  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003096  00000000  00000000  0003a89a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001458  00000000  00000000  0003d930  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001300  00000000  00000000  0003ed88  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022625  00000000  00000000  00040088  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ff75  00000000  00000000  000626ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d5103  00000000  00000000  00072622  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00147725  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000058dc  00000000  00000000  001477a0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000088 	.word	0x20000088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008114 	.word	0x08008114

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	08008114 	.word	0x08008114

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	; 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800030e:	f1a4 0401 	sub.w	r4, r4, #1
 8000312:	d1e9      	bne.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__gedf2>:
 800096c:	f04f 3cff 	mov.w	ip, #4294967295
 8000970:	e006      	b.n	8000980 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__ledf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	e002      	b.n	8000980 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__cmpdf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000984:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000990:	bf18      	it	ne
 8000992:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000996:	d01b      	beq.n	80009d0 <__cmpdf2+0x54>
 8000998:	b001      	add	sp, #4
 800099a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800099e:	bf0c      	ite	eq
 80009a0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009a4:	ea91 0f03 	teqne	r1, r3
 80009a8:	bf02      	ittt	eq
 80009aa:	ea90 0f02 	teqeq	r0, r2
 80009ae:	2000      	moveq	r0, #0
 80009b0:	4770      	bxeq	lr
 80009b2:	f110 0f00 	cmn.w	r0, #0
 80009b6:	ea91 0f03 	teq	r1, r3
 80009ba:	bf58      	it	pl
 80009bc:	4299      	cmppl	r1, r3
 80009be:	bf08      	it	eq
 80009c0:	4290      	cmpeq	r0, r2
 80009c2:	bf2c      	ite	cs
 80009c4:	17d8      	asrcs	r0, r3, #31
 80009c6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ca:	f040 0001 	orr.w	r0, r0, #1
 80009ce:	4770      	bx	lr
 80009d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d8:	d102      	bne.n	80009e0 <__cmpdf2+0x64>
 80009da:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009de:	d107      	bne.n	80009f0 <__cmpdf2+0x74>
 80009e0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d1d6      	bne.n	8000998 <__cmpdf2+0x1c>
 80009ea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ee:	d0d3      	beq.n	8000998 <__cmpdf2+0x1c>
 80009f0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop

080009f8 <__aeabi_cdrcmple>:
 80009f8:	4684      	mov	ip, r0
 80009fa:	4610      	mov	r0, r2
 80009fc:	4662      	mov	r2, ip
 80009fe:	468c      	mov	ip, r1
 8000a00:	4619      	mov	r1, r3
 8000a02:	4663      	mov	r3, ip
 8000a04:	e000      	b.n	8000a08 <__aeabi_cdcmpeq>
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdcmpeq>:
 8000a08:	b501      	push	{r0, lr}
 8000a0a:	f7ff ffb7 	bl	800097c <__cmpdf2>
 8000a0e:	2800      	cmp	r0, #0
 8000a10:	bf48      	it	mi
 8000a12:	f110 0f00 	cmnmi.w	r0, #0
 8000a16:	bd01      	pop	{r0, pc}

08000a18 <__aeabi_dcmpeq>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff fff4 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a20:	bf0c      	ite	eq
 8000a22:	2001      	moveq	r0, #1
 8000a24:	2000      	movne	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmplt>:
 8000a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a30:	f7ff ffea 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a34:	bf34      	ite	cc
 8000a36:	2001      	movcc	r0, #1
 8000a38:	2000      	movcs	r0, #0
 8000a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3e:	bf00      	nop

08000a40 <__aeabi_dcmple>:
 8000a40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a44:	f7ff ffe0 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a48:	bf94      	ite	ls
 8000a4a:	2001      	movls	r0, #1
 8000a4c:	2000      	movhi	r0, #0
 8000a4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a52:	bf00      	nop

08000a54 <__aeabi_dcmpge>:
 8000a54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a58:	f7ff ffce 	bl	80009f8 <__aeabi_cdrcmple>
 8000a5c:	bf94      	ite	ls
 8000a5e:	2001      	movls	r0, #1
 8000a60:	2000      	movhi	r0, #0
 8000a62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a66:	bf00      	nop

08000a68 <__aeabi_dcmpgt>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff ffc4 	bl	80009f8 <__aeabi_cdrcmple>
 8000a70:	bf34      	ite	cc
 8000a72:	2001      	movcc	r0, #1
 8000a74:	2000      	movcs	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_dcmpun>:
 8000a7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a84:	d102      	bne.n	8000a8c <__aeabi_dcmpun+0x10>
 8000a86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8a:	d10a      	bne.n	8000aa2 <__aeabi_dcmpun+0x26>
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a94:	d102      	bne.n	8000a9c <__aeabi_dcmpun+0x20>
 8000a96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9a:	d102      	bne.n	8000aa2 <__aeabi_dcmpun+0x26>
 8000a9c:	f04f 0000 	mov.w	r0, #0
 8000aa0:	4770      	bx	lr
 8000aa2:	f04f 0001 	mov.w	r0, #1
 8000aa6:	4770      	bx	lr

08000aa8 <__aeabi_d2uiz>:
 8000aa8:	004a      	lsls	r2, r1, #1
 8000aaa:	d211      	bcs.n	8000ad0 <__aeabi_d2uiz+0x28>
 8000aac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab0:	d211      	bcs.n	8000ad6 <__aeabi_d2uiz+0x2e>
 8000ab2:	d50d      	bpl.n	8000ad0 <__aeabi_d2uiz+0x28>
 8000ab4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ab8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000abc:	d40e      	bmi.n	8000adc <__aeabi_d2uiz+0x34>
 8000abe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ac6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aca:	fa23 f002 	lsr.w	r0, r3, r2
 8000ace:	4770      	bx	lr
 8000ad0:	f04f 0000 	mov.w	r0, #0
 8000ad4:	4770      	bx	lr
 8000ad6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ada:	d102      	bne.n	8000ae2 <__aeabi_d2uiz+0x3a>
 8000adc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ae0:	4770      	bx	lr
 8000ae2:	f04f 0000 	mov.w	r0, #0
 8000ae6:	4770      	bx	lr

08000ae8 <__aeabi_uldivmod>:
 8000ae8:	b953      	cbnz	r3, 8000b00 <__aeabi_uldivmod+0x18>
 8000aea:	b94a      	cbnz	r2, 8000b00 <__aeabi_uldivmod+0x18>
 8000aec:	2900      	cmp	r1, #0
 8000aee:	bf08      	it	eq
 8000af0:	2800      	cmpeq	r0, #0
 8000af2:	bf1c      	itt	ne
 8000af4:	f04f 31ff 	movne.w	r1, #4294967295
 8000af8:	f04f 30ff 	movne.w	r0, #4294967295
 8000afc:	f000 b972 	b.w	8000de4 <__aeabi_idiv0>
 8000b00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b08:	f000 f806 	bl	8000b18 <__udivmoddi4>
 8000b0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b14:	b004      	add	sp, #16
 8000b16:	4770      	bx	lr

08000b18 <__udivmoddi4>:
 8000b18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b1c:	9e08      	ldr	r6, [sp, #32]
 8000b1e:	4604      	mov	r4, r0
 8000b20:	4688      	mov	r8, r1
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d14b      	bne.n	8000bbe <__udivmoddi4+0xa6>
 8000b26:	428a      	cmp	r2, r1
 8000b28:	4615      	mov	r5, r2
 8000b2a:	d967      	bls.n	8000bfc <__udivmoddi4+0xe4>
 8000b2c:	fab2 f282 	clz	r2, r2
 8000b30:	b14a      	cbz	r2, 8000b46 <__udivmoddi4+0x2e>
 8000b32:	f1c2 0720 	rsb	r7, r2, #32
 8000b36:	fa01 f302 	lsl.w	r3, r1, r2
 8000b3a:	fa20 f707 	lsr.w	r7, r0, r7
 8000b3e:	4095      	lsls	r5, r2
 8000b40:	ea47 0803 	orr.w	r8, r7, r3
 8000b44:	4094      	lsls	r4, r2
 8000b46:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b4a:	0c23      	lsrs	r3, r4, #16
 8000b4c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b50:	fa1f fc85 	uxth.w	ip, r5
 8000b54:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b58:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b5c:	fb07 f10c 	mul.w	r1, r7, ip
 8000b60:	4299      	cmp	r1, r3
 8000b62:	d909      	bls.n	8000b78 <__udivmoddi4+0x60>
 8000b64:	18eb      	adds	r3, r5, r3
 8000b66:	f107 30ff 	add.w	r0, r7, #4294967295
 8000b6a:	f080 811b 	bcs.w	8000da4 <__udivmoddi4+0x28c>
 8000b6e:	4299      	cmp	r1, r3
 8000b70:	f240 8118 	bls.w	8000da4 <__udivmoddi4+0x28c>
 8000b74:	3f02      	subs	r7, #2
 8000b76:	442b      	add	r3, r5
 8000b78:	1a5b      	subs	r3, r3, r1
 8000b7a:	b2a4      	uxth	r4, r4
 8000b7c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b80:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b88:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b8c:	45a4      	cmp	ip, r4
 8000b8e:	d909      	bls.n	8000ba4 <__udivmoddi4+0x8c>
 8000b90:	192c      	adds	r4, r5, r4
 8000b92:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b96:	f080 8107 	bcs.w	8000da8 <__udivmoddi4+0x290>
 8000b9a:	45a4      	cmp	ip, r4
 8000b9c:	f240 8104 	bls.w	8000da8 <__udivmoddi4+0x290>
 8000ba0:	3802      	subs	r0, #2
 8000ba2:	442c      	add	r4, r5
 8000ba4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000ba8:	eba4 040c 	sub.w	r4, r4, ip
 8000bac:	2700      	movs	r7, #0
 8000bae:	b11e      	cbz	r6, 8000bb8 <__udivmoddi4+0xa0>
 8000bb0:	40d4      	lsrs	r4, r2
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	e9c6 4300 	strd	r4, r3, [r6]
 8000bb8:	4639      	mov	r1, r7
 8000bba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bbe:	428b      	cmp	r3, r1
 8000bc0:	d909      	bls.n	8000bd6 <__udivmoddi4+0xbe>
 8000bc2:	2e00      	cmp	r6, #0
 8000bc4:	f000 80eb 	beq.w	8000d9e <__udivmoddi4+0x286>
 8000bc8:	2700      	movs	r7, #0
 8000bca:	e9c6 0100 	strd	r0, r1, [r6]
 8000bce:	4638      	mov	r0, r7
 8000bd0:	4639      	mov	r1, r7
 8000bd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bd6:	fab3 f783 	clz	r7, r3
 8000bda:	2f00      	cmp	r7, #0
 8000bdc:	d147      	bne.n	8000c6e <__udivmoddi4+0x156>
 8000bde:	428b      	cmp	r3, r1
 8000be0:	d302      	bcc.n	8000be8 <__udivmoddi4+0xd0>
 8000be2:	4282      	cmp	r2, r0
 8000be4:	f200 80fa 	bhi.w	8000ddc <__udivmoddi4+0x2c4>
 8000be8:	1a84      	subs	r4, r0, r2
 8000bea:	eb61 0303 	sbc.w	r3, r1, r3
 8000bee:	2001      	movs	r0, #1
 8000bf0:	4698      	mov	r8, r3
 8000bf2:	2e00      	cmp	r6, #0
 8000bf4:	d0e0      	beq.n	8000bb8 <__udivmoddi4+0xa0>
 8000bf6:	e9c6 4800 	strd	r4, r8, [r6]
 8000bfa:	e7dd      	b.n	8000bb8 <__udivmoddi4+0xa0>
 8000bfc:	b902      	cbnz	r2, 8000c00 <__udivmoddi4+0xe8>
 8000bfe:	deff      	udf	#255	; 0xff
 8000c00:	fab2 f282 	clz	r2, r2
 8000c04:	2a00      	cmp	r2, #0
 8000c06:	f040 808f 	bne.w	8000d28 <__udivmoddi4+0x210>
 8000c0a:	1b49      	subs	r1, r1, r5
 8000c0c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c10:	fa1f f885 	uxth.w	r8, r5
 8000c14:	2701      	movs	r7, #1
 8000c16:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c1a:	0c23      	lsrs	r3, r4, #16
 8000c1c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c20:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c24:	fb08 f10c 	mul.w	r1, r8, ip
 8000c28:	4299      	cmp	r1, r3
 8000c2a:	d907      	bls.n	8000c3c <__udivmoddi4+0x124>
 8000c2c:	18eb      	adds	r3, r5, r3
 8000c2e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c32:	d202      	bcs.n	8000c3a <__udivmoddi4+0x122>
 8000c34:	4299      	cmp	r1, r3
 8000c36:	f200 80cd 	bhi.w	8000dd4 <__udivmoddi4+0x2bc>
 8000c3a:	4684      	mov	ip, r0
 8000c3c:	1a59      	subs	r1, r3, r1
 8000c3e:	b2a3      	uxth	r3, r4
 8000c40:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c44:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c48:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c4c:	fb08 f800 	mul.w	r8, r8, r0
 8000c50:	45a0      	cmp	r8, r4
 8000c52:	d907      	bls.n	8000c64 <__udivmoddi4+0x14c>
 8000c54:	192c      	adds	r4, r5, r4
 8000c56:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5a:	d202      	bcs.n	8000c62 <__udivmoddi4+0x14a>
 8000c5c:	45a0      	cmp	r8, r4
 8000c5e:	f200 80b6 	bhi.w	8000dce <__udivmoddi4+0x2b6>
 8000c62:	4618      	mov	r0, r3
 8000c64:	eba4 0408 	sub.w	r4, r4, r8
 8000c68:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c6c:	e79f      	b.n	8000bae <__udivmoddi4+0x96>
 8000c6e:	f1c7 0c20 	rsb	ip, r7, #32
 8000c72:	40bb      	lsls	r3, r7
 8000c74:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000c78:	ea4e 0e03 	orr.w	lr, lr, r3
 8000c7c:	fa01 f407 	lsl.w	r4, r1, r7
 8000c80:	fa20 f50c 	lsr.w	r5, r0, ip
 8000c84:	fa21 f30c 	lsr.w	r3, r1, ip
 8000c88:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000c8c:	4325      	orrs	r5, r4
 8000c8e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000c92:	0c2c      	lsrs	r4, r5, #16
 8000c94:	fb08 3319 	mls	r3, r8, r9, r3
 8000c98:	fa1f fa8e 	uxth.w	sl, lr
 8000c9c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000ca0:	fb09 f40a 	mul.w	r4, r9, sl
 8000ca4:	429c      	cmp	r4, r3
 8000ca6:	fa02 f207 	lsl.w	r2, r2, r7
 8000caa:	fa00 f107 	lsl.w	r1, r0, r7
 8000cae:	d90b      	bls.n	8000cc8 <__udivmoddi4+0x1b0>
 8000cb0:	eb1e 0303 	adds.w	r3, lr, r3
 8000cb4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000cb8:	f080 8087 	bcs.w	8000dca <__udivmoddi4+0x2b2>
 8000cbc:	429c      	cmp	r4, r3
 8000cbe:	f240 8084 	bls.w	8000dca <__udivmoddi4+0x2b2>
 8000cc2:	f1a9 0902 	sub.w	r9, r9, #2
 8000cc6:	4473      	add	r3, lr
 8000cc8:	1b1b      	subs	r3, r3, r4
 8000cca:	b2ad      	uxth	r5, r5
 8000ccc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cd0:	fb08 3310 	mls	r3, r8, r0, r3
 8000cd4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000cd8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000cdc:	45a2      	cmp	sl, r4
 8000cde:	d908      	bls.n	8000cf2 <__udivmoddi4+0x1da>
 8000ce0:	eb1e 0404 	adds.w	r4, lr, r4
 8000ce4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ce8:	d26b      	bcs.n	8000dc2 <__udivmoddi4+0x2aa>
 8000cea:	45a2      	cmp	sl, r4
 8000cec:	d969      	bls.n	8000dc2 <__udivmoddi4+0x2aa>
 8000cee:	3802      	subs	r0, #2
 8000cf0:	4474      	add	r4, lr
 8000cf2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000cf6:	fba0 8902 	umull	r8, r9, r0, r2
 8000cfa:	eba4 040a 	sub.w	r4, r4, sl
 8000cfe:	454c      	cmp	r4, r9
 8000d00:	46c2      	mov	sl, r8
 8000d02:	464b      	mov	r3, r9
 8000d04:	d354      	bcc.n	8000db0 <__udivmoddi4+0x298>
 8000d06:	d051      	beq.n	8000dac <__udivmoddi4+0x294>
 8000d08:	2e00      	cmp	r6, #0
 8000d0a:	d069      	beq.n	8000de0 <__udivmoddi4+0x2c8>
 8000d0c:	ebb1 050a 	subs.w	r5, r1, sl
 8000d10:	eb64 0403 	sbc.w	r4, r4, r3
 8000d14:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d18:	40fd      	lsrs	r5, r7
 8000d1a:	40fc      	lsrs	r4, r7
 8000d1c:	ea4c 0505 	orr.w	r5, ip, r5
 8000d20:	e9c6 5400 	strd	r5, r4, [r6]
 8000d24:	2700      	movs	r7, #0
 8000d26:	e747      	b.n	8000bb8 <__udivmoddi4+0xa0>
 8000d28:	f1c2 0320 	rsb	r3, r2, #32
 8000d2c:	fa20 f703 	lsr.w	r7, r0, r3
 8000d30:	4095      	lsls	r5, r2
 8000d32:	fa01 f002 	lsl.w	r0, r1, r2
 8000d36:	fa21 f303 	lsr.w	r3, r1, r3
 8000d3a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d3e:	4338      	orrs	r0, r7
 8000d40:	0c01      	lsrs	r1, r0, #16
 8000d42:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d46:	fa1f f885 	uxth.w	r8, r5
 8000d4a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d4e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d52:	fb07 f308 	mul.w	r3, r7, r8
 8000d56:	428b      	cmp	r3, r1
 8000d58:	fa04 f402 	lsl.w	r4, r4, r2
 8000d5c:	d907      	bls.n	8000d6e <__udivmoddi4+0x256>
 8000d5e:	1869      	adds	r1, r5, r1
 8000d60:	f107 3cff 	add.w	ip, r7, #4294967295
 8000d64:	d22f      	bcs.n	8000dc6 <__udivmoddi4+0x2ae>
 8000d66:	428b      	cmp	r3, r1
 8000d68:	d92d      	bls.n	8000dc6 <__udivmoddi4+0x2ae>
 8000d6a:	3f02      	subs	r7, #2
 8000d6c:	4429      	add	r1, r5
 8000d6e:	1acb      	subs	r3, r1, r3
 8000d70:	b281      	uxth	r1, r0
 8000d72:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d76:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d7a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d7e:	fb00 f308 	mul.w	r3, r0, r8
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d907      	bls.n	8000d96 <__udivmoddi4+0x27e>
 8000d86:	1869      	adds	r1, r5, r1
 8000d88:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d8c:	d217      	bcs.n	8000dbe <__udivmoddi4+0x2a6>
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d915      	bls.n	8000dbe <__udivmoddi4+0x2a6>
 8000d92:	3802      	subs	r0, #2
 8000d94:	4429      	add	r1, r5
 8000d96:	1ac9      	subs	r1, r1, r3
 8000d98:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000d9c:	e73b      	b.n	8000c16 <__udivmoddi4+0xfe>
 8000d9e:	4637      	mov	r7, r6
 8000da0:	4630      	mov	r0, r6
 8000da2:	e709      	b.n	8000bb8 <__udivmoddi4+0xa0>
 8000da4:	4607      	mov	r7, r0
 8000da6:	e6e7      	b.n	8000b78 <__udivmoddi4+0x60>
 8000da8:	4618      	mov	r0, r3
 8000daa:	e6fb      	b.n	8000ba4 <__udivmoddi4+0x8c>
 8000dac:	4541      	cmp	r1, r8
 8000dae:	d2ab      	bcs.n	8000d08 <__udivmoddi4+0x1f0>
 8000db0:	ebb8 0a02 	subs.w	sl, r8, r2
 8000db4:	eb69 020e 	sbc.w	r2, r9, lr
 8000db8:	3801      	subs	r0, #1
 8000dba:	4613      	mov	r3, r2
 8000dbc:	e7a4      	b.n	8000d08 <__udivmoddi4+0x1f0>
 8000dbe:	4660      	mov	r0, ip
 8000dc0:	e7e9      	b.n	8000d96 <__udivmoddi4+0x27e>
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	e795      	b.n	8000cf2 <__udivmoddi4+0x1da>
 8000dc6:	4667      	mov	r7, ip
 8000dc8:	e7d1      	b.n	8000d6e <__udivmoddi4+0x256>
 8000dca:	4681      	mov	r9, r0
 8000dcc:	e77c      	b.n	8000cc8 <__udivmoddi4+0x1b0>
 8000dce:	3802      	subs	r0, #2
 8000dd0:	442c      	add	r4, r5
 8000dd2:	e747      	b.n	8000c64 <__udivmoddi4+0x14c>
 8000dd4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000dd8:	442b      	add	r3, r5
 8000dda:	e72f      	b.n	8000c3c <__udivmoddi4+0x124>
 8000ddc:	4638      	mov	r0, r7
 8000dde:	e708      	b.n	8000bf2 <__udivmoddi4+0xda>
 8000de0:	4637      	mov	r7, r6
 8000de2:	e6e9      	b.n	8000bb8 <__udivmoddi4+0xa0>

08000de4 <__aeabi_idiv0>:
 8000de4:	4770      	bx	lr
 8000de6:	bf00      	nop

08000de8 <LIS3DSH_WriteIO>:

//Functions definitions
//Private functions
//1. Write IO
void LIS3DSH_WriteIO(uint8_t reg, uint8_t *dataW, uint8_t size)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b084      	sub	sp, #16
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	4603      	mov	r3, r0
 8000df0:	6039      	str	r1, [r7, #0]
 8000df2:	71fb      	strb	r3, [r7, #7]
 8000df4:	4613      	mov	r3, r2
 8000df6:	71bb      	strb	r3, [r7, #6]
	uint8_t spiReg = reg;
 8000df8:	79fb      	ldrb	r3, [r7, #7]
 8000dfa:	73fb      	strb	r3, [r7, #15]
	//Enable CS
	_LIS3DHS_CS_ENBALE;
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	2108      	movs	r1, #8
 8000e00:	480c      	ldr	r0, [pc, #48]	; (8000e34 <LIS3DSH_WriteIO+0x4c>)
 8000e02:	f002 fab9 	bl	8003378 <HAL_GPIO_WritePin>
	//set register value
	HAL_SPI_Transmit(&accSPI_Handle, &spiReg, 1, 10);
 8000e06:	f107 010f 	add.w	r1, r7, #15
 8000e0a:	230a      	movs	r3, #10
 8000e0c:	2201      	movs	r2, #1
 8000e0e:	480a      	ldr	r0, [pc, #40]	; (8000e38 <LIS3DSH_WriteIO+0x50>)
 8000e10:	f002 ffee 	bl	8003df0 <HAL_SPI_Transmit>
	//Transmit data
	HAL_SPI_Transmit(&accSPI_Handle, dataW, size, 10);
 8000e14:	79bb      	ldrb	r3, [r7, #6]
 8000e16:	b29a      	uxth	r2, r3
 8000e18:	230a      	movs	r3, #10
 8000e1a:	6839      	ldr	r1, [r7, #0]
 8000e1c:	4806      	ldr	r0, [pc, #24]	; (8000e38 <LIS3DSH_WriteIO+0x50>)
 8000e1e:	f002 ffe7 	bl	8003df0 <HAL_SPI_Transmit>
	//Disable CS
	_LIS3DHS_CS_DISABLE;
 8000e22:	2201      	movs	r2, #1
 8000e24:	2108      	movs	r1, #8
 8000e26:	4803      	ldr	r0, [pc, #12]	; (8000e34 <LIS3DSH_WriteIO+0x4c>)
 8000e28:	f002 faa6 	bl	8003378 <HAL_GPIO_WritePin>
}
 8000e2c:	bf00      	nop
 8000e2e:	3710      	adds	r7, #16
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	40021000 	.word	0x40021000
 8000e38:	200000a4 	.word	0x200000a4

08000e3c <LIS3DSH_ReadIO>:
//2. Read IO
void LIS3DSH_ReadIO(uint8_t reg, uint8_t *dataR, uint8_t size)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b084      	sub	sp, #16
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	4603      	mov	r3, r0
 8000e44:	6039      	str	r1, [r7, #0]
 8000e46:	71fb      	strb	r3, [r7, #7]
 8000e48:	4613      	mov	r3, r2
 8000e4a:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[4];
	spiBuf[0] = reg | 0x80;
 8000e4c:	79fb      	ldrb	r3, [r7, #7]
 8000e4e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000e52:	b2db      	uxtb	r3, r3
 8000e54:	723b      	strb	r3, [r7, #8]
	//Enable CS
	_LIS3DHS_CS_ENBALE;
 8000e56:	2200      	movs	r2, #0
 8000e58:	2108      	movs	r1, #8
 8000e5a:	4818      	ldr	r0, [pc, #96]	; (8000ebc <LIS3DSH_ReadIO+0x80>)
 8000e5c:	f002 fa8c 	bl	8003378 <HAL_GPIO_WritePin>
	//set register value
	HAL_SPI_Transmit(&accSPI_Handle, spiBuf, 1, 10);
 8000e60:	f107 0108 	add.w	r1, r7, #8
 8000e64:	230a      	movs	r3, #10
 8000e66:	2201      	movs	r2, #1
 8000e68:	4815      	ldr	r0, [pc, #84]	; (8000ec0 <LIS3DSH_ReadIO+0x84>)
 8000e6a:	f002 ffc1 	bl	8003df0 <HAL_SPI_Transmit>
	//Transmit data
	HAL_SPI_Receive(&accSPI_Handle, spiBuf, size, 10);
 8000e6e:	79bb      	ldrb	r3, [r7, #6]
 8000e70:	b29a      	uxth	r2, r3
 8000e72:	f107 0108 	add.w	r1, r7, #8
 8000e76:	230a      	movs	r3, #10
 8000e78:	4811      	ldr	r0, [pc, #68]	; (8000ec0 <LIS3DSH_ReadIO+0x84>)
 8000e7a:	f003 f8ed 	bl	8004058 <HAL_SPI_Receive>
	//Disable CS
	_LIS3DHS_CS_DISABLE;
 8000e7e:	2201      	movs	r2, #1
 8000e80:	2108      	movs	r1, #8
 8000e82:	480e      	ldr	r0, [pc, #56]	; (8000ebc <LIS3DSH_ReadIO+0x80>)
 8000e84:	f002 fa78 	bl	8003378 <HAL_GPIO_WritePin>

	for(uint8_t i=0; i<(size&0x3); i++)
 8000e88:	2300      	movs	r3, #0
 8000e8a:	73fb      	strb	r3, [r7, #15]
 8000e8c:	e00c      	b.n	8000ea8 <LIS3DSH_ReadIO+0x6c>
	{
		dataR[i] = spiBuf[i];
 8000e8e:	7bfa      	ldrb	r2, [r7, #15]
 8000e90:	7bfb      	ldrb	r3, [r7, #15]
 8000e92:	6839      	ldr	r1, [r7, #0]
 8000e94:	440b      	add	r3, r1
 8000e96:	f107 0110 	add.w	r1, r7, #16
 8000e9a:	440a      	add	r2, r1
 8000e9c:	f812 2c08 	ldrb.w	r2, [r2, #-8]
 8000ea0:	701a      	strb	r2, [r3, #0]
	for(uint8_t i=0; i<(size&0x3); i++)
 8000ea2:	7bfb      	ldrb	r3, [r7, #15]
 8000ea4:	3301      	adds	r3, #1
 8000ea6:	73fb      	strb	r3, [r7, #15]
 8000ea8:	7bfa      	ldrb	r2, [r7, #15]
 8000eaa:	79bb      	ldrb	r3, [r7, #6]
 8000eac:	f003 0303 	and.w	r3, r3, #3
 8000eb0:	429a      	cmp	r2, r3
 8000eb2:	dbec      	blt.n	8000e8e <LIS3DSH_ReadIO+0x52>
	}
}
 8000eb4:	bf00      	nop
 8000eb6:	3710      	adds	r7, #16
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	40021000 	.word	0x40021000
 8000ec0:	200000a4 	.word	0x200000a4

08000ec4 <LIS3DSH_Init>:


//1. Accelerometer initialise function
void LIS3DSH_Init(SPI_HandleTypeDef *accSPI, LIS3DSH_InitTypeDef *accInitDef)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b084      	sub	sp, #16
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
 8000ecc:	6039      	str	r1, [r7, #0]
	uint8_t spiData = 0;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	73fb      	strb	r3, [r7, #15]

	memcpy(&accSPI_Handle, accSPI, sizeof(*accSPI));
 8000ed2:	2258      	movs	r2, #88	; 0x58
 8000ed4:	6879      	ldr	r1, [r7, #4]
 8000ed6:	485b      	ldr	r0, [pc, #364]	; (8001044 <LIS3DSH_Init+0x180>)
 8000ed8:	f006 fe4a 	bl	8007b70 <memcpy>
	//** 1. Enable Axes and Output Data Rate **//
	//Set CTRL REG4 settings value
	spiData |= (accInitDef->enableAxes & 0x07);		//Enable Axes
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	78db      	ldrb	r3, [r3, #3]
 8000ee0:	b25b      	sxtb	r3, r3
 8000ee2:	f003 0307 	and.w	r3, r3, #7
 8000ee6:	b25a      	sxtb	r2, r3
 8000ee8:	7bfb      	ldrb	r3, [r7, #15]
 8000eea:	b25b      	sxtb	r3, r3
 8000eec:	4313      	orrs	r3, r2
 8000eee:	b25b      	sxtb	r3, r3
 8000ef0:	b2db      	uxtb	r3, r3
 8000ef2:	73fb      	strb	r3, [r7, #15]
	spiData |= (accInitDef->dataRate & 0xF0);			//Output Data Rate
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	b25b      	sxtb	r3, r3
 8000efa:	f023 030f 	bic.w	r3, r3, #15
 8000efe:	b25a      	sxtb	r2, r3
 8000f00:	7bfb      	ldrb	r3, [r7, #15]
 8000f02:	b25b      	sxtb	r3, r3
 8000f04:	4313      	orrs	r3, r2
 8000f06:	b25b      	sxtb	r3, r3
 8000f08:	b2db      	uxtb	r3, r3
 8000f0a:	73fb      	strb	r3, [r7, #15]
	//Write to accelerometer
	LIS3DSH_WriteIO(LIS3DSH_CTRL_REG4_ADDR, &spiData, 1);
 8000f0c:	f107 030f 	add.w	r3, r7, #15
 8000f10:	2201      	movs	r2, #1
 8000f12:	4619      	mov	r1, r3
 8000f14:	2020      	movs	r0, #32
 8000f16:	f7ff ff67 	bl	8000de8 <LIS3DSH_WriteIO>

	//** 2. Full-Scale selection, Anti-aliasing BW, self test and 4-wire SPI **//
	spiData = 0;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	73fb      	strb	r3, [r7, #15]
	spiData |= (accInitDef->antiAliasingBW & 0xC0);		//Anti-aliasing BW
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	789b      	ldrb	r3, [r3, #2]
 8000f22:	b25b      	sxtb	r3, r3
 8000f24:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000f28:	b25a      	sxtb	r2, r3
 8000f2a:	7bfb      	ldrb	r3, [r7, #15]
 8000f2c:	b25b      	sxtb	r3, r3
 8000f2e:	4313      	orrs	r3, r2
 8000f30:	b25b      	sxtb	r3, r3
 8000f32:	b2db      	uxtb	r3, r3
 8000f34:	73fb      	strb	r3, [r7, #15]
	spiData |= (accInitDef->fullScale & 0x38);				//Full-Scale
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	785b      	ldrb	r3, [r3, #1]
 8000f3a:	b25b      	sxtb	r3, r3
 8000f3c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8000f40:	b25a      	sxtb	r2, r3
 8000f42:	7bfb      	ldrb	r3, [r7, #15]
 8000f44:	b25b      	sxtb	r3, r3
 8000f46:	4313      	orrs	r3, r2
 8000f48:	b25b      	sxtb	r3, r3
 8000f4a:	b2db      	uxtb	r3, r3
 8000f4c:	73fb      	strb	r3, [r7, #15]
	//Write to accelerometer
	LIS3DSH_WriteIO(LIS3DSH_CTRL_REG5_ADDR, &spiData, 1);
 8000f4e:	f107 030f 	add.w	r3, r7, #15
 8000f52:	2201      	movs	r2, #1
 8000f54:	4619      	mov	r1, r3
 8000f56:	2024      	movs	r0, #36	; 0x24
 8000f58:	f7ff ff46 	bl	8000de8 <LIS3DSH_WriteIO>

	//** 3. Interrupt Configuration **//
	if(accInitDef->interruptEnable)
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	791b      	ldrb	r3, [r3, #4]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d008      	beq.n	8000f76 <LIS3DSH_Init+0xb2>
	{
		spiData = 0x88;
 8000f64:	2388      	movs	r3, #136	; 0x88
 8000f66:	73fb      	strb	r3, [r7, #15]
		//Write to accelerometer
		LIS3DSH_WriteIO(LIS3DSH_CTRL_REG3_ADDR, &spiData, 1);
 8000f68:	f107 030f 	add.w	r3, r7, #15
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	4619      	mov	r1, r3
 8000f70:	2023      	movs	r0, #35	; 0x23
 8000f72:	f7ff ff39 	bl	8000de8 <LIS3DSH_WriteIO>
	}

	//Assign sensor sensitivity (based on Full-Scale)
	switch(accInitDef->fullScale)
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	785b      	ldrb	r3, [r3, #1]
 8000f7a:	2b20      	cmp	r3, #32
 8000f7c:	d858      	bhi.n	8001030 <LIS3DSH_Init+0x16c>
 8000f7e:	a201      	add	r2, pc, #4	; (adr r2, 8000f84 <LIS3DSH_Init+0xc0>)
 8000f80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f84:	08001009 	.word	0x08001009
 8000f88:	08001031 	.word	0x08001031
 8000f8c:	08001031 	.word	0x08001031
 8000f90:	08001031 	.word	0x08001031
 8000f94:	08001031 	.word	0x08001031
 8000f98:	08001031 	.word	0x08001031
 8000f9c:	08001031 	.word	0x08001031
 8000fa0:	08001031 	.word	0x08001031
 8000fa4:	08001011 	.word	0x08001011
 8000fa8:	08001031 	.word	0x08001031
 8000fac:	08001031 	.word	0x08001031
 8000fb0:	08001031 	.word	0x08001031
 8000fb4:	08001031 	.word	0x08001031
 8000fb8:	08001031 	.word	0x08001031
 8000fbc:	08001031 	.word	0x08001031
 8000fc0:	08001031 	.word	0x08001031
 8000fc4:	08001019 	.word	0x08001019
 8000fc8:	08001031 	.word	0x08001031
 8000fcc:	08001031 	.word	0x08001031
 8000fd0:	08001031 	.word	0x08001031
 8000fd4:	08001031 	.word	0x08001031
 8000fd8:	08001031 	.word	0x08001031
 8000fdc:	08001031 	.word	0x08001031
 8000fe0:	08001031 	.word	0x08001031
 8000fe4:	08001021 	.word	0x08001021
 8000fe8:	08001031 	.word	0x08001031
 8000fec:	08001031 	.word	0x08001031
 8000ff0:	08001031 	.word	0x08001031
 8000ff4:	08001031 	.word	0x08001031
 8000ff8:	08001031 	.word	0x08001031
 8000ffc:	08001031 	.word	0x08001031
 8001000:	08001031 	.word	0x08001031
 8001004:	08001029 	.word	0x08001029
	{
		case LIS3DSH_FULLSCALE_2:
			lis3dsh_Sensitivity = LIS3DSH_SENSITIVITY_0_06G;
 8001008:	4b0f      	ldr	r3, [pc, #60]	; (8001048 <LIS3DSH_Init+0x184>)
 800100a:	4a10      	ldr	r2, [pc, #64]	; (800104c <LIS3DSH_Init+0x188>)
 800100c:	601a      	str	r2, [r3, #0]
			break;
 800100e:	e00f      	b.n	8001030 <LIS3DSH_Init+0x16c>

		case LIS3DSH_FULLSCALE_4:
			lis3dsh_Sensitivity = LIS3DSH_SENSITIVITY_0_12G;
 8001010:	4b0d      	ldr	r3, [pc, #52]	; (8001048 <LIS3DSH_Init+0x184>)
 8001012:	4a0f      	ldr	r2, [pc, #60]	; (8001050 <LIS3DSH_Init+0x18c>)
 8001014:	601a      	str	r2, [r3, #0]
			break;
 8001016:	e00b      	b.n	8001030 <LIS3DSH_Init+0x16c>

		case LIS3DSH_FULLSCALE_6:
			lis3dsh_Sensitivity = LIS3DSH_SENSITIVITY_0_18G;
 8001018:	4b0b      	ldr	r3, [pc, #44]	; (8001048 <LIS3DSH_Init+0x184>)
 800101a:	4a0e      	ldr	r2, [pc, #56]	; (8001054 <LIS3DSH_Init+0x190>)
 800101c:	601a      	str	r2, [r3, #0]
			break;
 800101e:	e007      	b.n	8001030 <LIS3DSH_Init+0x16c>

		case LIS3DSH_FULLSCALE_8:
			lis3dsh_Sensitivity = LIS3DSH_SENSITIVITY_0_24G;
 8001020:	4b09      	ldr	r3, [pc, #36]	; (8001048 <LIS3DSH_Init+0x184>)
 8001022:	4a0d      	ldr	r2, [pc, #52]	; (8001058 <LIS3DSH_Init+0x194>)
 8001024:	601a      	str	r2, [r3, #0]
			break;
 8001026:	e003      	b.n	8001030 <LIS3DSH_Init+0x16c>

		case LIS3DSH_FULLSCALE_16:
			lis3dsh_Sensitivity = LIS3DSH_SENSITIVITY_0_73G;
 8001028:	4b07      	ldr	r3, [pc, #28]	; (8001048 <LIS3DSH_Init+0x184>)
 800102a:	4a0c      	ldr	r2, [pc, #48]	; (800105c <LIS3DSH_Init+0x198>)
 800102c:	601a      	str	r2, [r3, #0]
			break;
 800102e:	bf00      	nop
	}
	_LIS3DHS_CS_DISABLE;
 8001030:	2201      	movs	r2, #1
 8001032:	2108      	movs	r1, #8
 8001034:	480a      	ldr	r0, [pc, #40]	; (8001060 <LIS3DSH_Init+0x19c>)
 8001036:	f002 f99f 	bl	8003378 <HAL_GPIO_WritePin>
}
 800103a:	bf00      	nop
 800103c:	3710      	adds	r7, #16
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	200000a4 	.word	0x200000a4
 8001048:	20000000 	.word	0x20000000
 800104c:	3d75c28f 	.word	0x3d75c28f
 8001050:	3df5c28f 	.word	0x3df5c28f
 8001054:	3e3851ec 	.word	0x3e3851ec
 8001058:	3e75c28f 	.word	0x3e75c28f
 800105c:	3f3ae148 	.word	0x3f3ae148
 8001060:	40021000 	.word	0x40021000

08001064 <LIS3DSH_GetDataRaw>:
//2. Get Accelerometer raw data
LIS3DSH_DataRaw LIS3DSH_GetDataRaw(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b086      	sub	sp, #24
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
	uint8_t spiBuf[2];
	LIS3DSH_DataRaw tempDataRaw;
	//Read X data
	LIS3DSH_ReadIO(LIS3DSH_OUT_X_L_ADDR, spiBuf, 2);
 800106c:	f107 0314 	add.w	r3, r7, #20
 8001070:	2202      	movs	r2, #2
 8001072:	4619      	mov	r1, r3
 8001074:	2028      	movs	r0, #40	; 0x28
 8001076:	f7ff fee1 	bl	8000e3c <LIS3DSH_ReadIO>
	tempDataRaw.x = ((spiBuf[1] << 8) + spiBuf[0]);
 800107a:	7d7b      	ldrb	r3, [r7, #21]
 800107c:	b29b      	uxth	r3, r3
 800107e:	021b      	lsls	r3, r3, #8
 8001080:	b29a      	uxth	r2, r3
 8001082:	7d3b      	ldrb	r3, [r7, #20]
 8001084:	b29b      	uxth	r3, r3
 8001086:	4413      	add	r3, r2
 8001088:	b29b      	uxth	r3, r3
 800108a:	b21b      	sxth	r3, r3
 800108c:	81bb      	strh	r3, [r7, #12]

	//Read Y data
	LIS3DSH_ReadIO(LIS3DSH_OUT_Y_L_ADDR, spiBuf, 2);
 800108e:	f107 0314 	add.w	r3, r7, #20
 8001092:	2202      	movs	r2, #2
 8001094:	4619      	mov	r1, r3
 8001096:	202a      	movs	r0, #42	; 0x2a
 8001098:	f7ff fed0 	bl	8000e3c <LIS3DSH_ReadIO>
	tempDataRaw.y = ((spiBuf[1] << 8) + spiBuf[0]);
 800109c:	7d7b      	ldrb	r3, [r7, #21]
 800109e:	b29b      	uxth	r3, r3
 80010a0:	021b      	lsls	r3, r3, #8
 80010a2:	b29a      	uxth	r2, r3
 80010a4:	7d3b      	ldrb	r3, [r7, #20]
 80010a6:	b29b      	uxth	r3, r3
 80010a8:	4413      	add	r3, r2
 80010aa:	b29b      	uxth	r3, r3
 80010ac:	b21b      	sxth	r3, r3
 80010ae:	81fb      	strh	r3, [r7, #14]

	//Read Z data
	LIS3DSH_ReadIO(LIS3DSH_OUT_Z_L_ADDR, spiBuf, 2);
 80010b0:	f107 0314 	add.w	r3, r7, #20
 80010b4:	2202      	movs	r2, #2
 80010b6:	4619      	mov	r1, r3
 80010b8:	202c      	movs	r0, #44	; 0x2c
 80010ba:	f7ff febf 	bl	8000e3c <LIS3DSH_ReadIO>
	tempDataRaw.z = ((spiBuf[1] << 8) + spiBuf[0]);
 80010be:	7d7b      	ldrb	r3, [r7, #21]
 80010c0:	b29b      	uxth	r3, r3
 80010c2:	021b      	lsls	r3, r3, #8
 80010c4:	b29a      	uxth	r2, r3
 80010c6:	7d3b      	ldrb	r3, [r7, #20]
 80010c8:	b29b      	uxth	r3, r3
 80010ca:	4413      	add	r3, r2
 80010cc:	b29b      	uxth	r3, r3
 80010ce:	b21b      	sxth	r3, r3
 80010d0:	823b      	strh	r3, [r7, #16]

	return tempDataRaw;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	461a      	mov	r2, r3
 80010d6:	f107 030c 	add.w	r3, r7, #12
 80010da:	6818      	ldr	r0, [r3, #0]
 80010dc:	6010      	str	r0, [r2, #0]
 80010de:	889b      	ldrh	r3, [r3, #4]
 80010e0:	8093      	strh	r3, [r2, #4]

}
 80010e2:	6878      	ldr	r0, [r7, #4]
 80010e4:	3718      	adds	r7, #24
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
	...

080010ec <LIS3DSH_GetDataScaled>:
//3. Get Accelerometer mg data
LIS3DSH_DataScaled LIS3DSH_GetDataScaled(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b08c      	sub	sp, #48	; 0x30
 80010f0:	af00      	add	r7, sp, #0
	//Read raw data
	LIS3DSH_DataRaw tempRawData = LIS3DSH_GetDataRaw();;
 80010f2:	f107 031c 	add.w	r3, r7, #28
 80010f6:	4618      	mov	r0, r3
 80010f8:	f7ff ffb4 	bl	8001064 <LIS3DSH_GetDataRaw>
	//Scale data and return
	LIS3DSH_DataScaled tempScaledData;
	tempScaledData.x = (tempRawData.x * lis3dsh_Sensitivity * __X_Scale) + 0.0f - __X_Bias;
 80010fc:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001100:	ee07 3a90 	vmov	s15, r3
 8001104:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001108:	4b31      	ldr	r3, [pc, #196]	; (80011d0 <LIS3DSH_GetDataScaled+0xe4>)
 800110a:	edd3 7a00 	vldr	s15, [r3]
 800110e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001112:	4b30      	ldr	r3, [pc, #192]	; (80011d4 <LIS3DSH_GetDataScaled+0xe8>)
 8001114:	edd3 7a00 	vldr	s15, [r3]
 8001118:	ee67 7a27 	vmul.f32	s15, s14, s15
 800111c:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 80011d8 <LIS3DSH_GetDataScaled+0xec>
 8001120:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001124:	4b2d      	ldr	r3, [pc, #180]	; (80011dc <LIS3DSH_GetDataScaled+0xf0>)
 8001126:	edd3 7a00 	vldr	s15, [r3]
 800112a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800112e:	edc7 7a04 	vstr	s15, [r7, #16]
	tempScaledData.y = (tempRawData.y * lis3dsh_Sensitivity * __Y_Scale) + 0.0f - __Y_Bias;
 8001132:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001136:	ee07 3a90 	vmov	s15, r3
 800113a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800113e:	4b24      	ldr	r3, [pc, #144]	; (80011d0 <LIS3DSH_GetDataScaled+0xe4>)
 8001140:	edd3 7a00 	vldr	s15, [r3]
 8001144:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001148:	4b25      	ldr	r3, [pc, #148]	; (80011e0 <LIS3DSH_GetDataScaled+0xf4>)
 800114a:	edd3 7a00 	vldr	s15, [r3]
 800114e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001152:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80011d8 <LIS3DSH_GetDataScaled+0xec>
 8001156:	ee37 7a87 	vadd.f32	s14, s15, s14
 800115a:	4b22      	ldr	r3, [pc, #136]	; (80011e4 <LIS3DSH_GetDataScaled+0xf8>)
 800115c:	edd3 7a00 	vldr	s15, [r3]
 8001160:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001164:	edc7 7a05 	vstr	s15, [r7, #20]
	tempScaledData.z = (tempRawData.z * lis3dsh_Sensitivity * __Z_Scale) + 0.0f - __Z_Bias;
 8001168:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800116c:	ee07 3a90 	vmov	s15, r3
 8001170:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001174:	4b16      	ldr	r3, [pc, #88]	; (80011d0 <LIS3DSH_GetDataScaled+0xe4>)
 8001176:	edd3 7a00 	vldr	s15, [r3]
 800117a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800117e:	4b1a      	ldr	r3, [pc, #104]	; (80011e8 <LIS3DSH_GetDataScaled+0xfc>)
 8001180:	edd3 7a00 	vldr	s15, [r3]
 8001184:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001188:	ed9f 7a13 	vldr	s14, [pc, #76]	; 80011d8 <LIS3DSH_GetDataScaled+0xec>
 800118c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001190:	4b16      	ldr	r3, [pc, #88]	; (80011ec <LIS3DSH_GetDataScaled+0x100>)
 8001192:	edd3 7a00 	vldr	s15, [r3]
 8001196:	ee77 7a67 	vsub.f32	s15, s14, s15
 800119a:	edc7 7a06 	vstr	s15, [r7, #24]

	return tempScaledData;
 800119e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011a2:	f107 0210 	add.w	r2, r7, #16
 80011a6:	ca07      	ldmia	r2, {r0, r1, r2}
 80011a8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80011ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80011ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80011b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011b2:	ee06 1a90 	vmov	s13, r1
 80011b6:	ee07 2a10 	vmov	s14, r2
 80011ba:	ee07 3a90 	vmov	s15, r3
}
 80011be:	eeb0 0a66 	vmov.f32	s0, s13
 80011c2:	eef0 0a47 	vmov.f32	s1, s14
 80011c6:	eeb0 1a67 	vmov.f32	s2, s15
 80011ca:	3730      	adds	r7, #48	; 0x30
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	20000000 	.word	0x20000000
 80011d4:	20000004 	.word	0x20000004
 80011d8:	00000000 	.word	0x00000000
 80011dc:	200000fc 	.word	0x200000fc
 80011e0:	20000008 	.word	0x20000008
 80011e4:	20000100 	.word	0x20000100
 80011e8:	2000000c 	.word	0x2000000c
 80011ec:	20000104 	.word	0x20000104

080011f0 <LIS3DSH_PollDRDY>:
//4. Poll for Data Ready
bool LIS3DSH_PollDRDY(uint32_t msTimeout)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b084      	sub	sp, #16
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
	uint8_t Acc_status;
	uint32_t startTick = HAL_GetTick();
 80011f8:	f001 f8a6 	bl	8002348 <HAL_GetTick>
 80011fc:	60f8      	str	r0, [r7, #12]
	do
	{
		//Read status register with a timeout
		LIS3DSH_ReadIO(0x27, &Acc_status, 1);
 80011fe:	f107 030b 	add.w	r3, r7, #11
 8001202:	2201      	movs	r2, #1
 8001204:	4619      	mov	r1, r3
 8001206:	2027      	movs	r0, #39	; 0x27
 8001208:	f7ff fe18 	bl	8000e3c <LIS3DSH_ReadIO>
		if(Acc_status & 0x07)break;
 800120c:	7afb      	ldrb	r3, [r7, #11]
 800120e:	f003 0307 	and.w	r3, r3, #7
 8001212:	2b00      	cmp	r3, #0
 8001214:	d10d      	bne.n	8001232 <LIS3DSH_PollDRDY+0x42>

	}while((Acc_status & 0x07)==0 && (HAL_GetTick() - startTick) < msTimeout);
 8001216:	7afb      	ldrb	r3, [r7, #11]
 8001218:	f003 0307 	and.w	r3, r3, #7
 800121c:	2b00      	cmp	r3, #0
 800121e:	d109      	bne.n	8001234 <LIS3DSH_PollDRDY+0x44>
 8001220:	f001 f892 	bl	8002348 <HAL_GetTick>
 8001224:	4602      	mov	r2, r0
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	1ad3      	subs	r3, r2, r3
 800122a:	687a      	ldr	r2, [r7, #4]
 800122c:	429a      	cmp	r2, r3
 800122e:	d8e6      	bhi.n	80011fe <LIS3DSH_PollDRDY+0xe>
 8001230:	e000      	b.n	8001234 <LIS3DSH_PollDRDY+0x44>
		if(Acc_status & 0x07)break;
 8001232:	bf00      	nop
	if(Acc_status & 0x07)
 8001234:	7afb      	ldrb	r3, [r7, #11]
 8001236:	f003 0307 	and.w	r3, r3, #7
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <LIS3DSH_PollDRDY+0x52>
	{
		return true;
 800123e:	2301      	movs	r3, #1
 8001240:	e000      	b.n	8001244 <LIS3DSH_PollDRDY+0x54>
	}
	return false;
 8001242:	2300      	movs	r3, #0

}
 8001244:	4618      	mov	r0, r3
 8001246:	3710      	adds	r7, #16
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}

0800124c <LIS3DSH_X_calibrate>:

//** Calibration functions **//
//1. Set X-Axis calibrate
void LIS3DSH_X_calibrate(float x_min, float x_max)
{
 800124c:	b480      	push	{r7}
 800124e:	b083      	sub	sp, #12
 8001250:	af00      	add	r7, sp, #0
 8001252:	ed87 0a01 	vstr	s0, [r7, #4]
 8001256:	edc7 0a00 	vstr	s1, [r7]
	__X_Bias = (x_max+x_min)/2.0f;
 800125a:	ed97 7a00 	vldr	s14, [r7]
 800125e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001262:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001266:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800126a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800126e:	4b0b      	ldr	r3, [pc, #44]	; (800129c <LIS3DSH_X_calibrate+0x50>)
 8001270:	edc3 7a00 	vstr	s15, [r3]
	__X_Scale = (2*1000)/(x_max - x_min);
 8001274:	ed97 7a00 	vldr	s14, [r7]
 8001278:	edd7 7a01 	vldr	s15, [r7, #4]
 800127c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001280:	eddf 6a07 	vldr	s13, [pc, #28]	; 80012a0 <LIS3DSH_X_calibrate+0x54>
 8001284:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001288:	4b06      	ldr	r3, [pc, #24]	; (80012a4 <LIS3DSH_X_calibrate+0x58>)
 800128a:	edc3 7a00 	vstr	s15, [r3]
}
 800128e:	bf00      	nop
 8001290:	370c      	adds	r7, #12
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr
 800129a:	bf00      	nop
 800129c:	200000fc 	.word	0x200000fc
 80012a0:	44fa0000 	.word	0x44fa0000
 80012a4:	20000004 	.word	0x20000004

080012a8 <LIS3DSH_Y_calibrate>:
//2. Set Y-Axis calibrate
void LIS3DSH_Y_calibrate(float y_min, float y_max)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b083      	sub	sp, #12
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	ed87 0a01 	vstr	s0, [r7, #4]
 80012b2:	edc7 0a00 	vstr	s1, [r7]
	__Y_Bias = (y_max+y_min)/2.0f;
 80012b6:	ed97 7a00 	vldr	s14, [r7]
 80012ba:	edd7 7a01 	vldr	s15, [r7, #4]
 80012be:	ee37 7a27 	vadd.f32	s14, s14, s15
 80012c2:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80012c6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012ca:	4b0b      	ldr	r3, [pc, #44]	; (80012f8 <LIS3DSH_Y_calibrate+0x50>)
 80012cc:	edc3 7a00 	vstr	s15, [r3]
	__Y_Scale = (2*1000)/(y_max - y_min);
 80012d0:	ed97 7a00 	vldr	s14, [r7]
 80012d4:	edd7 7a01 	vldr	s15, [r7, #4]
 80012d8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80012dc:	eddf 6a07 	vldr	s13, [pc, #28]	; 80012fc <LIS3DSH_Y_calibrate+0x54>
 80012e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012e4:	4b06      	ldr	r3, [pc, #24]	; (8001300 <LIS3DSH_Y_calibrate+0x58>)
 80012e6:	edc3 7a00 	vstr	s15, [r3]
}
 80012ea:	bf00      	nop
 80012ec:	370c      	adds	r7, #12
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr
 80012f6:	bf00      	nop
 80012f8:	20000100 	.word	0x20000100
 80012fc:	44fa0000 	.word	0x44fa0000
 8001300:	20000008 	.word	0x20000008

08001304 <LIS3DSH_Z_calibrate>:
//3. Set Z-Axis calibrate
void LIS3DSH_Z_calibrate(float z_min, float z_max)
{
 8001304:	b480      	push	{r7}
 8001306:	b083      	sub	sp, #12
 8001308:	af00      	add	r7, sp, #0
 800130a:	ed87 0a01 	vstr	s0, [r7, #4]
 800130e:	edc7 0a00 	vstr	s1, [r7]
	__Z_Bias = (z_max+z_min)/2.0f;
 8001312:	ed97 7a00 	vldr	s14, [r7]
 8001316:	edd7 7a01 	vldr	s15, [r7, #4]
 800131a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800131e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001322:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001326:	4b0b      	ldr	r3, [pc, #44]	; (8001354 <LIS3DSH_Z_calibrate+0x50>)
 8001328:	edc3 7a00 	vstr	s15, [r3]
	__Z_Scale = (2*1000)/(z_max - z_min);
 800132c:	ed97 7a00 	vldr	s14, [r7]
 8001330:	edd7 7a01 	vldr	s15, [r7, #4]
 8001334:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001338:	eddf 6a07 	vldr	s13, [pc, #28]	; 8001358 <LIS3DSH_Z_calibrate+0x54>
 800133c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001340:	4b06      	ldr	r3, [pc, #24]	; (800135c <LIS3DSH_Z_calibrate+0x58>)
 8001342:	edc3 7a00 	vstr	s15, [r3]
}
 8001346:	bf00      	nop
 8001348:	370c      	adds	r7, #12
 800134a:	46bd      	mov	sp, r7
 800134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001350:	4770      	bx	lr
 8001352:	bf00      	nop
 8001354:	20000104 	.word	0x20000104
 8001358:	44fa0000 	.word	0x44fa0000
 800135c:	2000000c 	.word	0x2000000c

08001360 <main>:
void Sampling_ACC(void);
static void Intensity_Cal(void);


int main(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	af00      	add	r7, sp, #0
  /*System Initialization*/
  HAL_Init();
 8001364:	f000 ffba 	bl	80022dc <HAL_Init>
  SystemClock_Config();
 8001368:	f000 f846 	bl	80013f8 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800136c:	f000 f91a 	bl	80015a4 <MX_GPIO_Init>
  MX_CAN1_Init();
 8001370:	f000 f8aa 	bl	80014c8 <MX_CAN1_Init>
  MX_SPI1_Init();
 8001374:	f000 f8e0 	bl	8001538 <MX_SPI1_Init>
  /*Accelerometer specific configurations*/
  Acc_config();
 8001378:	f000 f9bc 	bl	80016f4 <Acc_config>
  LIS3DSH_Init(&hspi1, &myAccConfigDef);
 800137c:	4914      	ldr	r1, [pc, #80]	; (80013d0 <main+0x70>)
 800137e:	4815      	ldr	r0, [pc, #84]	; (80013d4 <main+0x74>)
 8001380:	f7ff fda0 	bl	8000ec4 <LIS3DSH_Init>
  /*CAN specific configurations*/
  CAN1_Filter_Config();
 8001384:	f000 f9e8 	bl	8001758 <CAN1_Filter_Config>
  HAL_CAN_Start(&hcan1);
 8001388:	4813      	ldr	r0, [pc, #76]	; (80013d8 <main+0x78>)
 800138a:	f001 f9c5 	bl	8002718 <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);//receive it
 800138e:	2102      	movs	r1, #2
 8001390:	4811      	ldr	r0, [pc, #68]	; (80013d8 <main+0x78>)
 8001392:	f001 fb04 	bl	800299e <HAL_CAN_ActivateNotification>

  /* Init scheduler */
  osKernelInitialize();
 8001396:	f003 fc59 	bl	8004c4c <osKernelInitialize>

  /*Semaphore for synchronization*/
  xSemaphore = xSemaphoreCreateCounting(2,0);
 800139a:	2100      	movs	r1, #0
 800139c:	2002      	movs	r0, #2
 800139e:	f003 ff89 	bl	80052b4 <xQueueCreateCountingSemaphore>
 80013a2:	4602      	mov	r2, r0
 80013a4:	4b0d      	ldr	r3, [pc, #52]	; (80013dc <main+0x7c>)
 80013a6:	601a      	str	r2, [r3, #0]

  /* Create the thread(s) */
  /* creation of Task01 */
  Task01Handle = osThreadNew(StartTask01, NULL, &Task01_attributes);
 80013a8:	4a0d      	ldr	r2, [pc, #52]	; (80013e0 <main+0x80>)
 80013aa:	2100      	movs	r1, #0
 80013ac:	480d      	ldr	r0, [pc, #52]	; (80013e4 <main+0x84>)
 80013ae:	f003 fcb5 	bl	8004d1c <osThreadNew>
 80013b2:	4602      	mov	r2, r0
 80013b4:	4b0c      	ldr	r3, [pc, #48]	; (80013e8 <main+0x88>)
 80013b6:	601a      	str	r2, [r3, #0]

  /* creation of Task02 */
  Task02Handle = osThreadNew(StartTask02, NULL, &Task02_attributes);
 80013b8:	4a0c      	ldr	r2, [pc, #48]	; (80013ec <main+0x8c>)
 80013ba:	2100      	movs	r1, #0
 80013bc:	480c      	ldr	r0, [pc, #48]	; (80013f0 <main+0x90>)
 80013be:	f003 fcad 	bl	8004d1c <osThreadNew>
 80013c2:	4602      	mov	r2, r0
 80013c4:	4b0b      	ldr	r3, [pc, #44]	; (80013f4 <main+0x94>)
 80013c6:	601a      	str	r2, [r3, #0]

  /* Start scheduler */
  osKernelStart();
 80013c8:	f003 fc74 	bl	8004cb4 <osKernelStart>
 
  while (1);
 80013cc:	e7fe      	b.n	80013cc <main+0x6c>
 80013ce:	bf00      	nop
 80013d0:	20004a60 	.word	0x20004a60
 80013d4:	20004a9c 	.word	0x20004a9c
 80013d8:	20004afc 	.word	0x20004afc
 80013dc:	20004a50 	.word	0x20004a50
 80013e0:	08008190 	.word	0x08008190
 80013e4:	08001ef1 	.word	0x08001ef1
 80013e8:	20004a80 	.word	0x20004a80
 80013ec:	080081b4 	.word	0x080081b4
 80013f0:	08001f1d 	.word	0x08001f1d
 80013f4:	20004a18 	.word	0x20004a18

080013f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b094      	sub	sp, #80	; 0x50
 80013fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013fe:	f107 0320 	add.w	r3, r7, #32
 8001402:	2230      	movs	r2, #48	; 0x30
 8001404:	2100      	movs	r1, #0
 8001406:	4618      	mov	r0, r3
 8001408:	f006 fbbd 	bl	8007b86 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800140c:	f107 030c 	add.w	r3, r7, #12
 8001410:	2200      	movs	r2, #0
 8001412:	601a      	str	r2, [r3, #0]
 8001414:	605a      	str	r2, [r3, #4]
 8001416:	609a      	str	r2, [r3, #8]
 8001418:	60da      	str	r2, [r3, #12]
 800141a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800141c:	2300      	movs	r3, #0
 800141e:	60bb      	str	r3, [r7, #8]
 8001420:	4b27      	ldr	r3, [pc, #156]	; (80014c0 <SystemClock_Config+0xc8>)
 8001422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001424:	4a26      	ldr	r2, [pc, #152]	; (80014c0 <SystemClock_Config+0xc8>)
 8001426:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800142a:	6413      	str	r3, [r2, #64]	; 0x40
 800142c:	4b24      	ldr	r3, [pc, #144]	; (80014c0 <SystemClock_Config+0xc8>)
 800142e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001430:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001434:	60bb      	str	r3, [r7, #8]
 8001436:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001438:	2300      	movs	r3, #0
 800143a:	607b      	str	r3, [r7, #4]
 800143c:	4b21      	ldr	r3, [pc, #132]	; (80014c4 <SystemClock_Config+0xcc>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a20      	ldr	r2, [pc, #128]	; (80014c4 <SystemClock_Config+0xcc>)
 8001442:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001446:	6013      	str	r3, [r2, #0]
 8001448:	4b1e      	ldr	r3, [pc, #120]	; (80014c4 <SystemClock_Config+0xcc>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001450:	607b      	str	r3, [r7, #4]
 8001452:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001454:	2301      	movs	r3, #1
 8001456:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001458:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800145c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800145e:	2302      	movs	r3, #2
 8001460:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001462:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001466:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001468:	2304      	movs	r3, #4
 800146a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 80;
 800146c:	2350      	movs	r3, #80	; 0x50
 800146e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001470:	2302      	movs	r3, #2
 8001472:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001474:	2304      	movs	r3, #4
 8001476:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001478:	f107 0320 	add.w	r3, r7, #32
 800147c:	4618      	mov	r0, r3
 800147e:	f001 ffd3 	bl	8003428 <HAL_RCC_OscConfig>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d001      	beq.n	800148c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001488:	f000 fd8c 	bl	8001fa4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800148c:	230f      	movs	r3, #15
 800148e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001490:	2302      	movs	r3, #2
 8001492:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001494:	2300      	movs	r3, #0
 8001496:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001498:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800149c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800149e:	2300      	movs	r3, #0
 80014a0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80014a2:	f107 030c 	add.w	r3, r7, #12
 80014a6:	2102      	movs	r1, #2
 80014a8:	4618      	mov	r0, r3
 80014aa:	f002 fa2d 	bl	8003908 <HAL_RCC_ClockConfig>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80014b4:	f000 fd76 	bl	8001fa4 <Error_Handler>
  }
}
 80014b8:	bf00      	nop
 80014ba:	3750      	adds	r7, #80	; 0x50
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	40023800 	.word	0x40023800
 80014c4:	40007000 	.word	0x40007000

080014c8 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80014cc:	4b18      	ldr	r3, [pc, #96]	; (8001530 <MX_CAN1_Init+0x68>)
 80014ce:	4a19      	ldr	r2, [pc, #100]	; (8001534 <MX_CAN1_Init+0x6c>)
 80014d0:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 4;
 80014d2:	4b17      	ldr	r3, [pc, #92]	; (8001530 <MX_CAN1_Init+0x68>)
 80014d4:	2204      	movs	r2, #4
 80014d6:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80014d8:	4b15      	ldr	r3, [pc, #84]	; (8001530 <MX_CAN1_Init+0x68>)
 80014da:	2200      	movs	r2, #0
 80014dc:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_3TQ;
 80014de:	4b14      	ldr	r3, [pc, #80]	; (8001530 <MX_CAN1_Init+0x68>)
 80014e0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80014e4:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_12TQ;
 80014e6:	4b12      	ldr	r3, [pc, #72]	; (8001530 <MX_CAN1_Init+0x68>)
 80014e8:	f44f 2230 	mov.w	r2, #720896	; 0xb0000
 80014ec:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_7TQ;
 80014ee:	4b10      	ldr	r3, [pc, #64]	; (8001530 <MX_CAN1_Init+0x68>)
 80014f0:	f44f 02c0 	mov.w	r2, #6291456	; 0x600000
 80014f4:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80014f6:	4b0e      	ldr	r3, [pc, #56]	; (8001530 <MX_CAN1_Init+0x68>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80014fc:	4b0c      	ldr	r3, [pc, #48]	; (8001530 <MX_CAN1_Init+0x68>)
 80014fe:	2200      	movs	r2, #0
 8001500:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001502:	4b0b      	ldr	r3, [pc, #44]	; (8001530 <MX_CAN1_Init+0x68>)
 8001504:	2200      	movs	r2, #0
 8001506:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 8001508:	4b09      	ldr	r3, [pc, #36]	; (8001530 <MX_CAN1_Init+0x68>)
 800150a:	2201      	movs	r2, #1
 800150c:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800150e:	4b08      	ldr	r3, [pc, #32]	; (8001530 <MX_CAN1_Init+0x68>)
 8001510:	2200      	movs	r2, #0
 8001512:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001514:	4b06      	ldr	r3, [pc, #24]	; (8001530 <MX_CAN1_Init+0x68>)
 8001516:	2200      	movs	r2, #0
 8001518:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800151a:	4805      	ldr	r0, [pc, #20]	; (8001530 <MX_CAN1_Init+0x68>)
 800151c:	f000 ff20 	bl	8002360 <HAL_CAN_Init>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d001      	beq.n	800152a <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 8001526:	f000 fd3d 	bl	8001fa4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 800152a:	bf00      	nop
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	20004afc 	.word	0x20004afc
 8001534:	40006400 	.word	0x40006400

08001538 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800153c:	4b17      	ldr	r3, [pc, #92]	; (800159c <MX_SPI1_Init+0x64>)
 800153e:	4a18      	ldr	r2, [pc, #96]	; (80015a0 <MX_SPI1_Init+0x68>)
 8001540:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001542:	4b16      	ldr	r3, [pc, #88]	; (800159c <MX_SPI1_Init+0x64>)
 8001544:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001548:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800154a:	4b14      	ldr	r3, [pc, #80]	; (800159c <MX_SPI1_Init+0x64>)
 800154c:	2200      	movs	r2, #0
 800154e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001550:	4b12      	ldr	r3, [pc, #72]	; (800159c <MX_SPI1_Init+0x64>)
 8001552:	2200      	movs	r2, #0
 8001554:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001556:	4b11      	ldr	r3, [pc, #68]	; (800159c <MX_SPI1_Init+0x64>)
 8001558:	2200      	movs	r2, #0
 800155a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800155c:	4b0f      	ldr	r3, [pc, #60]	; (800159c <MX_SPI1_Init+0x64>)
 800155e:	2200      	movs	r2, #0
 8001560:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001562:	4b0e      	ldr	r3, [pc, #56]	; (800159c <MX_SPI1_Init+0x64>)
 8001564:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001568:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800156a:	4b0c      	ldr	r3, [pc, #48]	; (800159c <MX_SPI1_Init+0x64>)
 800156c:	2218      	movs	r2, #24
 800156e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001570:	4b0a      	ldr	r3, [pc, #40]	; (800159c <MX_SPI1_Init+0x64>)
 8001572:	2200      	movs	r2, #0
 8001574:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001576:	4b09      	ldr	r3, [pc, #36]	; (800159c <MX_SPI1_Init+0x64>)
 8001578:	2200      	movs	r2, #0
 800157a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800157c:	4b07      	ldr	r3, [pc, #28]	; (800159c <MX_SPI1_Init+0x64>)
 800157e:	2200      	movs	r2, #0
 8001580:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001582:	4b06      	ldr	r3, [pc, #24]	; (800159c <MX_SPI1_Init+0x64>)
 8001584:	220a      	movs	r2, #10
 8001586:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001588:	4804      	ldr	r0, [pc, #16]	; (800159c <MX_SPI1_Init+0x64>)
 800158a:	f002 fbcd 	bl	8003d28 <HAL_SPI_Init>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d001      	beq.n	8001598 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001594:	f000 fd06 	bl	8001fa4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001598:	bf00      	nop
 800159a:	bd80      	pop	{r7, pc}
 800159c:	20004a9c 	.word	0x20004a9c
 80015a0:	40013000 	.word	0x40013000

080015a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b08a      	sub	sp, #40	; 0x28
 80015a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015aa:	f107 0314 	add.w	r3, r7, #20
 80015ae:	2200      	movs	r2, #0
 80015b0:	601a      	str	r2, [r3, #0]
 80015b2:	605a      	str	r2, [r3, #4]
 80015b4:	609a      	str	r2, [r3, #8]
 80015b6:	60da      	str	r2, [r3, #12]
 80015b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80015ba:	2300      	movs	r3, #0
 80015bc:	613b      	str	r3, [r7, #16]
 80015be:	4b48      	ldr	r3, [pc, #288]	; (80016e0 <MX_GPIO_Init+0x13c>)
 80015c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c2:	4a47      	ldr	r2, [pc, #284]	; (80016e0 <MX_GPIO_Init+0x13c>)
 80015c4:	f043 0310 	orr.w	r3, r3, #16
 80015c8:	6313      	str	r3, [r2, #48]	; 0x30
 80015ca:	4b45      	ldr	r3, [pc, #276]	; (80016e0 <MX_GPIO_Init+0x13c>)
 80015cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ce:	f003 0310 	and.w	r3, r3, #16
 80015d2:	613b      	str	r3, [r7, #16]
 80015d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015d6:	2300      	movs	r3, #0
 80015d8:	60fb      	str	r3, [r7, #12]
 80015da:	4b41      	ldr	r3, [pc, #260]	; (80016e0 <MX_GPIO_Init+0x13c>)
 80015dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015de:	4a40      	ldr	r2, [pc, #256]	; (80016e0 <MX_GPIO_Init+0x13c>)
 80015e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015e4:	6313      	str	r3, [r2, #48]	; 0x30
 80015e6:	4b3e      	ldr	r3, [pc, #248]	; (80016e0 <MX_GPIO_Init+0x13c>)
 80015e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015ee:	60fb      	str	r3, [r7, #12]
 80015f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015f2:	2300      	movs	r3, #0
 80015f4:	60bb      	str	r3, [r7, #8]
 80015f6:	4b3a      	ldr	r3, [pc, #232]	; (80016e0 <MX_GPIO_Init+0x13c>)
 80015f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fa:	4a39      	ldr	r2, [pc, #228]	; (80016e0 <MX_GPIO_Init+0x13c>)
 80015fc:	f043 0301 	orr.w	r3, r3, #1
 8001600:	6313      	str	r3, [r2, #48]	; 0x30
 8001602:	4b37      	ldr	r3, [pc, #220]	; (80016e0 <MX_GPIO_Init+0x13c>)
 8001604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001606:	f003 0301 	and.w	r3, r3, #1
 800160a:	60bb      	str	r3, [r7, #8]
 800160c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800160e:	2300      	movs	r3, #0
 8001610:	607b      	str	r3, [r7, #4]
 8001612:	4b33      	ldr	r3, [pc, #204]	; (80016e0 <MX_GPIO_Init+0x13c>)
 8001614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001616:	4a32      	ldr	r2, [pc, #200]	; (80016e0 <MX_GPIO_Init+0x13c>)
 8001618:	f043 0308 	orr.w	r3, r3, #8
 800161c:	6313      	str	r3, [r2, #48]	; 0x30
 800161e:	4b30      	ldr	r3, [pc, #192]	; (80016e0 <MX_GPIO_Init+0x13c>)
 8001620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001622:	f003 0308 	and.w	r3, r3, #8
 8001626:	607b      	str	r3, [r7, #4]
 8001628:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800162a:	2300      	movs	r3, #0
 800162c:	603b      	str	r3, [r7, #0]
 800162e:	4b2c      	ldr	r3, [pc, #176]	; (80016e0 <MX_GPIO_Init+0x13c>)
 8001630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001632:	4a2b      	ldr	r2, [pc, #172]	; (80016e0 <MX_GPIO_Init+0x13c>)
 8001634:	f043 0302 	orr.w	r3, r3, #2
 8001638:	6313      	str	r3, [r2, #48]	; 0x30
 800163a:	4b29      	ldr	r3, [pc, #164]	; (80016e0 <MX_GPIO_Init+0x13c>)
 800163c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163e:	f003 0302 	and.w	r3, r3, #2
 8001642:	603b      	str	r3, [r7, #0]
 8001644:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8001646:	2200      	movs	r2, #0
 8001648:	2108      	movs	r1, #8
 800164a:	4826      	ldr	r0, [pc, #152]	; (80016e4 <MX_GPIO_Init+0x140>)
 800164c:	f001 fe94 	bl	8003378 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001650:	2200      	movs	r2, #0
 8001652:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8001656:	4824      	ldr	r0, [pc, #144]	; (80016e8 <MX_GPIO_Init+0x144>)
 8001658:	f001 fe8e 	bl	8003378 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800165c:	2308      	movs	r3, #8
 800165e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001660:	2301      	movs	r3, #1
 8001662:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001664:	2300      	movs	r3, #0
 8001666:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001668:	2300      	movs	r3, #0
 800166a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800166c:	f107 0314 	add.w	r3, r7, #20
 8001670:	4619      	mov	r1, r3
 8001672:	481c      	ldr	r0, [pc, #112]	; (80016e4 <MX_GPIO_Init+0x140>)
 8001674:	f001 fcce 	bl	8003014 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001678:	2301      	movs	r3, #1
 800167a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800167c:	2300      	movs	r3, #0
 800167e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001680:	2300      	movs	r3, #0
 8001682:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001684:	f107 0314 	add.w	r3, r7, #20
 8001688:	4619      	mov	r1, r3
 800168a:	4818      	ldr	r0, [pc, #96]	; (80016ec <MX_GPIO_Init+0x148>)
 800168c:	f001 fcc2 	bl	8003014 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001690:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001694:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001696:	2301      	movs	r3, #1
 8001698:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169a:	2300      	movs	r3, #0
 800169c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800169e:	2300      	movs	r3, #0
 80016a0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016a2:	f107 0314 	add.w	r3, r7, #20
 80016a6:	4619      	mov	r1, r3
 80016a8:	480f      	ldr	r0, [pc, #60]	; (80016e8 <MX_GPIO_Init+0x144>)
 80016aa:	f001 fcb3 	bl	8003014 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80016ae:	2301      	movs	r3, #1
 80016b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80016b2:	4b0f      	ldr	r3, [pc, #60]	; (80016f0 <MX_GPIO_Init+0x14c>)
 80016b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b6:	2300      	movs	r3, #0
 80016b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016ba:	f107 0314 	add.w	r3, r7, #20
 80016be:	4619      	mov	r1, r3
 80016c0:	4808      	ldr	r0, [pc, #32]	; (80016e4 <MX_GPIO_Init+0x140>)
 80016c2:	f001 fca7 	bl	8003014 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 80016c6:	2200      	movs	r2, #0
 80016c8:	2105      	movs	r1, #5
 80016ca:	2006      	movs	r0, #6
 80016cc:	f001 fc78 	bl	8002fc0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80016d0:	2006      	movs	r0, #6
 80016d2:	f001 fc91 	bl	8002ff8 <HAL_NVIC_EnableIRQ>

}
 80016d6:	bf00      	nop
 80016d8:	3728      	adds	r7, #40	; 0x28
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	40023800 	.word	0x40023800
 80016e4:	40021000 	.word	0x40021000
 80016e8:	40020c00 	.word	0x40020c00
 80016ec:	40020000 	.word	0x40020000
 80016f0:	10110000 	.word	0x10110000

080016f4 <Acc_config>:

/* USER CODE BEGIN 4 */

/*Accelerometer configurations and Initialisation*/
static void Acc_config(void){
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0
	myAccConfigDef.dataRate = LIS3DSH_DATARATE_12_5;
 80016f8:	4b13      	ldr	r3, [pc, #76]	; (8001748 <Acc_config+0x54>)
 80016fa:	2230      	movs	r2, #48	; 0x30
 80016fc:	701a      	strb	r2, [r3, #0]
	myAccConfigDef.antiAliasingBW = LIS3DSH_FILTER_BW_50;
 80016fe:	4b12      	ldr	r3, [pc, #72]	; (8001748 <Acc_config+0x54>)
 8001700:	22c0      	movs	r2, #192	; 0xc0
 8001702:	709a      	strb	r2, [r3, #2]
	myAccConfigDef.fullScale = LIS3DSH_FULLSCALE_4;
 8001704:	4b10      	ldr	r3, [pc, #64]	; (8001748 <Acc_config+0x54>)
 8001706:	2208      	movs	r2, #8
 8001708:	705a      	strb	r2, [r3, #1]
	myAccConfigDef.enableAxes = LIS3DSH_XYZ_ENABLE;
 800170a:	4b0f      	ldr	r3, [pc, #60]	; (8001748 <Acc_config+0x54>)
 800170c:	2207      	movs	r2, #7
 800170e:	70da      	strb	r2, [r3, #3]
	myAccConfigDef.interruptEnable = false;
 8001710:	4b0d      	ldr	r3, [pc, #52]	; (8001748 <Acc_config+0x54>)
 8001712:	2200      	movs	r2, #0
 8001714:	711a      	strb	r2, [r3, #4]
	LIS3DSH_X_calibrate(-1020, 1020);
 8001716:	eddf 0a0d 	vldr	s1, [pc, #52]	; 800174c <Acc_config+0x58>
 800171a:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8001750 <Acc_config+0x5c>
 800171e:	f7ff fd95 	bl	800124c <LIS3DSH_X_calibrate>
	LIS3DSH_Y_calibrate(-1020, 1020);
 8001722:	eddf 0a0a 	vldr	s1, [pc, #40]	; 800174c <Acc_config+0x58>
 8001726:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8001750 <Acc_config+0x5c>
 800172a:	f7ff fdbd 	bl	80012a8 <LIS3DSH_Y_calibrate>
	LIS3DSH_Z_calibrate(-1020, 1020);
 800172e:	eddf 0a07 	vldr	s1, [pc, #28]	; 800174c <Acc_config+0x58>
 8001732:	ed9f 0a07 	vldr	s0, [pc, #28]	; 8001750 <Acc_config+0x5c>
 8001736:	f7ff fde5 	bl	8001304 <LIS3DSH_Z_calibrate>
	LIS3DSH_Init(&hspi1, &myAccConfigDef);
 800173a:	4903      	ldr	r1, [pc, #12]	; (8001748 <Acc_config+0x54>)
 800173c:	4805      	ldr	r0, [pc, #20]	; (8001754 <Acc_config+0x60>)
 800173e:	f7ff fbc1 	bl	8000ec4 <LIS3DSH_Init>
}
 8001742:	bf00      	nop
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	20004a60 	.word	0x20004a60
 800174c:	447f0000 	.word	0x447f0000
 8001750:	c47f0000 	.word	0xc47f0000
 8001754:	20004a9c 	.word	0x20004a9c

08001758 <CAN1_Filter_Config>:

/*Can receivers filter configuration*/
static void CAN1_Filter_Config(void){
 8001758:	b580      	push	{r7, lr}
 800175a:	af00      	add	r7, sp, #0
	filter1.FilterActivation	= ENABLE;
 800175c:	4b11      	ldr	r3, [pc, #68]	; (80017a4 <CAN1_Filter_Config+0x4c>)
 800175e:	2201      	movs	r2, #1
 8001760:	621a      	str	r2, [r3, #32]
	filter1.FilterBank			= 14;
 8001762:	4b10      	ldr	r3, [pc, #64]	; (80017a4 <CAN1_Filter_Config+0x4c>)
 8001764:	220e      	movs	r2, #14
 8001766:	615a      	str	r2, [r3, #20]
	filter1.FilterFIFOAssignment= CAN_FILTER_FIFO0;
 8001768:	4b0e      	ldr	r3, [pc, #56]	; (80017a4 <CAN1_Filter_Config+0x4c>)
 800176a:	2200      	movs	r2, #0
 800176c:	611a      	str	r2, [r3, #16]
	filter1.FilterIdHigh		= 0x0000;
 800176e:	4b0d      	ldr	r3, [pc, #52]	; (80017a4 <CAN1_Filter_Config+0x4c>)
 8001770:	2200      	movs	r2, #0
 8001772:	601a      	str	r2, [r3, #0]
	filter1.FilterIdLow			= 0x0000;
 8001774:	4b0b      	ldr	r3, [pc, #44]	; (80017a4 <CAN1_Filter_Config+0x4c>)
 8001776:	2200      	movs	r2, #0
 8001778:	605a      	str	r2, [r3, #4]
	filter1.FilterMaskIdHigh	= 0x0000;
 800177a:	4b0a      	ldr	r3, [pc, #40]	; (80017a4 <CAN1_Filter_Config+0x4c>)
 800177c:	2200      	movs	r2, #0
 800177e:	609a      	str	r2, [r3, #8]
	filter1.FilterMaskIdLow		= 0x0000;
 8001780:	4b08      	ldr	r3, [pc, #32]	; (80017a4 <CAN1_Filter_Config+0x4c>)
 8001782:	2200      	movs	r2, #0
 8001784:	60da      	str	r2, [r3, #12]
	filter1.FilterMode			= CAN_FILTERMODE_IDMASK;
 8001786:	4b07      	ldr	r3, [pc, #28]	; (80017a4 <CAN1_Filter_Config+0x4c>)
 8001788:	2200      	movs	r2, #0
 800178a:	619a      	str	r2, [r3, #24]
	filter1.FilterScale			= CAN_FILTERSCALE_32BIT;
 800178c:	4b05      	ldr	r3, [pc, #20]	; (80017a4 <CAN1_Filter_Config+0x4c>)
 800178e:	2201      	movs	r2, #1
 8001790:	61da      	str	r2, [r3, #28]
	filter1.SlaveStartFilterBank= 0;
 8001792:	4b04      	ldr	r3, [pc, #16]	; (80017a4 <CAN1_Filter_Config+0x4c>)
 8001794:	2200      	movs	r2, #0
 8001796:	625a      	str	r2, [r3, #36]	; 0x24

	HAL_CAN_ConfigFilter(&hcan1, &filter1);
 8001798:	4902      	ldr	r1, [pc, #8]	; (80017a4 <CAN1_Filter_Config+0x4c>)
 800179a:	4803      	ldr	r0, [pc, #12]	; (80017a8 <CAN1_Filter_Config+0x50>)
 800179c:	f000 fedc 	bl	8002558 <HAL_CAN_ConfigFilter>
}
 80017a0:	bf00      	nop
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	20004a28 	.word	0x20004a28
 80017a8:	20004afc 	.word	0x20004afc

080017ac <Can_Tx>:

/*Can transmit method*/
static void Can_Tx(void){
 80017ac:	b580      	push	{r7, lr}
 80017ae:	af00      	add	r7, sp, #0

	TxHeader.DLC		= 8;
 80017b0:	4b11      	ldr	r3, [pc, #68]	; (80017f8 <Can_Tx+0x4c>)
 80017b2:	2208      	movs	r2, #8
 80017b4:	611a      	str	r2, [r3, #16]
	TxHeader.StdId		= 0X600;
 80017b6:	4b10      	ldr	r3, [pc, #64]	; (80017f8 <Can_Tx+0x4c>)
 80017b8:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80017bc:	601a      	str	r2, [r3, #0]
	TxHeader.IDE		= CAN_ID_STD;
 80017be:	4b0e      	ldr	r3, [pc, #56]	; (80017f8 <Can_Tx+0x4c>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	609a      	str	r2, [r3, #8]
	TxHeader.RTR		= CAN_RTR_DATA;
 80017c4:	4b0c      	ldr	r3, [pc, #48]	; (80017f8 <Can_Tx+0x4c>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	60da      	str	r2, [r3, #12]

	HAL_CAN_AddTxMessage(&hcan1, &TxHeader, (uint8_t*)TxData, &TxMbNum);
 80017ca:	4b0c      	ldr	r3, [pc, #48]	; (80017fc <Can_Tx+0x50>)
 80017cc:	4a0c      	ldr	r2, [pc, #48]	; (8001800 <Can_Tx+0x54>)
 80017ce:	490a      	ldr	r1, [pc, #40]	; (80017f8 <Can_Tx+0x4c>)
 80017d0:	480c      	ldr	r0, [pc, #48]	; (8001804 <Can_Tx+0x58>)
 80017d2:	f000 ffe5 	bl	80027a0 <HAL_CAN_AddTxMessage>

	while(HAL_CAN_IsTxMessagePending(&hcan1, TxMbNum));
 80017d6:	bf00      	nop
 80017d8:	4b08      	ldr	r3, [pc, #32]	; (80017fc <Can_Tx+0x50>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4619      	mov	r1, r3
 80017de:	4809      	ldr	r0, [pc, #36]	; (8001804 <Can_Tx+0x58>)
 80017e0:	f001 f8b9 	bl	8002956 <HAL_CAN_IsTxMessagePending>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d1f6      	bne.n	80017d8 <Can_Tx+0x2c>

	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 80017ea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80017ee:	4806      	ldr	r0, [pc, #24]	; (8001808 <Can_Tx+0x5c>)
 80017f0:	f001 fddb 	bl	80033aa <HAL_GPIO_TogglePin>
}
 80017f4:	bf00      	nop
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	20004b24 	.word	0x20004b24
 80017fc:	20004a68 	.word	0x20004a68
 8001800:	20004a84 	.word	0x20004a84
 8001804:	20004afc 	.word	0x20004afc
 8001808:	40020c00 	.word	0x40020c00

0800180c <buttonDebounce>:

/*button debouncing code*/
static int buttonDebounce(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b082      	sub	sp, #8
 8001810:	af00      	add	r7, sp, #0
	static uint16_t buttonState = 0;
	uint8_t pinState = 0;
 8001812:	2300      	movs	r3, #0
 8001814:	71fb      	strb	r3, [r7, #7]
	pinState = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 8001816:	2101      	movs	r1, #1
 8001818:	4815      	ldr	r0, [pc, #84]	; (8001870 <buttonDebounce+0x64>)
 800181a:	f001 fd95 	bl	8003348 <HAL_GPIO_ReadPin>
 800181e:	4603      	mov	r3, r0
 8001820:	71fb      	strb	r3, [r7, #7]
	buttonState = ( ( buttonState << 1 ) | !pinState | 0xE000 );
 8001822:	4b14      	ldr	r3, [pc, #80]	; (8001874 <buttonDebounce+0x68>)
 8001824:	881b      	ldrh	r3, [r3, #0]
 8001826:	005b      	lsls	r3, r3, #1
 8001828:	b21a      	sxth	r2, r3
 800182a:	79fb      	ldrb	r3, [r7, #7]
 800182c:	2b00      	cmp	r3, #0
 800182e:	bf0c      	ite	eq
 8001830:	2301      	moveq	r3, #1
 8001832:	2300      	movne	r3, #0
 8001834:	b2db      	uxtb	r3, r3
 8001836:	b21b      	sxth	r3, r3
 8001838:	4313      	orrs	r3, r2
 800183a:	b21b      	sxth	r3, r3
 800183c:	ea6f 43c3 	mvn.w	r3, r3, lsl #19
 8001840:	ea6f 43d3 	mvn.w	r3, r3, lsr #19
 8001844:	b21b      	sxth	r3, r3
 8001846:	b29a      	uxth	r2, r3
 8001848:	4b0a      	ldr	r3, [pc, #40]	; (8001874 <buttonDebounce+0x68>)
 800184a:	801a      	strh	r2, [r3, #0]
	if(buttonState == 0xF000){
 800184c:	4b09      	ldr	r3, [pc, #36]	; (8001874 <buttonDebounce+0x68>)
 800184e:	881b      	ldrh	r3, [r3, #0]
 8001850:	f5b3 4f70 	cmp.w	r3, #61440	; 0xf000
 8001854:	d106      	bne.n	8001864 <buttonDebounce+0x58>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 8001856:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800185a:	4807      	ldr	r0, [pc, #28]	; (8001878 <buttonDebounce+0x6c>)
 800185c:	f001 fda5 	bl	80033aa <HAL_GPIO_TogglePin>
		return true;
 8001860:	2301      	movs	r3, #1
 8001862:	e000      	b.n	8001866 <buttonDebounce+0x5a>
	}
	return false;
 8001864:	2300      	movs	r3, #0
}
 8001866:	4618      	mov	r0, r3
 8001868:	3708      	adds	r7, #8
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	40020000 	.word	0x40020000
 8001874:	20000108 	.word	0x20000108
 8001878:	40020c00 	.word	0x40020c00
 800187c:	00000000 	.word	0x00000000

08001880 <Intensity_Cal>:

/*Intensity Calculator function*/
double ang_x,ang_y,ang_z;
char intensity;
char tire[6];
void Intensity_Cal(void){
 8001880:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001884:	af00      	add	r7, sp, #0
	/*angle of inclination on all the x ,y and z axis*/
	ang_x = atan(myData.x/(sqrt(myData.y * myData.y + myData.z * myData.z))) * 180.0 /PI;
 8001886:	4bbe      	ldr	r3, [pc, #760]	; (8001b80 <Intensity_Cal+0x300>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4618      	mov	r0, r3
 800188c:	f7fe fe04 	bl	8000498 <__aeabi_f2d>
 8001890:	4604      	mov	r4, r0
 8001892:	460d      	mov	r5, r1
 8001894:	4bba      	ldr	r3, [pc, #744]	; (8001b80 <Intensity_Cal+0x300>)
 8001896:	ed93 7a01 	vldr	s14, [r3, #4]
 800189a:	4bb9      	ldr	r3, [pc, #740]	; (8001b80 <Intensity_Cal+0x300>)
 800189c:	edd3 7a01 	vldr	s15, [r3, #4]
 80018a0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80018a4:	4bb6      	ldr	r3, [pc, #728]	; (8001b80 <Intensity_Cal+0x300>)
 80018a6:	edd3 6a02 	vldr	s13, [r3, #8]
 80018aa:	4bb5      	ldr	r3, [pc, #724]	; (8001b80 <Intensity_Cal+0x300>)
 80018ac:	edd3 7a02 	vldr	s15, [r3, #8]
 80018b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018b8:	ee17 0a90 	vmov	r0, s15
 80018bc:	f7fe fdec 	bl	8000498 <__aeabi_f2d>
 80018c0:	4602      	mov	r2, r0
 80018c2:	460b      	mov	r3, r1
 80018c4:	ec43 2b10 	vmov	d0, r2, r3
 80018c8:	f006 fb18 	bl	8007efc <sqrt>
 80018cc:	ec53 2b10 	vmov	r2, r3, d0
 80018d0:	4620      	mov	r0, r4
 80018d2:	4629      	mov	r1, r5
 80018d4:	f7fe ff62 	bl	800079c <__aeabi_ddiv>
 80018d8:	4603      	mov	r3, r0
 80018da:	460c      	mov	r4, r1
 80018dc:	ec44 3b17 	vmov	d7, r3, r4
 80018e0:	eeb0 0a47 	vmov.f32	s0, s14
 80018e4:	eef0 0a67 	vmov.f32	s1, s15
 80018e8:	f006 f95e 	bl	8007ba8 <atan>
 80018ec:	ec51 0b10 	vmov	r0, r1, d0
 80018f0:	f04f 0200 	mov.w	r2, #0
 80018f4:	4ba3      	ldr	r3, [pc, #652]	; (8001b84 <Intensity_Cal+0x304>)
 80018f6:	f7fe fe27 	bl	8000548 <__aeabi_dmul>
 80018fa:	4603      	mov	r3, r0
 80018fc:	460c      	mov	r4, r1
 80018fe:	4618      	mov	r0, r3
 8001900:	4621      	mov	r1, r4
 8001902:	a39d      	add	r3, pc, #628	; (adr r3, 8001b78 <Intensity_Cal+0x2f8>)
 8001904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001908:	f7fe ff48 	bl	800079c <__aeabi_ddiv>
 800190c:	4603      	mov	r3, r0
 800190e:	460c      	mov	r4, r1
 8001910:	4a9d      	ldr	r2, [pc, #628]	; (8001b88 <Intensity_Cal+0x308>)
 8001912:	e9c2 3400 	strd	r3, r4, [r2]
	ang_y = atan(myData.y/(sqrt(myData.x * myData.x + myData.z * myData.z))) * 180.0 /PI;
 8001916:	4b9a      	ldr	r3, [pc, #616]	; (8001b80 <Intensity_Cal+0x300>)
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	4618      	mov	r0, r3
 800191c:	f7fe fdbc 	bl	8000498 <__aeabi_f2d>
 8001920:	4604      	mov	r4, r0
 8001922:	460d      	mov	r5, r1
 8001924:	4b96      	ldr	r3, [pc, #600]	; (8001b80 <Intensity_Cal+0x300>)
 8001926:	ed93 7a00 	vldr	s14, [r3]
 800192a:	4b95      	ldr	r3, [pc, #596]	; (8001b80 <Intensity_Cal+0x300>)
 800192c:	edd3 7a00 	vldr	s15, [r3]
 8001930:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001934:	4b92      	ldr	r3, [pc, #584]	; (8001b80 <Intensity_Cal+0x300>)
 8001936:	edd3 6a02 	vldr	s13, [r3, #8]
 800193a:	4b91      	ldr	r3, [pc, #580]	; (8001b80 <Intensity_Cal+0x300>)
 800193c:	edd3 7a02 	vldr	s15, [r3, #8]
 8001940:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001944:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001948:	ee17 0a90 	vmov	r0, s15
 800194c:	f7fe fda4 	bl	8000498 <__aeabi_f2d>
 8001950:	4602      	mov	r2, r0
 8001952:	460b      	mov	r3, r1
 8001954:	ec43 2b10 	vmov	d0, r2, r3
 8001958:	f006 fad0 	bl	8007efc <sqrt>
 800195c:	ec53 2b10 	vmov	r2, r3, d0
 8001960:	4620      	mov	r0, r4
 8001962:	4629      	mov	r1, r5
 8001964:	f7fe ff1a 	bl	800079c <__aeabi_ddiv>
 8001968:	4603      	mov	r3, r0
 800196a:	460c      	mov	r4, r1
 800196c:	ec44 3b17 	vmov	d7, r3, r4
 8001970:	eeb0 0a47 	vmov.f32	s0, s14
 8001974:	eef0 0a67 	vmov.f32	s1, s15
 8001978:	f006 f916 	bl	8007ba8 <atan>
 800197c:	ec51 0b10 	vmov	r0, r1, d0
 8001980:	f04f 0200 	mov.w	r2, #0
 8001984:	4b7f      	ldr	r3, [pc, #508]	; (8001b84 <Intensity_Cal+0x304>)
 8001986:	f7fe fddf 	bl	8000548 <__aeabi_dmul>
 800198a:	4603      	mov	r3, r0
 800198c:	460c      	mov	r4, r1
 800198e:	4618      	mov	r0, r3
 8001990:	4621      	mov	r1, r4
 8001992:	a379      	add	r3, pc, #484	; (adr r3, 8001b78 <Intensity_Cal+0x2f8>)
 8001994:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001998:	f7fe ff00 	bl	800079c <__aeabi_ddiv>
 800199c:	4603      	mov	r3, r0
 800199e:	460c      	mov	r4, r1
 80019a0:	4a7a      	ldr	r2, [pc, #488]	; (8001b8c <Intensity_Cal+0x30c>)
 80019a2:	e9c2 3400 	strd	r3, r4, [r2]
	ang_z = atan(myData.z/(sqrt(myData.x * myData.x + myData.y * myData.y))) * 180.0 /PI;
 80019a6:	4b76      	ldr	r3, [pc, #472]	; (8001b80 <Intensity_Cal+0x300>)
 80019a8:	689b      	ldr	r3, [r3, #8]
 80019aa:	4618      	mov	r0, r3
 80019ac:	f7fe fd74 	bl	8000498 <__aeabi_f2d>
 80019b0:	4604      	mov	r4, r0
 80019b2:	460d      	mov	r5, r1
 80019b4:	4b72      	ldr	r3, [pc, #456]	; (8001b80 <Intensity_Cal+0x300>)
 80019b6:	ed93 7a00 	vldr	s14, [r3]
 80019ba:	4b71      	ldr	r3, [pc, #452]	; (8001b80 <Intensity_Cal+0x300>)
 80019bc:	edd3 7a00 	vldr	s15, [r3]
 80019c0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019c4:	4b6e      	ldr	r3, [pc, #440]	; (8001b80 <Intensity_Cal+0x300>)
 80019c6:	edd3 6a01 	vldr	s13, [r3, #4]
 80019ca:	4b6d      	ldr	r3, [pc, #436]	; (8001b80 <Intensity_Cal+0x300>)
 80019cc:	edd3 7a01 	vldr	s15, [r3, #4]
 80019d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019d8:	ee17 0a90 	vmov	r0, s15
 80019dc:	f7fe fd5c 	bl	8000498 <__aeabi_f2d>
 80019e0:	4602      	mov	r2, r0
 80019e2:	460b      	mov	r3, r1
 80019e4:	ec43 2b10 	vmov	d0, r2, r3
 80019e8:	f006 fa88 	bl	8007efc <sqrt>
 80019ec:	ec53 2b10 	vmov	r2, r3, d0
 80019f0:	4620      	mov	r0, r4
 80019f2:	4629      	mov	r1, r5
 80019f4:	f7fe fed2 	bl	800079c <__aeabi_ddiv>
 80019f8:	4603      	mov	r3, r0
 80019fa:	460c      	mov	r4, r1
 80019fc:	ec44 3b17 	vmov	d7, r3, r4
 8001a00:	eeb0 0a47 	vmov.f32	s0, s14
 8001a04:	eef0 0a67 	vmov.f32	s1, s15
 8001a08:	f006 f8ce 	bl	8007ba8 <atan>
 8001a0c:	ec51 0b10 	vmov	r0, r1, d0
 8001a10:	f04f 0200 	mov.w	r2, #0
 8001a14:	4b5b      	ldr	r3, [pc, #364]	; (8001b84 <Intensity_Cal+0x304>)
 8001a16:	f7fe fd97 	bl	8000548 <__aeabi_dmul>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	460c      	mov	r4, r1
 8001a1e:	4618      	mov	r0, r3
 8001a20:	4621      	mov	r1, r4
 8001a22:	a355      	add	r3, pc, #340	; (adr r3, 8001b78 <Intensity_Cal+0x2f8>)
 8001a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a28:	f7fe feb8 	bl	800079c <__aeabi_ddiv>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	460c      	mov	r4, r1
 8001a30:	4a57      	ldr	r2, [pc, #348]	; (8001b90 <Intensity_Cal+0x310>)
 8001a32:	e9c2 3400 	strd	r3, r4, [r2]

	/*formula for calculating the intensity of the brake */
	intensity = sqrt((ang_x + ang_y)*(ang_x + ang_y) + (ang_x - ang_y)*(ang_x - ang_y));
 8001a36:	4b54      	ldr	r3, [pc, #336]	; (8001b88 <Intensity_Cal+0x308>)
 8001a38:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a3c:	4b53      	ldr	r3, [pc, #332]	; (8001b8c <Intensity_Cal+0x30c>)
 8001a3e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001a42:	461a      	mov	r2, r3
 8001a44:	4623      	mov	r3, r4
 8001a46:	f7fe fbc9 	bl	80001dc <__adddf3>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	460c      	mov	r4, r1
 8001a4e:	461d      	mov	r5, r3
 8001a50:	4626      	mov	r6, r4
 8001a52:	4b4d      	ldr	r3, [pc, #308]	; (8001b88 <Intensity_Cal+0x308>)
 8001a54:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a58:	4b4c      	ldr	r3, [pc, #304]	; (8001b8c <Intensity_Cal+0x30c>)
 8001a5a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001a5e:	461a      	mov	r2, r3
 8001a60:	4623      	mov	r3, r4
 8001a62:	f7fe fbbb 	bl	80001dc <__adddf3>
 8001a66:	4603      	mov	r3, r0
 8001a68:	460c      	mov	r4, r1
 8001a6a:	461a      	mov	r2, r3
 8001a6c:	4623      	mov	r3, r4
 8001a6e:	4628      	mov	r0, r5
 8001a70:	4631      	mov	r1, r6
 8001a72:	f7fe fd69 	bl	8000548 <__aeabi_dmul>
 8001a76:	4603      	mov	r3, r0
 8001a78:	460c      	mov	r4, r1
 8001a7a:	461d      	mov	r5, r3
 8001a7c:	4626      	mov	r6, r4
 8001a7e:	4b42      	ldr	r3, [pc, #264]	; (8001b88 <Intensity_Cal+0x308>)
 8001a80:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a84:	4b41      	ldr	r3, [pc, #260]	; (8001b8c <Intensity_Cal+0x30c>)
 8001a86:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001a8a:	461a      	mov	r2, r3
 8001a8c:	4623      	mov	r3, r4
 8001a8e:	f7fe fba3 	bl	80001d8 <__aeabi_dsub>
 8001a92:	4603      	mov	r3, r0
 8001a94:	460c      	mov	r4, r1
 8001a96:	4698      	mov	r8, r3
 8001a98:	46a1      	mov	r9, r4
 8001a9a:	4b3b      	ldr	r3, [pc, #236]	; (8001b88 <Intensity_Cal+0x308>)
 8001a9c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001aa0:	4b3a      	ldr	r3, [pc, #232]	; (8001b8c <Intensity_Cal+0x30c>)
 8001aa2:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001aa6:	461a      	mov	r2, r3
 8001aa8:	4623      	mov	r3, r4
 8001aaa:	f7fe fb95 	bl	80001d8 <__aeabi_dsub>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	460c      	mov	r4, r1
 8001ab2:	461a      	mov	r2, r3
 8001ab4:	4623      	mov	r3, r4
 8001ab6:	4640      	mov	r0, r8
 8001ab8:	4649      	mov	r1, r9
 8001aba:	f7fe fd45 	bl	8000548 <__aeabi_dmul>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	460c      	mov	r4, r1
 8001ac2:	461a      	mov	r2, r3
 8001ac4:	4623      	mov	r3, r4
 8001ac6:	4628      	mov	r0, r5
 8001ac8:	4631      	mov	r1, r6
 8001aca:	f7fe fb87 	bl	80001dc <__adddf3>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	460c      	mov	r4, r1
 8001ad2:	ec44 3b17 	vmov	d7, r3, r4
 8001ad6:	eeb0 0a47 	vmov.f32	s0, s14
 8001ada:	eef0 0a67 	vmov.f32	s1, s15
 8001ade:	f006 fa0d 	bl	8007efc <sqrt>
 8001ae2:	ec54 3b10 	vmov	r3, r4, d0
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	4621      	mov	r1, r4
 8001aea:	f7fe ffdd 	bl	8000aa8 <__aeabi_d2uiz>
 8001aee:	4603      	mov	r3, r0
 8001af0:	b2da      	uxtb	r2, r3
 8001af2:	4b28      	ldr	r3, [pc, #160]	; (8001b94 <Intensity_Cal+0x314>)
 8001af4:	701a      	strb	r2, [r3, #0]

	/*determining the correct tires to apply proper brake*/
	if(ang_x > -1 && ang_x < 1 && ang_y<1 && ang_y>-27&&ang_z <80){
 8001af6:	4b24      	ldr	r3, [pc, #144]	; (8001b88 <Intensity_Cal+0x308>)
 8001af8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001afc:	f04f 0200 	mov.w	r2, #0
 8001b00:	4b25      	ldr	r3, [pc, #148]	; (8001b98 <Intensity_Cal+0x318>)
 8001b02:	f7fe ffb1 	bl	8000a68 <__aeabi_dcmpgt>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d051      	beq.n	8001bb0 <Intensity_Cal+0x330>
 8001b0c:	4b1e      	ldr	r3, [pc, #120]	; (8001b88 <Intensity_Cal+0x308>)
 8001b0e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001b12:	f04f 0200 	mov.w	r2, #0
 8001b16:	4b21      	ldr	r3, [pc, #132]	; (8001b9c <Intensity_Cal+0x31c>)
 8001b18:	f7fe ff88 	bl	8000a2c <__aeabi_dcmplt>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d046      	beq.n	8001bb0 <Intensity_Cal+0x330>
 8001b22:	4b1a      	ldr	r3, [pc, #104]	; (8001b8c <Intensity_Cal+0x30c>)
 8001b24:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001b28:	f04f 0200 	mov.w	r2, #0
 8001b2c:	4b1b      	ldr	r3, [pc, #108]	; (8001b9c <Intensity_Cal+0x31c>)
 8001b2e:	f7fe ff7d 	bl	8000a2c <__aeabi_dcmplt>
 8001b32:	4603      	mov	r3, r0
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d03b      	beq.n	8001bb0 <Intensity_Cal+0x330>
 8001b38:	4b14      	ldr	r3, [pc, #80]	; (8001b8c <Intensity_Cal+0x30c>)
 8001b3a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001b3e:	f04f 0200 	mov.w	r2, #0
 8001b42:	4b17      	ldr	r3, [pc, #92]	; (8001ba0 <Intensity_Cal+0x320>)
 8001b44:	f7fe ff90 	bl	8000a68 <__aeabi_dcmpgt>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d030      	beq.n	8001bb0 <Intensity_Cal+0x330>
 8001b4e:	4b10      	ldr	r3, [pc, #64]	; (8001b90 <Intensity_Cal+0x310>)
 8001b50:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001b54:	f04f 0200 	mov.w	r2, #0
 8001b58:	4b12      	ldr	r3, [pc, #72]	; (8001ba4 <Intensity_Cal+0x324>)
 8001b5a:	f7fe ff67 	bl	8000a2c <__aeabi_dcmplt>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d025      	beq.n	8001bb0 <Intensity_Cal+0x330>
		strcpy(tire,"FRONT");
 8001b64:	4b10      	ldr	r3, [pc, #64]	; (8001ba8 <Intensity_Cal+0x328>)
 8001b66:	4a11      	ldr	r2, [pc, #68]	; (8001bac <Intensity_Cal+0x32c>)
 8001b68:	6810      	ldr	r0, [r2, #0]
 8001b6a:	6018      	str	r0, [r3, #0]
 8001b6c:	8892      	ldrh	r2, [r2, #4]
 8001b6e:	809a      	strh	r2, [r3, #4]
 8001b70:	e19f      	b.n	8001eb2 <Intensity_Cal+0x632>
 8001b72:	bf00      	nop
 8001b74:	f3af 8000 	nop.w
 8001b78:	56041893 	.word	0x56041893
 8001b7c:	40092d0e 	.word	0x40092d0e
 8001b80:	20004a6c 	.word	0x20004a6c
 8001b84:	40668000 	.word	0x40668000
 8001b88:	20004a78 	.word	0x20004a78
 8001b8c:	20004a20 	.word	0x20004a20
 8001b90:	20004a58 	.word	0x20004a58
 8001b94:	20004b3c 	.word	0x20004b3c
 8001b98:	bff00000 	.word	0xbff00000
 8001b9c:	3ff00000 	.word	0x3ff00000
 8001ba0:	c03b0000 	.word	0xc03b0000
 8001ba4:	40540000 	.word	0x40540000
 8001ba8:	20004a94 	.word	0x20004a94
 8001bac:	08008140 	.word	0x08008140
	}else if(ang_x > -1 && ang_x < 1 && ang_y<27 && ang_y>-1 && ang_z <80){
 8001bb0:	4b93      	ldr	r3, [pc, #588]	; (8001e00 <Intensity_Cal+0x580>)
 8001bb2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001bb6:	f04f 0200 	mov.w	r2, #0
 8001bba:	4b92      	ldr	r3, [pc, #584]	; (8001e04 <Intensity_Cal+0x584>)
 8001bbc:	f7fe ff54 	bl	8000a68 <__aeabi_dcmpgt>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d032      	beq.n	8001c2c <Intensity_Cal+0x3ac>
 8001bc6:	4b8e      	ldr	r3, [pc, #568]	; (8001e00 <Intensity_Cal+0x580>)
 8001bc8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001bcc:	f04f 0200 	mov.w	r2, #0
 8001bd0:	4b8d      	ldr	r3, [pc, #564]	; (8001e08 <Intensity_Cal+0x588>)
 8001bd2:	f7fe ff2b 	bl	8000a2c <__aeabi_dcmplt>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d027      	beq.n	8001c2c <Intensity_Cal+0x3ac>
 8001bdc:	4b8b      	ldr	r3, [pc, #556]	; (8001e0c <Intensity_Cal+0x58c>)
 8001bde:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001be2:	f04f 0200 	mov.w	r2, #0
 8001be6:	4b8a      	ldr	r3, [pc, #552]	; (8001e10 <Intensity_Cal+0x590>)
 8001be8:	f7fe ff20 	bl	8000a2c <__aeabi_dcmplt>
 8001bec:	4603      	mov	r3, r0
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d01c      	beq.n	8001c2c <Intensity_Cal+0x3ac>
 8001bf2:	4b86      	ldr	r3, [pc, #536]	; (8001e0c <Intensity_Cal+0x58c>)
 8001bf4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001bf8:	f04f 0200 	mov.w	r2, #0
 8001bfc:	4b81      	ldr	r3, [pc, #516]	; (8001e04 <Intensity_Cal+0x584>)
 8001bfe:	f7fe ff33 	bl	8000a68 <__aeabi_dcmpgt>
 8001c02:	4603      	mov	r3, r0
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d011      	beq.n	8001c2c <Intensity_Cal+0x3ac>
 8001c08:	4b82      	ldr	r3, [pc, #520]	; (8001e14 <Intensity_Cal+0x594>)
 8001c0a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c0e:	f04f 0200 	mov.w	r2, #0
 8001c12:	4b81      	ldr	r3, [pc, #516]	; (8001e18 <Intensity_Cal+0x598>)
 8001c14:	f7fe ff0a 	bl	8000a2c <__aeabi_dcmplt>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d006      	beq.n	8001c2c <Intensity_Cal+0x3ac>
		strcpy(tire,"BACK_");
 8001c1e:	4b7f      	ldr	r3, [pc, #508]	; (8001e1c <Intensity_Cal+0x59c>)
 8001c20:	4a7f      	ldr	r2, [pc, #508]	; (8001e20 <Intensity_Cal+0x5a0>)
 8001c22:	6810      	ldr	r0, [r2, #0]
 8001c24:	6018      	str	r0, [r3, #0]
 8001c26:	8892      	ldrh	r2, [r2, #4]
 8001c28:	809a      	strh	r2, [r3, #4]
 8001c2a:	e142      	b.n	8001eb2 <Intensity_Cal+0x632>
	}else if(ang_y > -1 && ang_y < 1 && ang_x<1 && ang_x>-27 && ang_z <80){
 8001c2c:	4b77      	ldr	r3, [pc, #476]	; (8001e0c <Intensity_Cal+0x58c>)
 8001c2e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c32:	f04f 0200 	mov.w	r2, #0
 8001c36:	4b73      	ldr	r3, [pc, #460]	; (8001e04 <Intensity_Cal+0x584>)
 8001c38:	f7fe ff16 	bl	8000a68 <__aeabi_dcmpgt>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d032      	beq.n	8001ca8 <Intensity_Cal+0x428>
 8001c42:	4b72      	ldr	r3, [pc, #456]	; (8001e0c <Intensity_Cal+0x58c>)
 8001c44:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c48:	f04f 0200 	mov.w	r2, #0
 8001c4c:	4b6e      	ldr	r3, [pc, #440]	; (8001e08 <Intensity_Cal+0x588>)
 8001c4e:	f7fe feed 	bl	8000a2c <__aeabi_dcmplt>
 8001c52:	4603      	mov	r3, r0
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d027      	beq.n	8001ca8 <Intensity_Cal+0x428>
 8001c58:	4b69      	ldr	r3, [pc, #420]	; (8001e00 <Intensity_Cal+0x580>)
 8001c5a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c5e:	f04f 0200 	mov.w	r2, #0
 8001c62:	4b69      	ldr	r3, [pc, #420]	; (8001e08 <Intensity_Cal+0x588>)
 8001c64:	f7fe fee2 	bl	8000a2c <__aeabi_dcmplt>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d01c      	beq.n	8001ca8 <Intensity_Cal+0x428>
 8001c6e:	4b64      	ldr	r3, [pc, #400]	; (8001e00 <Intensity_Cal+0x580>)
 8001c70:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c74:	f04f 0200 	mov.w	r2, #0
 8001c78:	4b6a      	ldr	r3, [pc, #424]	; (8001e24 <Intensity_Cal+0x5a4>)
 8001c7a:	f7fe fef5 	bl	8000a68 <__aeabi_dcmpgt>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d011      	beq.n	8001ca8 <Intensity_Cal+0x428>
 8001c84:	4b63      	ldr	r3, [pc, #396]	; (8001e14 <Intensity_Cal+0x594>)
 8001c86:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c8a:	f04f 0200 	mov.w	r2, #0
 8001c8e:	4b62      	ldr	r3, [pc, #392]	; (8001e18 <Intensity_Cal+0x598>)
 8001c90:	f7fe fecc 	bl	8000a2c <__aeabi_dcmplt>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d006      	beq.n	8001ca8 <Intensity_Cal+0x428>
		strcpy(tire,"RIGHT");
 8001c9a:	4b60      	ldr	r3, [pc, #384]	; (8001e1c <Intensity_Cal+0x59c>)
 8001c9c:	4a62      	ldr	r2, [pc, #392]	; (8001e28 <Intensity_Cal+0x5a8>)
 8001c9e:	6810      	ldr	r0, [r2, #0]
 8001ca0:	6018      	str	r0, [r3, #0]
 8001ca2:	8892      	ldrh	r2, [r2, #4]
 8001ca4:	809a      	strh	r2, [r3, #4]
 8001ca6:	e104      	b.n	8001eb2 <Intensity_Cal+0x632>
	}else if(ang_y > -1 && ang_y < 1 && ang_x<27 && ang_x>-1 && ang_z <80){
 8001ca8:	4b58      	ldr	r3, [pc, #352]	; (8001e0c <Intensity_Cal+0x58c>)
 8001caa:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001cae:	f04f 0200 	mov.w	r2, #0
 8001cb2:	4b54      	ldr	r3, [pc, #336]	; (8001e04 <Intensity_Cal+0x584>)
 8001cb4:	f7fe fed8 	bl	8000a68 <__aeabi_dcmpgt>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d032      	beq.n	8001d24 <Intensity_Cal+0x4a4>
 8001cbe:	4b53      	ldr	r3, [pc, #332]	; (8001e0c <Intensity_Cal+0x58c>)
 8001cc0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001cc4:	f04f 0200 	mov.w	r2, #0
 8001cc8:	4b4f      	ldr	r3, [pc, #316]	; (8001e08 <Intensity_Cal+0x588>)
 8001cca:	f7fe feaf 	bl	8000a2c <__aeabi_dcmplt>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d027      	beq.n	8001d24 <Intensity_Cal+0x4a4>
 8001cd4:	4b4a      	ldr	r3, [pc, #296]	; (8001e00 <Intensity_Cal+0x580>)
 8001cd6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001cda:	f04f 0200 	mov.w	r2, #0
 8001cde:	4b4c      	ldr	r3, [pc, #304]	; (8001e10 <Intensity_Cal+0x590>)
 8001ce0:	f7fe fea4 	bl	8000a2c <__aeabi_dcmplt>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d01c      	beq.n	8001d24 <Intensity_Cal+0x4a4>
 8001cea:	4b45      	ldr	r3, [pc, #276]	; (8001e00 <Intensity_Cal+0x580>)
 8001cec:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001cf0:	f04f 0200 	mov.w	r2, #0
 8001cf4:	4b43      	ldr	r3, [pc, #268]	; (8001e04 <Intensity_Cal+0x584>)
 8001cf6:	f7fe feb7 	bl	8000a68 <__aeabi_dcmpgt>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d011      	beq.n	8001d24 <Intensity_Cal+0x4a4>
 8001d00:	4b44      	ldr	r3, [pc, #272]	; (8001e14 <Intensity_Cal+0x594>)
 8001d02:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d06:	f04f 0200 	mov.w	r2, #0
 8001d0a:	4b43      	ldr	r3, [pc, #268]	; (8001e18 <Intensity_Cal+0x598>)
 8001d0c:	f7fe fe8e 	bl	8000a2c <__aeabi_dcmplt>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d006      	beq.n	8001d24 <Intensity_Cal+0x4a4>
		strcpy(tire,"LEFT_");
 8001d16:	4b41      	ldr	r3, [pc, #260]	; (8001e1c <Intensity_Cal+0x59c>)
 8001d18:	4a44      	ldr	r2, [pc, #272]	; (8001e2c <Intensity_Cal+0x5ac>)
 8001d1a:	6810      	ldr	r0, [r2, #0]
 8001d1c:	6018      	str	r0, [r3, #0]
 8001d1e:	8892      	ldrh	r2, [r2, #4]
 8001d20:	809a      	strh	r2, [r3, #4]
 8001d22:	e0c6      	b.n	8001eb2 <Intensity_Cal+0x632>
	}else if((ang_x >2 && ang_y>2) || (ang_x <-2 && ang_y<-2)){
 8001d24:	4b36      	ldr	r3, [pc, #216]	; (8001e00 <Intensity_Cal+0x580>)
 8001d26:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d2a:	f04f 0200 	mov.w	r2, #0
 8001d2e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001d32:	f7fe fe99 	bl	8000a68 <__aeabi_dcmpgt>
 8001d36:	4603      	mov	r3, r0
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d00b      	beq.n	8001d54 <Intensity_Cal+0x4d4>
 8001d3c:	4b33      	ldr	r3, [pc, #204]	; (8001e0c <Intensity_Cal+0x58c>)
 8001d3e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d42:	f04f 0200 	mov.w	r2, #0
 8001d46:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001d4a:	f7fe fe8d 	bl	8000a68 <__aeabi_dcmpgt>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d117      	bne.n	8001d84 <Intensity_Cal+0x504>
 8001d54:	4b2a      	ldr	r3, [pc, #168]	; (8001e00 <Intensity_Cal+0x580>)
 8001d56:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d5a:	f04f 0200 	mov.w	r2, #0
 8001d5e:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8001d62:	f7fe fe63 	bl	8000a2c <__aeabi_dcmplt>
 8001d66:	4603      	mov	r3, r0
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d012      	beq.n	8001d92 <Intensity_Cal+0x512>
 8001d6c:	4b27      	ldr	r3, [pc, #156]	; (8001e0c <Intensity_Cal+0x58c>)
 8001d6e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d72:	f04f 0200 	mov.w	r2, #0
 8001d76:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8001d7a:	f7fe fe57 	bl	8000a2c <__aeabi_dcmplt>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d006      	beq.n	8001d92 <Intensity_Cal+0x512>
		strcpy(tire,"DILTR");
 8001d84:	4b25      	ldr	r3, [pc, #148]	; (8001e1c <Intensity_Cal+0x59c>)
 8001d86:	4a2a      	ldr	r2, [pc, #168]	; (8001e30 <Intensity_Cal+0x5b0>)
 8001d88:	6810      	ldr	r0, [r2, #0]
 8001d8a:	6018      	str	r0, [r3, #0]
 8001d8c:	8892      	ldrh	r2, [r2, #4]
 8001d8e:	809a      	strh	r2, [r3, #4]
 8001d90:	e08f      	b.n	8001eb2 <Intensity_Cal+0x632>
	}else if((ang_x <-2 && ang_y>2) || (ang_x >2 && ang_y<-2)){
 8001d92:	4b1b      	ldr	r3, [pc, #108]	; (8001e00 <Intensity_Cal+0x580>)
 8001d94:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d98:	f04f 0200 	mov.w	r2, #0
 8001d9c:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8001da0:	f7fe fe44 	bl	8000a2c <__aeabi_dcmplt>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d00b      	beq.n	8001dc2 <Intensity_Cal+0x542>
 8001daa:	4b18      	ldr	r3, [pc, #96]	; (8001e0c <Intensity_Cal+0x58c>)
 8001dac:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001db0:	f04f 0200 	mov.w	r2, #0
 8001db4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001db8:	f7fe fe56 	bl	8000a68 <__aeabi_dcmpgt>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d117      	bne.n	8001df2 <Intensity_Cal+0x572>
 8001dc2:	4b0f      	ldr	r3, [pc, #60]	; (8001e00 <Intensity_Cal+0x580>)
 8001dc4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001dc8:	f04f 0200 	mov.w	r2, #0
 8001dcc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001dd0:	f7fe fe4a 	bl	8000a68 <__aeabi_dcmpgt>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d02e      	beq.n	8001e38 <Intensity_Cal+0x5b8>
 8001dda:	4b0c      	ldr	r3, [pc, #48]	; (8001e0c <Intensity_Cal+0x58c>)
 8001ddc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001de0:	f04f 0200 	mov.w	r2, #0
 8001de4:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8001de8:	f7fe fe20 	bl	8000a2c <__aeabi_dcmplt>
 8001dec:	4603      	mov	r3, r0
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d022      	beq.n	8001e38 <Intensity_Cal+0x5b8>
		strcpy(tire,"DIRTL");
 8001df2:	4b0a      	ldr	r3, [pc, #40]	; (8001e1c <Intensity_Cal+0x59c>)
 8001df4:	4a0f      	ldr	r2, [pc, #60]	; (8001e34 <Intensity_Cal+0x5b4>)
 8001df6:	6810      	ldr	r0, [r2, #0]
 8001df8:	6018      	str	r0, [r3, #0]
 8001dfa:	8892      	ldrh	r2, [r2, #4]
 8001dfc:	809a      	strh	r2, [r3, #4]
 8001dfe:	e058      	b.n	8001eb2 <Intensity_Cal+0x632>
 8001e00:	20004a78 	.word	0x20004a78
 8001e04:	bff00000 	.word	0xbff00000
 8001e08:	3ff00000 	.word	0x3ff00000
 8001e0c:	20004a20 	.word	0x20004a20
 8001e10:	403b0000 	.word	0x403b0000
 8001e14:	20004a58 	.word	0x20004a58
 8001e18:	40540000 	.word	0x40540000
 8001e1c:	20004a94 	.word	0x20004a94
 8001e20:	08008148 	.word	0x08008148
 8001e24:	c03b0000 	.word	0xc03b0000
 8001e28:	08008150 	.word	0x08008150
 8001e2c:	08008158 	.word	0x08008158
 8001e30:	08008160 	.word	0x08008160
 8001e34:	08008168 	.word	0x08008168
	}else if(ang_y > -1 && ang_y < 1 && ang_x<1 && ang_x>-1 && ang_z >80){
 8001e38:	4b23      	ldr	r3, [pc, #140]	; (8001ec8 <Intensity_Cal+0x648>)
 8001e3a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001e3e:	f04f 0200 	mov.w	r2, #0
 8001e42:	4b22      	ldr	r3, [pc, #136]	; (8001ecc <Intensity_Cal+0x64c>)
 8001e44:	f7fe fe10 	bl	8000a68 <__aeabi_dcmpgt>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d031      	beq.n	8001eb2 <Intensity_Cal+0x632>
 8001e4e:	4b1e      	ldr	r3, [pc, #120]	; (8001ec8 <Intensity_Cal+0x648>)
 8001e50:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001e54:	f04f 0200 	mov.w	r2, #0
 8001e58:	4b1d      	ldr	r3, [pc, #116]	; (8001ed0 <Intensity_Cal+0x650>)
 8001e5a:	f7fe fde7 	bl	8000a2c <__aeabi_dcmplt>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d026      	beq.n	8001eb2 <Intensity_Cal+0x632>
 8001e64:	4b1b      	ldr	r3, [pc, #108]	; (8001ed4 <Intensity_Cal+0x654>)
 8001e66:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001e6a:	f04f 0200 	mov.w	r2, #0
 8001e6e:	4b18      	ldr	r3, [pc, #96]	; (8001ed0 <Intensity_Cal+0x650>)
 8001e70:	f7fe fddc 	bl	8000a2c <__aeabi_dcmplt>
 8001e74:	4603      	mov	r3, r0
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d01b      	beq.n	8001eb2 <Intensity_Cal+0x632>
 8001e7a:	4b16      	ldr	r3, [pc, #88]	; (8001ed4 <Intensity_Cal+0x654>)
 8001e7c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001e80:	f04f 0200 	mov.w	r2, #0
 8001e84:	4b11      	ldr	r3, [pc, #68]	; (8001ecc <Intensity_Cal+0x64c>)
 8001e86:	f7fe fdef 	bl	8000a68 <__aeabi_dcmpgt>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d010      	beq.n	8001eb2 <Intensity_Cal+0x632>
 8001e90:	4b11      	ldr	r3, [pc, #68]	; (8001ed8 <Intensity_Cal+0x658>)
 8001e92:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001e96:	f04f 0200 	mov.w	r2, #0
 8001e9a:	4b10      	ldr	r3, [pc, #64]	; (8001edc <Intensity_Cal+0x65c>)
 8001e9c:	f7fe fde4 	bl	8000a68 <__aeabi_dcmpgt>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d005      	beq.n	8001eb2 <Intensity_Cal+0x632>
		strcpy(tire,"STABL");
 8001ea6:	4b0e      	ldr	r3, [pc, #56]	; (8001ee0 <Intensity_Cal+0x660>)
 8001ea8:	4a0e      	ldr	r2, [pc, #56]	; (8001ee4 <Intensity_Cal+0x664>)
 8001eaa:	6810      	ldr	r0, [r2, #0]
 8001eac:	6018      	str	r0, [r3, #0]
 8001eae:	8892      	ldrh	r2, [r2, #4]
 8001eb0:	809a      	strh	r2, [r3, #4]
	}
	strcpy(TxData,tire);
 8001eb2:	490b      	ldr	r1, [pc, #44]	; (8001ee0 <Intensity_Cal+0x660>)
 8001eb4:	480c      	ldr	r0, [pc, #48]	; (8001ee8 <Intensity_Cal+0x668>)
 8001eb6:	f005 fe6e 	bl	8007b96 <strcpy>
	TxData[6] = intensity;
 8001eba:	4b0c      	ldr	r3, [pc, #48]	; (8001eec <Intensity_Cal+0x66c>)
 8001ebc:	781a      	ldrb	r2, [r3, #0]
 8001ebe:	4b0a      	ldr	r3, [pc, #40]	; (8001ee8 <Intensity_Cal+0x668>)
 8001ec0:	719a      	strb	r2, [r3, #6]
}
 8001ec2:	bf00      	nop
 8001ec4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001ec8:	20004a20 	.word	0x20004a20
 8001ecc:	bff00000 	.word	0xbff00000
 8001ed0:	3ff00000 	.word	0x3ff00000
 8001ed4:	20004a78 	.word	0x20004a78
 8001ed8:	20004a58 	.word	0x20004a58
 8001edc:	40540000 	.word	0x40540000
 8001ee0:	20004a94 	.word	0x20004a94
 8001ee4:	08008170 	.word	0x08008170
 8001ee8:	20004a84 	.word	0x20004a84
 8001eec:	20004b3c 	.word	0x20004b3c

08001ef0 <StartTask01>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartTask01 */
void StartTask01(void *argument)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b082      	sub	sp, #8
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    if(buttonDebounce() == true){
 8001ef8:	f7ff fc88 	bl	800180c <buttonDebounce>
 8001efc:	4603      	mov	r3, r0
 8001efe:	2b01      	cmp	r3, #1
 8001f00:	d106      	bne.n	8001f10 <StartTask01+0x20>
    	xSemaphoreGive(xSemaphore);
 8001f02:	4b05      	ldr	r3, [pc, #20]	; (8001f18 <StartTask01+0x28>)
 8001f04:	6818      	ldr	r0, [r3, #0]
 8001f06:	2300      	movs	r3, #0
 8001f08:	2200      	movs	r2, #0
 8001f0a:	2100      	movs	r1, #0
 8001f0c:	f003 fa04 	bl	8005318 <xQueueGenericSend>
    }
    vTaskDelay(2);
 8001f10:	2002      	movs	r0, #2
 8001f12:	f004 f88b 	bl	800602c <vTaskDelay>
    if(buttonDebounce() == true){
 8001f16:	e7ef      	b.n	8001ef8 <StartTask01+0x8>
 8001f18:	20004a50 	.word	0x20004a50

08001f1c <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b082      	sub	sp, #8
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8001f24:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001f28:	4812      	ldr	r0, [pc, #72]	; (8001f74 <StartTask02+0x58>)
 8001f2a:	f001 fa3e 	bl	80033aa <HAL_GPIO_TogglePin>
	  xSemaphoreTake(xSemaphore,portMAX_DELAY);
 8001f2e:	4b12      	ldr	r3, [pc, #72]	; (8001f78 <StartTask02+0x5c>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f04f 31ff 	mov.w	r1, #4294967295
 8001f36:	4618      	mov	r0, r3
 8001f38:	f003 fc58 	bl	80057ec <xQueueSemaphoreTake>
	  while(1){
	  	if(LIS3DSH_PollDRDY(100)==true){
 8001f3c:	2064      	movs	r0, #100	; 0x64
 8001f3e:	f7ff f957 	bl	80011f0 <LIS3DSH_PollDRDY>
 8001f42:	4603      	mov	r3, r0
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d0f9      	beq.n	8001f3c <StartTask02+0x20>
	  		  myData = LIS3DSH_GetDataScaled();
 8001f48:	f7ff f8d0 	bl	80010ec <LIS3DSH_GetDataScaled>
 8001f4c:	eef0 6a40 	vmov.f32	s13, s0
 8001f50:	eeb0 7a60 	vmov.f32	s14, s1
 8001f54:	eef0 7a41 	vmov.f32	s15, s2
 8001f58:	4b08      	ldr	r3, [pc, #32]	; (8001f7c <StartTask02+0x60>)
 8001f5a:	edc3 6a00 	vstr	s13, [r3]
 8001f5e:	ed83 7a01 	vstr	s14, [r3, #4]
 8001f62:	edc3 7a02 	vstr	s15, [r3, #8]
	  		  break;
 8001f66:	bf00      	nop
	  	}
	  }
	  Intensity_Cal();
 8001f68:	f7ff fc8a 	bl	8001880 <Intensity_Cal>
	  Can_Tx();
 8001f6c:	f7ff fc1e 	bl	80017ac <Can_Tx>
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8001f70:	e7d8      	b.n	8001f24 <StartTask02+0x8>
 8001f72:	bf00      	nop
 8001f74:	40020c00 	.word	0x40020c00
 8001f78:	20004a50 	.word	0x20004a50
 8001f7c:	20004a6c 	.word	0x20004a6c

08001f80 <HAL_TIM_PeriodElapsedCallback>:
  }
}


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b082      	sub	sp, #8
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a04      	ldr	r2, [pc, #16]	; (8001fa0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d101      	bne.n	8001f96 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001f92:	f000 f9c5 	bl	8002320 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001f96:	bf00      	nop
 8001f98:	3708      	adds	r7, #8
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	40001000 	.word	0x40001000

08001fa4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001fa8:	bf00      	nop
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr
	...

08001fb4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b082      	sub	sp, #8
 8001fb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fba:	2300      	movs	r3, #0
 8001fbc:	607b      	str	r3, [r7, #4]
 8001fbe:	4b12      	ldr	r3, [pc, #72]	; (8002008 <HAL_MspInit+0x54>)
 8001fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fc2:	4a11      	ldr	r2, [pc, #68]	; (8002008 <HAL_MspInit+0x54>)
 8001fc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fc8:	6453      	str	r3, [r2, #68]	; 0x44
 8001fca:	4b0f      	ldr	r3, [pc, #60]	; (8002008 <HAL_MspInit+0x54>)
 8001fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fd2:	607b      	str	r3, [r7, #4]
 8001fd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	603b      	str	r3, [r7, #0]
 8001fda:	4b0b      	ldr	r3, [pc, #44]	; (8002008 <HAL_MspInit+0x54>)
 8001fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fde:	4a0a      	ldr	r2, [pc, #40]	; (8002008 <HAL_MspInit+0x54>)
 8001fe0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fe4:	6413      	str	r3, [r2, #64]	; 0x40
 8001fe6:	4b08      	ldr	r3, [pc, #32]	; (8002008 <HAL_MspInit+0x54>)
 8001fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fee:	603b      	str	r3, [r7, #0]
 8001ff0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	210f      	movs	r1, #15
 8001ff6:	f06f 0001 	mvn.w	r0, #1
 8001ffa:	f000 ffe1 	bl	8002fc0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ffe:	bf00      	nop
 8002000:	3708      	adds	r7, #8
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	40023800 	.word	0x40023800

0800200c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b08a      	sub	sp, #40	; 0x28
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002014:	f107 0314 	add.w	r3, r7, #20
 8002018:	2200      	movs	r2, #0
 800201a:	601a      	str	r2, [r3, #0]
 800201c:	605a      	str	r2, [r3, #4]
 800201e:	609a      	str	r2, [r3, #8]
 8002020:	60da      	str	r2, [r3, #12]
 8002022:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a1d      	ldr	r2, [pc, #116]	; (80020a0 <HAL_CAN_MspInit+0x94>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d134      	bne.n	8002098 <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800202e:	2300      	movs	r3, #0
 8002030:	613b      	str	r3, [r7, #16]
 8002032:	4b1c      	ldr	r3, [pc, #112]	; (80020a4 <HAL_CAN_MspInit+0x98>)
 8002034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002036:	4a1b      	ldr	r2, [pc, #108]	; (80020a4 <HAL_CAN_MspInit+0x98>)
 8002038:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800203c:	6413      	str	r3, [r2, #64]	; 0x40
 800203e:	4b19      	ldr	r3, [pc, #100]	; (80020a4 <HAL_CAN_MspInit+0x98>)
 8002040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002042:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002046:	613b      	str	r3, [r7, #16]
 8002048:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800204a:	2300      	movs	r3, #0
 800204c:	60fb      	str	r3, [r7, #12]
 800204e:	4b15      	ldr	r3, [pc, #84]	; (80020a4 <HAL_CAN_MspInit+0x98>)
 8002050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002052:	4a14      	ldr	r2, [pc, #80]	; (80020a4 <HAL_CAN_MspInit+0x98>)
 8002054:	f043 0302 	orr.w	r3, r3, #2
 8002058:	6313      	str	r3, [r2, #48]	; 0x30
 800205a:	4b12      	ldr	r3, [pc, #72]	; (80020a4 <HAL_CAN_MspInit+0x98>)
 800205c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800205e:	f003 0302 	and.w	r3, r3, #2
 8002062:	60fb      	str	r3, [r7, #12]
 8002064:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration    
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002066:	f44f 7340 	mov.w	r3, #768	; 0x300
 800206a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800206c:	2302      	movs	r3, #2
 800206e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002070:	2300      	movs	r3, #0
 8002072:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002074:	2303      	movs	r3, #3
 8002076:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8002078:	2309      	movs	r3, #9
 800207a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800207c:	f107 0314 	add.w	r3, r7, #20
 8002080:	4619      	mov	r1, r3
 8002082:	4809      	ldr	r0, [pc, #36]	; (80020a8 <HAL_CAN_MspInit+0x9c>)
 8002084:	f000 ffc6 	bl	8003014 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8002088:	2200      	movs	r2, #0
 800208a:	2105      	movs	r1, #5
 800208c:	2014      	movs	r0, #20
 800208e:	f000 ff97 	bl	8002fc0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8002092:	2014      	movs	r0, #20
 8002094:	f000 ffb0 	bl	8002ff8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8002098:	bf00      	nop
 800209a:	3728      	adds	r7, #40	; 0x28
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}
 80020a0:	40006400 	.word	0x40006400
 80020a4:	40023800 	.word	0x40023800
 80020a8:	40020400 	.word	0x40020400

080020ac <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b08a      	sub	sp, #40	; 0x28
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020b4:	f107 0314 	add.w	r3, r7, #20
 80020b8:	2200      	movs	r2, #0
 80020ba:	601a      	str	r2, [r3, #0]
 80020bc:	605a      	str	r2, [r3, #4]
 80020be:	609a      	str	r2, [r3, #8]
 80020c0:	60da      	str	r2, [r3, #12]
 80020c2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a19      	ldr	r2, [pc, #100]	; (8002130 <HAL_SPI_MspInit+0x84>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d12b      	bne.n	8002126 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80020ce:	2300      	movs	r3, #0
 80020d0:	613b      	str	r3, [r7, #16]
 80020d2:	4b18      	ldr	r3, [pc, #96]	; (8002134 <HAL_SPI_MspInit+0x88>)
 80020d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020d6:	4a17      	ldr	r2, [pc, #92]	; (8002134 <HAL_SPI_MspInit+0x88>)
 80020d8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80020dc:	6453      	str	r3, [r2, #68]	; 0x44
 80020de:	4b15      	ldr	r3, [pc, #84]	; (8002134 <HAL_SPI_MspInit+0x88>)
 80020e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020e6:	613b      	str	r3, [r7, #16]
 80020e8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020ea:	2300      	movs	r3, #0
 80020ec:	60fb      	str	r3, [r7, #12]
 80020ee:	4b11      	ldr	r3, [pc, #68]	; (8002134 <HAL_SPI_MspInit+0x88>)
 80020f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f2:	4a10      	ldr	r2, [pc, #64]	; (8002134 <HAL_SPI_MspInit+0x88>)
 80020f4:	f043 0301 	orr.w	r3, r3, #1
 80020f8:	6313      	str	r3, [r2, #48]	; 0x30
 80020fa:	4b0e      	ldr	r3, [pc, #56]	; (8002134 <HAL_SPI_MspInit+0x88>)
 80020fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fe:	f003 0301 	and.w	r3, r3, #1
 8002102:	60fb      	str	r3, [r7, #12]
 8002104:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002106:	23e0      	movs	r3, #224	; 0xe0
 8002108:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800210a:	2302      	movs	r3, #2
 800210c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800210e:	2300      	movs	r3, #0
 8002110:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002112:	2303      	movs	r3, #3
 8002114:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002116:	2305      	movs	r3, #5
 8002118:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800211a:	f107 0314 	add.w	r3, r7, #20
 800211e:	4619      	mov	r1, r3
 8002120:	4805      	ldr	r0, [pc, #20]	; (8002138 <HAL_SPI_MspInit+0x8c>)
 8002122:	f000 ff77 	bl	8003014 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002126:	bf00      	nop
 8002128:	3728      	adds	r7, #40	; 0x28
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	40013000 	.word	0x40013000
 8002134:	40023800 	.word	0x40023800
 8002138:	40020000 	.word	0x40020000

0800213c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b08c      	sub	sp, #48	; 0x30
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002144:	2300      	movs	r3, #0
 8002146:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002148:	2300      	movs	r3, #0
 800214a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 800214c:	2200      	movs	r2, #0
 800214e:	6879      	ldr	r1, [r7, #4]
 8002150:	2036      	movs	r0, #54	; 0x36
 8002152:	f000 ff35 	bl	8002fc0 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 8002156:	2036      	movs	r0, #54	; 0x36
 8002158:	f000 ff4e 	bl	8002ff8 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800215c:	2300      	movs	r3, #0
 800215e:	60fb      	str	r3, [r7, #12]
 8002160:	4b1f      	ldr	r3, [pc, #124]	; (80021e0 <HAL_InitTick+0xa4>)
 8002162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002164:	4a1e      	ldr	r2, [pc, #120]	; (80021e0 <HAL_InitTick+0xa4>)
 8002166:	f043 0310 	orr.w	r3, r3, #16
 800216a:	6413      	str	r3, [r2, #64]	; 0x40
 800216c:	4b1c      	ldr	r3, [pc, #112]	; (80021e0 <HAL_InitTick+0xa4>)
 800216e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002170:	f003 0310 	and.w	r3, r3, #16
 8002174:	60fb      	str	r3, [r7, #12]
 8002176:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002178:	f107 0210 	add.w	r2, r7, #16
 800217c:	f107 0314 	add.w	r3, r7, #20
 8002180:	4611      	mov	r1, r2
 8002182:	4618      	mov	r0, r3
 8002184:	f001 fd9e 	bl	8003cc4 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002188:	f001 fd88 	bl	8003c9c <HAL_RCC_GetPCLK1Freq>
 800218c:	4603      	mov	r3, r0
 800218e:	005b      	lsls	r3, r3, #1
 8002190:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8002192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002194:	4a13      	ldr	r2, [pc, #76]	; (80021e4 <HAL_InitTick+0xa8>)
 8002196:	fba2 2303 	umull	r2, r3, r2, r3
 800219a:	0c9b      	lsrs	r3, r3, #18
 800219c:	3b01      	subs	r3, #1
 800219e:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80021a0:	4b11      	ldr	r3, [pc, #68]	; (80021e8 <HAL_InitTick+0xac>)
 80021a2:	4a12      	ldr	r2, [pc, #72]	; (80021ec <HAL_InitTick+0xb0>)
 80021a4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 80021a6:	4b10      	ldr	r3, [pc, #64]	; (80021e8 <HAL_InitTick+0xac>)
 80021a8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80021ac:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80021ae:	4a0e      	ldr	r2, [pc, #56]	; (80021e8 <HAL_InitTick+0xac>)
 80021b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021b2:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80021b4:	4b0c      	ldr	r3, [pc, #48]	; (80021e8 <HAL_InitTick+0xac>)
 80021b6:	2200      	movs	r2, #0
 80021b8:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021ba:	4b0b      	ldr	r3, [pc, #44]	; (80021e8 <HAL_InitTick+0xac>)
 80021bc:	2200      	movs	r2, #0
 80021be:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80021c0:	4809      	ldr	r0, [pc, #36]	; (80021e8 <HAL_InitTick+0xac>)
 80021c2:	f002 fb05 	bl	80047d0 <HAL_TIM_Base_Init>
 80021c6:	4603      	mov	r3, r0
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d104      	bne.n	80021d6 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80021cc:	4806      	ldr	r0, [pc, #24]	; (80021e8 <HAL_InitTick+0xac>)
 80021ce:	f002 fb34 	bl	800483a <HAL_TIM_Base_Start_IT>
 80021d2:	4603      	mov	r3, r0
 80021d4:	e000      	b.n	80021d8 <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
}
 80021d8:	4618      	mov	r0, r3
 80021da:	3730      	adds	r7, #48	; 0x30
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}
 80021e0:	40023800 	.word	0x40023800
 80021e4:	431bde83 	.word	0x431bde83
 80021e8:	20004b5c 	.word	0x20004b5c
 80021ec:	40001000 	.word	0x40001000

080021f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021f0:	b480      	push	{r7}
 80021f2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80021f4:	bf00      	nop
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr

080021fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021fe:	b480      	push	{r7}
 8002200:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002202:	e7fe      	b.n	8002202 <HardFault_Handler+0x4>

08002204 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002204:	b480      	push	{r7}
 8002206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002208:	e7fe      	b.n	8002208 <MemManage_Handler+0x4>

0800220a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800220a:	b480      	push	{r7}
 800220c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800220e:	e7fe      	b.n	800220e <BusFault_Handler+0x4>

08002210 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002210:	b480      	push	{r7}
 8002212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002214:	e7fe      	b.n	8002214 <UsageFault_Handler+0x4>

08002216 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002216:	b480      	push	{r7}
 8002218:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800221a:	bf00      	nop
 800221c:	46bd      	mov	sp, r7
 800221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002222:	4770      	bx	lr

08002224 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002228:	2001      	movs	r0, #1
 800222a:	f001 f8d9 	bl	80033e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800222e:	bf00      	nop
 8002230:	bd80      	pop	{r7, pc}
	...

08002234 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002238:	4802      	ldr	r0, [pc, #8]	; (8002244 <CAN1_RX0_IRQHandler+0x10>)
 800223a:	f000 fbd6 	bl	80029ea <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800223e:	bf00      	nop
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	20004afc 	.word	0x20004afc

08002248 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800224c:	4802      	ldr	r0, [pc, #8]	; (8002258 <TIM6_DAC_IRQHandler+0x10>)
 800224e:	f002 fb18 	bl	8004882 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002252:	bf00      	nop
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	20004b5c 	.word	0x20004b5c

0800225c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800225c:	b480      	push	{r7}
 800225e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002260:	4b08      	ldr	r3, [pc, #32]	; (8002284 <SystemInit+0x28>)
 8002262:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002266:	4a07      	ldr	r2, [pc, #28]	; (8002284 <SystemInit+0x28>)
 8002268:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800226c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002270:	4b04      	ldr	r3, [pc, #16]	; (8002284 <SystemInit+0x28>)
 8002272:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002276:	609a      	str	r2, [r3, #8]
#endif
}
 8002278:	bf00      	nop
 800227a:	46bd      	mov	sp, r7
 800227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002280:	4770      	bx	lr
 8002282:	bf00      	nop
 8002284:	e000ed00 	.word	0xe000ed00

08002288 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002288:	f8df d034 	ldr.w	sp, [pc, #52]	; 80022c0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800228c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800228e:	e003      	b.n	8002298 <LoopCopyDataInit>

08002290 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002290:	4b0c      	ldr	r3, [pc, #48]	; (80022c4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002292:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002294:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002296:	3104      	adds	r1, #4

08002298 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002298:	480b      	ldr	r0, [pc, #44]	; (80022c8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800229a:	4b0c      	ldr	r3, [pc, #48]	; (80022cc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800229c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800229e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80022a0:	d3f6      	bcc.n	8002290 <CopyDataInit>
  ldr  r2, =_sbss
 80022a2:	4a0b      	ldr	r2, [pc, #44]	; (80022d0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80022a4:	e002      	b.n	80022ac <LoopFillZerobss>

080022a6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80022a6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80022a8:	f842 3b04 	str.w	r3, [r2], #4

080022ac <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80022ac:	4b09      	ldr	r3, [pc, #36]	; (80022d4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80022ae:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80022b0:	d3f9      	bcc.n	80022a6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80022b2:	f7ff ffd3 	bl	800225c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80022b6:	f005 fc37 	bl	8007b28 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80022ba:	f7ff f851 	bl	8001360 <main>
  bx  lr    
 80022be:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80022c0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80022c4:	08008248 	.word	0x08008248
  ldr  r0, =_sdata
 80022c8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80022cc:	20000088 	.word	0x20000088
  ldr  r2, =_sbss
 80022d0:	20000088 	.word	0x20000088
  ldr  r3, = _ebss
 80022d4:	20004be0 	.word	0x20004be0

080022d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80022d8:	e7fe      	b.n	80022d8 <ADC_IRQHandler>
	...

080022dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80022e0:	4b0e      	ldr	r3, [pc, #56]	; (800231c <HAL_Init+0x40>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a0d      	ldr	r2, [pc, #52]	; (800231c <HAL_Init+0x40>)
 80022e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80022ea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80022ec:	4b0b      	ldr	r3, [pc, #44]	; (800231c <HAL_Init+0x40>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a0a      	ldr	r2, [pc, #40]	; (800231c <HAL_Init+0x40>)
 80022f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80022f6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022f8:	4b08      	ldr	r3, [pc, #32]	; (800231c <HAL_Init+0x40>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a07      	ldr	r2, [pc, #28]	; (800231c <HAL_Init+0x40>)
 80022fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002302:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002304:	2003      	movs	r0, #3
 8002306:	f000 fe50 	bl	8002faa <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800230a:	2000      	movs	r0, #0
 800230c:	f7ff ff16 	bl	800213c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002310:	f7ff fe50 	bl	8001fb4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002314:	2300      	movs	r3, #0
}
 8002316:	4618      	mov	r0, r3
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	40023c00 	.word	0x40023c00

08002320 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002320:	b480      	push	{r7}
 8002322:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002324:	4b06      	ldr	r3, [pc, #24]	; (8002340 <HAL_IncTick+0x20>)
 8002326:	781b      	ldrb	r3, [r3, #0]
 8002328:	461a      	mov	r2, r3
 800232a:	4b06      	ldr	r3, [pc, #24]	; (8002344 <HAL_IncTick+0x24>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4413      	add	r3, r2
 8002330:	4a04      	ldr	r2, [pc, #16]	; (8002344 <HAL_IncTick+0x24>)
 8002332:	6013      	str	r3, [r2, #0]
}
 8002334:	bf00      	nop
 8002336:	46bd      	mov	sp, r7
 8002338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233c:	4770      	bx	lr
 800233e:	bf00      	nop
 8002340:	20000018 	.word	0x20000018
 8002344:	20004b9c 	.word	0x20004b9c

08002348 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002348:	b480      	push	{r7}
 800234a:	af00      	add	r7, sp, #0
  return uwTick;
 800234c:	4b03      	ldr	r3, [pc, #12]	; (800235c <HAL_GetTick+0x14>)
 800234e:	681b      	ldr	r3, [r3, #0]
}
 8002350:	4618      	mov	r0, r3
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr
 800235a:	bf00      	nop
 800235c:	20004b9c 	.word	0x20004b9c

08002360 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b084      	sub	sp, #16
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d101      	bne.n	8002372 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	e0ed      	b.n	800254e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002378:	b2db      	uxtb	r3, r3
 800237a:	2b00      	cmp	r3, #0
 800237c:	d102      	bne.n	8002384 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800237e:	6878      	ldr	r0, [r7, #4]
 8002380:	f7ff fe44 	bl	800200c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	681a      	ldr	r2, [r3, #0]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f022 0202 	bic.w	r2, r2, #2
 8002392:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002394:	f7ff ffd8 	bl	8002348 <HAL_GetTick>
 8002398:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800239a:	e012      	b.n	80023c2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800239c:	f7ff ffd4 	bl	8002348 <HAL_GetTick>
 80023a0:	4602      	mov	r2, r0
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	1ad3      	subs	r3, r2, r3
 80023a6:	2b0a      	cmp	r3, #10
 80023a8:	d90b      	bls.n	80023c2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ae:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2205      	movs	r2, #5
 80023ba:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	e0c5      	b.n	800254e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	f003 0302 	and.w	r3, r3, #2
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d1e5      	bne.n	800239c <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f042 0201 	orr.w	r2, r2, #1
 80023de:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80023e0:	f7ff ffb2 	bl	8002348 <HAL_GetTick>
 80023e4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80023e6:	e012      	b.n	800240e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80023e8:	f7ff ffae 	bl	8002348 <HAL_GetTick>
 80023ec:	4602      	mov	r2, r0
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	2b0a      	cmp	r3, #10
 80023f4:	d90b      	bls.n	800240e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023fa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2205      	movs	r2, #5
 8002406:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	e09f      	b.n	800254e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	f003 0301 	and.w	r3, r3, #1
 8002418:	2b00      	cmp	r3, #0
 800241a:	d0e5      	beq.n	80023e8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	7e1b      	ldrb	r3, [r3, #24]
 8002420:	2b01      	cmp	r3, #1
 8002422:	d108      	bne.n	8002436 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	681a      	ldr	r2, [r3, #0]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002432:	601a      	str	r2, [r3, #0]
 8002434:	e007      	b.n	8002446 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	681a      	ldr	r2, [r3, #0]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002444:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	7e5b      	ldrb	r3, [r3, #25]
 800244a:	2b01      	cmp	r3, #1
 800244c:	d108      	bne.n	8002460 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	681a      	ldr	r2, [r3, #0]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800245c:	601a      	str	r2, [r3, #0]
 800245e:	e007      	b.n	8002470 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800246e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	7e9b      	ldrb	r3, [r3, #26]
 8002474:	2b01      	cmp	r3, #1
 8002476:	d108      	bne.n	800248a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	681a      	ldr	r2, [r3, #0]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f042 0220 	orr.w	r2, r2, #32
 8002486:	601a      	str	r2, [r3, #0]
 8002488:	e007      	b.n	800249a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f022 0220 	bic.w	r2, r2, #32
 8002498:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	7edb      	ldrb	r3, [r3, #27]
 800249e:	2b01      	cmp	r3, #1
 80024a0:	d108      	bne.n	80024b4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	681a      	ldr	r2, [r3, #0]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f022 0210 	bic.w	r2, r2, #16
 80024b0:	601a      	str	r2, [r3, #0]
 80024b2:	e007      	b.n	80024c4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	681a      	ldr	r2, [r3, #0]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f042 0210 	orr.w	r2, r2, #16
 80024c2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	7f1b      	ldrb	r3, [r3, #28]
 80024c8:	2b01      	cmp	r3, #1
 80024ca:	d108      	bne.n	80024de <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f042 0208 	orr.w	r2, r2, #8
 80024da:	601a      	str	r2, [r3, #0]
 80024dc:	e007      	b.n	80024ee <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	681a      	ldr	r2, [r3, #0]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f022 0208 	bic.w	r2, r2, #8
 80024ec:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	7f5b      	ldrb	r3, [r3, #29]
 80024f2:	2b01      	cmp	r3, #1
 80024f4:	d108      	bne.n	8002508 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f042 0204 	orr.w	r2, r2, #4
 8002504:	601a      	str	r2, [r3, #0]
 8002506:	e007      	b.n	8002518 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	681a      	ldr	r2, [r3, #0]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f022 0204 	bic.w	r2, r2, #4
 8002516:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	689a      	ldr	r2, [r3, #8]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	68db      	ldr	r3, [r3, #12]
 8002520:	431a      	orrs	r2, r3
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	691b      	ldr	r3, [r3, #16]
 8002526:	431a      	orrs	r2, r3
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	695b      	ldr	r3, [r3, #20]
 800252c:	ea42 0103 	orr.w	r1, r2, r3
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	1e5a      	subs	r2, r3, #1
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	430a      	orrs	r2, r1
 800253c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2200      	movs	r2, #0
 8002542:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2201      	movs	r2, #1
 8002548:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800254c:	2300      	movs	r3, #0
}
 800254e:	4618      	mov	r0, r3
 8002550:	3710      	adds	r7, #16
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}
	...

08002558 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8002558:	b480      	push	{r7}
 800255a:	b087      	sub	sp, #28
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
 8002560:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800256e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002570:	7cfb      	ldrb	r3, [r7, #19]
 8002572:	2b01      	cmp	r3, #1
 8002574:	d003      	beq.n	800257e <HAL_CAN_ConfigFilter+0x26>
 8002576:	7cfb      	ldrb	r3, [r7, #19]
 8002578:	2b02      	cmp	r3, #2
 800257a:	f040 80be 	bne.w	80026fa <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800257e:	4b65      	ldr	r3, [pc, #404]	; (8002714 <HAL_CAN_ConfigFilter+0x1bc>)
 8002580:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002588:	f043 0201 	orr.w	r2, r3, #1
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002598:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ac:	021b      	lsls	r3, r3, #8
 80025ae:	431a      	orrs	r2, r3
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	695b      	ldr	r3, [r3, #20]
 80025ba:	f003 031f 	and.w	r3, r3, #31
 80025be:	2201      	movs	r2, #1
 80025c0:	fa02 f303 	lsl.w	r3, r2, r3
 80025c4:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	43db      	mvns	r3, r3
 80025d0:	401a      	ands	r2, r3
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	69db      	ldr	r3, [r3, #28]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d123      	bne.n	8002628 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	43db      	mvns	r3, r3
 80025ea:	401a      	ands	r2, r3
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	68db      	ldr	r3, [r3, #12]
 80025f6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80025fe:	683a      	ldr	r2, [r7, #0]
 8002600:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002602:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	3248      	adds	r2, #72	; 0x48
 8002608:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800261c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800261e:	6979      	ldr	r1, [r7, #20]
 8002620:	3348      	adds	r3, #72	; 0x48
 8002622:	00db      	lsls	r3, r3, #3
 8002624:	440b      	add	r3, r1
 8002626:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	69db      	ldr	r3, [r3, #28]
 800262c:	2b01      	cmp	r3, #1
 800262e:	d122      	bne.n	8002676 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	431a      	orrs	r2, r3
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800264c:	683a      	ldr	r2, [r7, #0]
 800264e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002650:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	3248      	adds	r2, #72	; 0x48
 8002656:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	68db      	ldr	r3, [r3, #12]
 8002664:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800266a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800266c:	6979      	ldr	r1, [r7, #20]
 800266e:	3348      	adds	r3, #72	; 0x48
 8002670:	00db      	lsls	r3, r3, #3
 8002672:	440b      	add	r3, r1
 8002674:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	699b      	ldr	r3, [r3, #24]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d109      	bne.n	8002692 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	43db      	mvns	r3, r3
 8002688:	401a      	ands	r2, r3
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002690:	e007      	b.n	80026a2 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002692:	697b      	ldr	r3, [r7, #20]
 8002694:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	431a      	orrs	r2, r3
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	691b      	ldr	r3, [r3, #16]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d109      	bne.n	80026be <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	43db      	mvns	r3, r3
 80026b4:	401a      	ands	r2, r3
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80026bc:	e007      	b.n	80026ce <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	431a      	orrs	r2, r3
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	6a1b      	ldr	r3, [r3, #32]
 80026d2:	2b01      	cmp	r3, #1
 80026d4:	d107      	bne.n	80026e6 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	431a      	orrs	r2, r3
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80026ec:	f023 0201 	bic.w	r2, r3, #1
 80026f0:	697b      	ldr	r3, [r7, #20]
 80026f2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80026f6:	2300      	movs	r3, #0
 80026f8:	e006      	b.n	8002708 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026fe:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002706:	2301      	movs	r3, #1
  }
}
 8002708:	4618      	mov	r0, r3
 800270a:	371c      	adds	r7, #28
 800270c:	46bd      	mov	sp, r7
 800270e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002712:	4770      	bx	lr
 8002714:	40006400 	.word	0x40006400

08002718 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b084      	sub	sp, #16
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002726:	b2db      	uxtb	r3, r3
 8002728:	2b01      	cmp	r3, #1
 800272a:	d12e      	bne.n	800278a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2202      	movs	r2, #2
 8002730:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	681a      	ldr	r2, [r3, #0]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f022 0201 	bic.w	r2, r2, #1
 8002742:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002744:	f7ff fe00 	bl	8002348 <HAL_GetTick>
 8002748:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800274a:	e012      	b.n	8002772 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800274c:	f7ff fdfc 	bl	8002348 <HAL_GetTick>
 8002750:	4602      	mov	r2, r0
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	1ad3      	subs	r3, r2, r3
 8002756:	2b0a      	cmp	r3, #10
 8002758:	d90b      	bls.n	8002772 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800275e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2205      	movs	r2, #5
 800276a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	e012      	b.n	8002798 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	f003 0301 	and.w	r3, r3, #1
 800277c:	2b00      	cmp	r3, #0
 800277e:	d1e5      	bne.n	800274c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2200      	movs	r2, #0
 8002784:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002786:	2300      	movs	r3, #0
 8002788:	e006      	b.n	8002798 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800278e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002796:	2301      	movs	r3, #1
  }
}
 8002798:	4618      	mov	r0, r3
 800279a:	3710      	adds	r7, #16
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}

080027a0 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b089      	sub	sp, #36	; 0x24
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	60f8      	str	r0, [r7, #12]
 80027a8:	60b9      	str	r1, [r7, #8]
 80027aa:	607a      	str	r2, [r7, #4]
 80027ac:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80027b4:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80027be:	7ffb      	ldrb	r3, [r7, #31]
 80027c0:	2b01      	cmp	r3, #1
 80027c2:	d003      	beq.n	80027cc <HAL_CAN_AddTxMessage+0x2c>
 80027c4:	7ffb      	ldrb	r3, [r7, #31]
 80027c6:	2b02      	cmp	r3, #2
 80027c8:	f040 80b8 	bne.w	800293c <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80027cc:	69bb      	ldr	r3, [r7, #24]
 80027ce:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d10a      	bne.n	80027ec <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80027d6:	69bb      	ldr	r3, [r7, #24]
 80027d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d105      	bne.n	80027ec <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80027e0:	69bb      	ldr	r3, [r7, #24]
 80027e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	f000 80a0 	beq.w	800292c <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80027ec:	69bb      	ldr	r3, [r7, #24]
 80027ee:	0e1b      	lsrs	r3, r3, #24
 80027f0:	f003 0303 	and.w	r3, r3, #3
 80027f4:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	2b02      	cmp	r3, #2
 80027fa:	d907      	bls.n	800280c <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002800:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002808:	2301      	movs	r3, #1
 800280a:	e09e      	b.n	800294a <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800280c:	2201      	movs	r2, #1
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	409a      	lsls	r2, r3
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002816:	68bb      	ldr	r3, [r7, #8]
 8002818:	689b      	ldr	r3, [r3, #8]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d10d      	bne.n	800283a <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002828:	68f9      	ldr	r1, [r7, #12]
 800282a:	6809      	ldr	r1, [r1, #0]
 800282c:	431a      	orrs	r2, r3
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	3318      	adds	r3, #24
 8002832:	011b      	lsls	r3, r3, #4
 8002834:	440b      	add	r3, r1
 8002836:	601a      	str	r2, [r3, #0]
 8002838:	e00f      	b.n	800285a <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002844:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002846:	68bb      	ldr	r3, [r7, #8]
 8002848:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800284a:	68f9      	ldr	r1, [r7, #12]
 800284c:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800284e:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	3318      	adds	r3, #24
 8002854:	011b      	lsls	r3, r3, #4
 8002856:	440b      	add	r3, r1
 8002858:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	6819      	ldr	r1, [r3, #0]
 800285e:	68bb      	ldr	r3, [r7, #8]
 8002860:	691a      	ldr	r2, [r3, #16]
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	3318      	adds	r3, #24
 8002866:	011b      	lsls	r3, r3, #4
 8002868:	440b      	add	r3, r1
 800286a:	3304      	adds	r3, #4
 800286c:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	7d1b      	ldrb	r3, [r3, #20]
 8002872:	2b01      	cmp	r3, #1
 8002874:	d111      	bne.n	800289a <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681a      	ldr	r2, [r3, #0]
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	3318      	adds	r3, #24
 800287e:	011b      	lsls	r3, r3, #4
 8002880:	4413      	add	r3, r2
 8002882:	3304      	adds	r3, #4
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	68fa      	ldr	r2, [r7, #12]
 8002888:	6811      	ldr	r1, [r2, #0]
 800288a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	3318      	adds	r3, #24
 8002892:	011b      	lsls	r3, r3, #4
 8002894:	440b      	add	r3, r1
 8002896:	3304      	adds	r3, #4
 8002898:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	3307      	adds	r3, #7
 800289e:	781b      	ldrb	r3, [r3, #0]
 80028a0:	061a      	lsls	r2, r3, #24
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	3306      	adds	r3, #6
 80028a6:	781b      	ldrb	r3, [r3, #0]
 80028a8:	041b      	lsls	r3, r3, #16
 80028aa:	431a      	orrs	r2, r3
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	3305      	adds	r3, #5
 80028b0:	781b      	ldrb	r3, [r3, #0]
 80028b2:	021b      	lsls	r3, r3, #8
 80028b4:	4313      	orrs	r3, r2
 80028b6:	687a      	ldr	r2, [r7, #4]
 80028b8:	3204      	adds	r2, #4
 80028ba:	7812      	ldrb	r2, [r2, #0]
 80028bc:	4610      	mov	r0, r2
 80028be:	68fa      	ldr	r2, [r7, #12]
 80028c0:	6811      	ldr	r1, [r2, #0]
 80028c2:	ea43 0200 	orr.w	r2, r3, r0
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	011b      	lsls	r3, r3, #4
 80028ca:	440b      	add	r3, r1
 80028cc:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80028d0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	3303      	adds	r3, #3
 80028d6:	781b      	ldrb	r3, [r3, #0]
 80028d8:	061a      	lsls	r2, r3, #24
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	3302      	adds	r3, #2
 80028de:	781b      	ldrb	r3, [r3, #0]
 80028e0:	041b      	lsls	r3, r3, #16
 80028e2:	431a      	orrs	r2, r3
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	3301      	adds	r3, #1
 80028e8:	781b      	ldrb	r3, [r3, #0]
 80028ea:	021b      	lsls	r3, r3, #8
 80028ec:	4313      	orrs	r3, r2
 80028ee:	687a      	ldr	r2, [r7, #4]
 80028f0:	7812      	ldrb	r2, [r2, #0]
 80028f2:	4610      	mov	r0, r2
 80028f4:	68fa      	ldr	r2, [r7, #12]
 80028f6:	6811      	ldr	r1, [r2, #0]
 80028f8:	ea43 0200 	orr.w	r2, r3, r0
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	011b      	lsls	r3, r3, #4
 8002900:	440b      	add	r3, r1
 8002902:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002906:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	3318      	adds	r3, #24
 8002910:	011b      	lsls	r3, r3, #4
 8002912:	4413      	add	r3, r2
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	68fa      	ldr	r2, [r7, #12]
 8002918:	6811      	ldr	r1, [r2, #0]
 800291a:	f043 0201 	orr.w	r2, r3, #1
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	3318      	adds	r3, #24
 8002922:	011b      	lsls	r3, r3, #4
 8002924:	440b      	add	r3, r1
 8002926:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002928:	2300      	movs	r3, #0
 800292a:	e00e      	b.n	800294a <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002930:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002938:	2301      	movs	r3, #1
 800293a:	e006      	b.n	800294a <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002940:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002948:	2301      	movs	r3, #1
  }
}
 800294a:	4618      	mov	r0, r3
 800294c:	3724      	adds	r7, #36	; 0x24
 800294e:	46bd      	mov	sp, r7
 8002950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002954:	4770      	bx	lr

08002956 <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 8002956:	b480      	push	{r7}
 8002958:	b085      	sub	sp, #20
 800295a:	af00      	add	r7, sp, #0
 800295c:	6078      	str	r0, [r7, #4]
 800295e:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 8002960:	2300      	movs	r3, #0
 8002962:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	f893 3020 	ldrb.w	r3, [r3, #32]
 800296a:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 800296c:	7afb      	ldrb	r3, [r7, #11]
 800296e:	2b01      	cmp	r3, #1
 8002970:	d002      	beq.n	8002978 <HAL_CAN_IsTxMessagePending+0x22>
 8002972:	7afb      	ldrb	r3, [r7, #11]
 8002974:	2b02      	cmp	r3, #2
 8002976:	d10b      	bne.n	8002990 <HAL_CAN_IsTxMessagePending+0x3a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	689a      	ldr	r2, [r3, #8]
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	069b      	lsls	r3, r3, #26
 8002982:	401a      	ands	r2, r3
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	069b      	lsls	r3, r3, #26
 8002988:	429a      	cmp	r2, r3
 800298a:	d001      	beq.n	8002990 <HAL_CAN_IsTxMessagePending+0x3a>
    {
      status = 1U;
 800298c:	2301      	movs	r3, #1
 800298e:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 8002990:	68fb      	ldr	r3, [r7, #12]
}
 8002992:	4618      	mov	r0, r3
 8002994:	3714      	adds	r7, #20
 8002996:	46bd      	mov	sp, r7
 8002998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299c:	4770      	bx	lr

0800299e <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800299e:	b480      	push	{r7}
 80029a0:	b085      	sub	sp, #20
 80029a2:	af00      	add	r7, sp, #0
 80029a4:	6078      	str	r0, [r7, #4]
 80029a6:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029ae:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80029b0:	7bfb      	ldrb	r3, [r7, #15]
 80029b2:	2b01      	cmp	r3, #1
 80029b4:	d002      	beq.n	80029bc <HAL_CAN_ActivateNotification+0x1e>
 80029b6:	7bfb      	ldrb	r3, [r7, #15]
 80029b8:	2b02      	cmp	r3, #2
 80029ba:	d109      	bne.n	80029d0 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	6959      	ldr	r1, [r3, #20]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	683a      	ldr	r2, [r7, #0]
 80029c8:	430a      	orrs	r2, r1
 80029ca:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80029cc:	2300      	movs	r3, #0
 80029ce:	e006      	b.n	80029de <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80029dc:	2301      	movs	r3, #1
  }
}
 80029de:	4618      	mov	r0, r3
 80029e0:	3714      	adds	r7, #20
 80029e2:	46bd      	mov	sp, r7
 80029e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e8:	4770      	bx	lr

080029ea <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80029ea:	b580      	push	{r7, lr}
 80029ec:	b08a      	sub	sp, #40	; 0x28
 80029ee:	af00      	add	r7, sp, #0
 80029f0:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80029f2:	2300      	movs	r3, #0
 80029f4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	695b      	ldr	r3, [r3, #20]
 80029fc:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	68db      	ldr	r3, [r3, #12]
 8002a14:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	691b      	ldr	r3, [r3, #16]
 8002a1c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	699b      	ldr	r3, [r3, #24]
 8002a24:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002a26:	6a3b      	ldr	r3, [r7, #32]
 8002a28:	f003 0301 	and.w	r3, r3, #1
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d07c      	beq.n	8002b2a <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002a30:	69bb      	ldr	r3, [r7, #24]
 8002a32:	f003 0301 	and.w	r3, r3, #1
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d023      	beq.n	8002a82 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	2201      	movs	r2, #1
 8002a40:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002a42:	69bb      	ldr	r3, [r7, #24]
 8002a44:	f003 0302 	and.w	r3, r3, #2
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d003      	beq.n	8002a54 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002a4c:	6878      	ldr	r0, [r7, #4]
 8002a4e:	f000 f97d 	bl	8002d4c <HAL_CAN_TxMailbox0CompleteCallback>
 8002a52:	e016      	b.n	8002a82 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002a54:	69bb      	ldr	r3, [r7, #24]
 8002a56:	f003 0304 	and.w	r3, r3, #4
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d004      	beq.n	8002a68 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a60:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002a64:	627b      	str	r3, [r7, #36]	; 0x24
 8002a66:	e00c      	b.n	8002a82 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002a68:	69bb      	ldr	r3, [r7, #24]
 8002a6a:	f003 0308 	and.w	r3, r3, #8
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d004      	beq.n	8002a7c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a74:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002a78:	627b      	str	r3, [r7, #36]	; 0x24
 8002a7a:	e002      	b.n	8002a82 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002a7c:	6878      	ldr	r0, [r7, #4]
 8002a7e:	f000 f983 	bl	8002d88 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002a82:	69bb      	ldr	r3, [r7, #24]
 8002a84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d024      	beq.n	8002ad6 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a94:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002a96:	69bb      	ldr	r3, [r7, #24]
 8002a98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d003      	beq.n	8002aa8 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002aa0:	6878      	ldr	r0, [r7, #4]
 8002aa2:	f000 f95d 	bl	8002d60 <HAL_CAN_TxMailbox1CompleteCallback>
 8002aa6:	e016      	b.n	8002ad6 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002aa8:	69bb      	ldr	r3, [r7, #24]
 8002aaa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d004      	beq.n	8002abc <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002ab8:	627b      	str	r3, [r7, #36]	; 0x24
 8002aba:	e00c      	b.n	8002ad6 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002abc:	69bb      	ldr	r3, [r7, #24]
 8002abe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d004      	beq.n	8002ad0 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002acc:	627b      	str	r3, [r7, #36]	; 0x24
 8002ace:	e002      	b.n	8002ad6 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002ad0:	6878      	ldr	r0, [r7, #4]
 8002ad2:	f000 f963 	bl	8002d9c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002ad6:	69bb      	ldr	r3, [r7, #24]
 8002ad8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d024      	beq.n	8002b2a <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002ae8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002aea:	69bb      	ldr	r3, [r7, #24]
 8002aec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d003      	beq.n	8002afc <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002af4:	6878      	ldr	r0, [r7, #4]
 8002af6:	f000 f93d 	bl	8002d74 <HAL_CAN_TxMailbox2CompleteCallback>
 8002afa:	e016      	b.n	8002b2a <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002afc:	69bb      	ldr	r3, [r7, #24]
 8002afe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d004      	beq.n	8002b10 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b08:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b0c:	627b      	str	r3, [r7, #36]	; 0x24
 8002b0e:	e00c      	b.n	8002b2a <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002b10:	69bb      	ldr	r3, [r7, #24]
 8002b12:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d004      	beq.n	8002b24 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b20:	627b      	str	r3, [r7, #36]	; 0x24
 8002b22:	e002      	b.n	8002b2a <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002b24:	6878      	ldr	r0, [r7, #4]
 8002b26:	f000 f943 	bl	8002db0 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002b2a:	6a3b      	ldr	r3, [r7, #32]
 8002b2c:	f003 0308 	and.w	r3, r3, #8
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d00c      	beq.n	8002b4e <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	f003 0310 	and.w	r3, r3, #16
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d007      	beq.n	8002b4e <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b40:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b44:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	2210      	movs	r2, #16
 8002b4c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002b4e:	6a3b      	ldr	r3, [r7, #32]
 8002b50:	f003 0304 	and.w	r3, r3, #4
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d00b      	beq.n	8002b70 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	f003 0308 	and.w	r3, r3, #8
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d006      	beq.n	8002b70 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	2208      	movs	r2, #8
 8002b68:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f000 f934 	bl	8002dd8 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002b70:	6a3b      	ldr	r3, [r7, #32]
 8002b72:	f003 0302 	and.w	r3, r3, #2
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d009      	beq.n	8002b8e <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	68db      	ldr	r3, [r3, #12]
 8002b80:	f003 0303 	and.w	r3, r3, #3
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d002      	beq.n	8002b8e <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002b88:	6878      	ldr	r0, [r7, #4]
 8002b8a:	f000 f91b 	bl	8002dc4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002b8e:	6a3b      	ldr	r3, [r7, #32]
 8002b90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d00c      	beq.n	8002bb2 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002b98:	693b      	ldr	r3, [r7, #16]
 8002b9a:	f003 0310 	and.w	r3, r3, #16
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d007      	beq.n	8002bb2 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002ba8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	2210      	movs	r2, #16
 8002bb0:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002bb2:	6a3b      	ldr	r3, [r7, #32]
 8002bb4:	f003 0320 	and.w	r3, r3, #32
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d00b      	beq.n	8002bd4 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	f003 0308 	and.w	r3, r3, #8
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d006      	beq.n	8002bd4 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	2208      	movs	r2, #8
 8002bcc:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002bce:	6878      	ldr	r0, [r7, #4]
 8002bd0:	f000 f916 	bl	8002e00 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002bd4:	6a3b      	ldr	r3, [r7, #32]
 8002bd6:	f003 0310 	and.w	r3, r3, #16
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d009      	beq.n	8002bf2 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	691b      	ldr	r3, [r3, #16]
 8002be4:	f003 0303 	and.w	r3, r3, #3
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d002      	beq.n	8002bf2 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002bec:	6878      	ldr	r0, [r7, #4]
 8002bee:	f000 f8fd 	bl	8002dec <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002bf2:	6a3b      	ldr	r3, [r7, #32]
 8002bf4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d00b      	beq.n	8002c14 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002bfc:	69fb      	ldr	r3, [r7, #28]
 8002bfe:	f003 0310 	and.w	r3, r3, #16
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d006      	beq.n	8002c14 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	2210      	movs	r2, #16
 8002c0c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002c0e:	6878      	ldr	r0, [r7, #4]
 8002c10:	f000 f900 	bl	8002e14 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002c14:	6a3b      	ldr	r3, [r7, #32]
 8002c16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d00b      	beq.n	8002c36 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002c1e:	69fb      	ldr	r3, [r7, #28]
 8002c20:	f003 0308 	and.w	r3, r3, #8
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d006      	beq.n	8002c36 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	2208      	movs	r2, #8
 8002c2e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002c30:	6878      	ldr	r0, [r7, #4]
 8002c32:	f000 f8f9 	bl	8002e28 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002c36:	6a3b      	ldr	r3, [r7, #32]
 8002c38:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d075      	beq.n	8002d2c <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002c40:	69fb      	ldr	r3, [r7, #28]
 8002c42:	f003 0304 	and.w	r3, r3, #4
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d06c      	beq.n	8002d24 <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002c4a:	6a3b      	ldr	r3, [r7, #32]
 8002c4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d008      	beq.n	8002c66 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d003      	beq.n	8002c66 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c60:	f043 0301 	orr.w	r3, r3, #1
 8002c64:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002c66:	6a3b      	ldr	r3, [r7, #32]
 8002c68:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d008      	beq.n	8002c82 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d003      	beq.n	8002c82 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c7c:	f043 0302 	orr.w	r3, r3, #2
 8002c80:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002c82:	6a3b      	ldr	r3, [r7, #32]
 8002c84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d008      	beq.n	8002c9e <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d003      	beq.n	8002c9e <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c98:	f043 0304 	orr.w	r3, r3, #4
 8002c9c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002c9e:	6a3b      	ldr	r3, [r7, #32]
 8002ca0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d03d      	beq.n	8002d24 <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d038      	beq.n	8002d24 <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002cb8:	2b30      	cmp	r3, #48	; 0x30
 8002cba:	d017      	beq.n	8002cec <HAL_CAN_IRQHandler+0x302>
 8002cbc:	2b30      	cmp	r3, #48	; 0x30
 8002cbe:	d804      	bhi.n	8002cca <HAL_CAN_IRQHandler+0x2e0>
 8002cc0:	2b10      	cmp	r3, #16
 8002cc2:	d009      	beq.n	8002cd8 <HAL_CAN_IRQHandler+0x2ee>
 8002cc4:	2b20      	cmp	r3, #32
 8002cc6:	d00c      	beq.n	8002ce2 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002cc8:	e024      	b.n	8002d14 <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 8002cca:	2b50      	cmp	r3, #80	; 0x50
 8002ccc:	d018      	beq.n	8002d00 <HAL_CAN_IRQHandler+0x316>
 8002cce:	2b60      	cmp	r3, #96	; 0x60
 8002cd0:	d01b      	beq.n	8002d0a <HAL_CAN_IRQHandler+0x320>
 8002cd2:	2b40      	cmp	r3, #64	; 0x40
 8002cd4:	d00f      	beq.n	8002cf6 <HAL_CAN_IRQHandler+0x30c>
            break;
 8002cd6:	e01d      	b.n	8002d14 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 8002cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cda:	f043 0308 	orr.w	r3, r3, #8
 8002cde:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002ce0:	e018      	b.n	8002d14 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce4:	f043 0310 	orr.w	r3, r3, #16
 8002ce8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002cea:	e013      	b.n	8002d14 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cee:	f043 0320 	orr.w	r3, r3, #32
 8002cf2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002cf4:	e00e      	b.n	8002d14 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 8002cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002cfc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002cfe:	e009      	b.n	8002d14 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 8002d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d06:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002d08:	e004      	b.n	8002d14 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d10:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002d12:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	699a      	ldr	r2, [r3, #24]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002d22:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	2204      	movs	r2, #4
 8002d2a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d008      	beq.n	8002d44 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d38:	431a      	orrs	r2, r3
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002d3e:	6878      	ldr	r0, [r7, #4]
 8002d40:	f000 f87c 	bl	8002e3c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002d44:	bf00      	nop
 8002d46:	3728      	adds	r7, #40	; 0x28
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd80      	pop	{r7, pc}

08002d4c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b083      	sub	sp, #12
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002d54:	bf00      	nop
 8002d56:	370c      	adds	r7, #12
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5e:	4770      	bx	lr

08002d60 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b083      	sub	sp, #12
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002d68:	bf00      	nop
 8002d6a:	370c      	adds	r7, #12
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d72:	4770      	bx	lr

08002d74 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b083      	sub	sp, #12
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002d7c:	bf00      	nop
 8002d7e:	370c      	adds	r7, #12
 8002d80:	46bd      	mov	sp, r7
 8002d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d86:	4770      	bx	lr

08002d88 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b083      	sub	sp, #12
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002d90:	bf00      	nop
 8002d92:	370c      	adds	r7, #12
 8002d94:	46bd      	mov	sp, r7
 8002d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9a:	4770      	bx	lr

08002d9c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b083      	sub	sp, #12
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002da4:	bf00      	nop
 8002da6:	370c      	adds	r7, #12
 8002da8:	46bd      	mov	sp, r7
 8002daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dae:	4770      	bx	lr

08002db0 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b083      	sub	sp, #12
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002db8:	bf00      	nop
 8002dba:	370c      	adds	r7, #12
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc2:	4770      	bx	lr

08002dc4 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b083      	sub	sp, #12
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8002dcc:	bf00      	nop
 8002dce:	370c      	adds	r7, #12
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd6:	4770      	bx	lr

08002dd8 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b083      	sub	sp, #12
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002de0:	bf00      	nop
 8002de2:	370c      	adds	r7, #12
 8002de4:	46bd      	mov	sp, r7
 8002de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dea:	4770      	bx	lr

08002dec <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b083      	sub	sp, #12
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002df4:	bf00      	nop
 8002df6:	370c      	adds	r7, #12
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfe:	4770      	bx	lr

08002e00 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b083      	sub	sp, #12
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002e08:	bf00      	nop
 8002e0a:	370c      	adds	r7, #12
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e12:	4770      	bx	lr

08002e14 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b083      	sub	sp, #12
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002e1c:	bf00      	nop
 8002e1e:	370c      	adds	r7, #12
 8002e20:	46bd      	mov	sp, r7
 8002e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e26:	4770      	bx	lr

08002e28 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b083      	sub	sp, #12
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002e30:	bf00      	nop
 8002e32:	370c      	adds	r7, #12
 8002e34:	46bd      	mov	sp, r7
 8002e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3a:	4770      	bx	lr

08002e3c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b083      	sub	sp, #12
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002e44:	bf00      	nop
 8002e46:	370c      	adds	r7, #12
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4e:	4770      	bx	lr

08002e50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b085      	sub	sp, #20
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	f003 0307 	and.w	r3, r3, #7
 8002e5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e60:	4b0c      	ldr	r3, [pc, #48]	; (8002e94 <__NVIC_SetPriorityGrouping+0x44>)
 8002e62:	68db      	ldr	r3, [r3, #12]
 8002e64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e66:	68ba      	ldr	r2, [r7, #8]
 8002e68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002e7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e82:	4a04      	ldr	r2, [pc, #16]	; (8002e94 <__NVIC_SetPriorityGrouping+0x44>)
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	60d3      	str	r3, [r2, #12]
}
 8002e88:	bf00      	nop
 8002e8a:	3714      	adds	r7, #20
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e92:	4770      	bx	lr
 8002e94:	e000ed00 	.word	0xe000ed00

08002e98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e9c:	4b04      	ldr	r3, [pc, #16]	; (8002eb0 <__NVIC_GetPriorityGrouping+0x18>)
 8002e9e:	68db      	ldr	r3, [r3, #12]
 8002ea0:	0a1b      	lsrs	r3, r3, #8
 8002ea2:	f003 0307 	and.w	r3, r3, #7
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eae:	4770      	bx	lr
 8002eb0:	e000ed00 	.word	0xe000ed00

08002eb4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b083      	sub	sp, #12
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	4603      	mov	r3, r0
 8002ebc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ebe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	db0b      	blt.n	8002ede <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ec6:	79fb      	ldrb	r3, [r7, #7]
 8002ec8:	f003 021f 	and.w	r2, r3, #31
 8002ecc:	4907      	ldr	r1, [pc, #28]	; (8002eec <__NVIC_EnableIRQ+0x38>)
 8002ece:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ed2:	095b      	lsrs	r3, r3, #5
 8002ed4:	2001      	movs	r0, #1
 8002ed6:	fa00 f202 	lsl.w	r2, r0, r2
 8002eda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002ede:	bf00      	nop
 8002ee0:	370c      	adds	r7, #12
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee8:	4770      	bx	lr
 8002eea:	bf00      	nop
 8002eec:	e000e100 	.word	0xe000e100

08002ef0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b083      	sub	sp, #12
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	6039      	str	r1, [r7, #0]
 8002efa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002efc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	db0a      	blt.n	8002f1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	b2da      	uxtb	r2, r3
 8002f08:	490c      	ldr	r1, [pc, #48]	; (8002f3c <__NVIC_SetPriority+0x4c>)
 8002f0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f0e:	0112      	lsls	r2, r2, #4
 8002f10:	b2d2      	uxtb	r2, r2
 8002f12:	440b      	add	r3, r1
 8002f14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f18:	e00a      	b.n	8002f30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	b2da      	uxtb	r2, r3
 8002f1e:	4908      	ldr	r1, [pc, #32]	; (8002f40 <__NVIC_SetPriority+0x50>)
 8002f20:	79fb      	ldrb	r3, [r7, #7]
 8002f22:	f003 030f 	and.w	r3, r3, #15
 8002f26:	3b04      	subs	r3, #4
 8002f28:	0112      	lsls	r2, r2, #4
 8002f2a:	b2d2      	uxtb	r2, r2
 8002f2c:	440b      	add	r3, r1
 8002f2e:	761a      	strb	r2, [r3, #24]
}
 8002f30:	bf00      	nop
 8002f32:	370c      	adds	r7, #12
 8002f34:	46bd      	mov	sp, r7
 8002f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3a:	4770      	bx	lr
 8002f3c:	e000e100 	.word	0xe000e100
 8002f40:	e000ed00 	.word	0xe000ed00

08002f44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b089      	sub	sp, #36	; 0x24
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	60f8      	str	r0, [r7, #12]
 8002f4c:	60b9      	str	r1, [r7, #8]
 8002f4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	f003 0307 	and.w	r3, r3, #7
 8002f56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f58:	69fb      	ldr	r3, [r7, #28]
 8002f5a:	f1c3 0307 	rsb	r3, r3, #7
 8002f5e:	2b04      	cmp	r3, #4
 8002f60:	bf28      	it	cs
 8002f62:	2304      	movcs	r3, #4
 8002f64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f66:	69fb      	ldr	r3, [r7, #28]
 8002f68:	3304      	adds	r3, #4
 8002f6a:	2b06      	cmp	r3, #6
 8002f6c:	d902      	bls.n	8002f74 <NVIC_EncodePriority+0x30>
 8002f6e:	69fb      	ldr	r3, [r7, #28]
 8002f70:	3b03      	subs	r3, #3
 8002f72:	e000      	b.n	8002f76 <NVIC_EncodePriority+0x32>
 8002f74:	2300      	movs	r3, #0
 8002f76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f78:	f04f 32ff 	mov.w	r2, #4294967295
 8002f7c:	69bb      	ldr	r3, [r7, #24]
 8002f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f82:	43da      	mvns	r2, r3
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	401a      	ands	r2, r3
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f8c:	f04f 31ff 	mov.w	r1, #4294967295
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	fa01 f303 	lsl.w	r3, r1, r3
 8002f96:	43d9      	mvns	r1, r3
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f9c:	4313      	orrs	r3, r2
         );
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	3724      	adds	r7, #36	; 0x24
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa8:	4770      	bx	lr

08002faa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002faa:	b580      	push	{r7, lr}
 8002fac:	b082      	sub	sp, #8
 8002fae:	af00      	add	r7, sp, #0
 8002fb0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	f7ff ff4c 	bl	8002e50 <__NVIC_SetPriorityGrouping>
}
 8002fb8:	bf00      	nop
 8002fba:	3708      	adds	r7, #8
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}

08002fc0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b086      	sub	sp, #24
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	60b9      	str	r1, [r7, #8]
 8002fca:	607a      	str	r2, [r7, #4]
 8002fcc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002fd2:	f7ff ff61 	bl	8002e98 <__NVIC_GetPriorityGrouping>
 8002fd6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002fd8:	687a      	ldr	r2, [r7, #4]
 8002fda:	68b9      	ldr	r1, [r7, #8]
 8002fdc:	6978      	ldr	r0, [r7, #20]
 8002fde:	f7ff ffb1 	bl	8002f44 <NVIC_EncodePriority>
 8002fe2:	4602      	mov	r2, r0
 8002fe4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fe8:	4611      	mov	r1, r2
 8002fea:	4618      	mov	r0, r3
 8002fec:	f7ff ff80 	bl	8002ef0 <__NVIC_SetPriority>
}
 8002ff0:	bf00      	nop
 8002ff2:	3718      	adds	r7, #24
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}

08002ff8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b082      	sub	sp, #8
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	4603      	mov	r3, r0
 8003000:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003002:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003006:	4618      	mov	r0, r3
 8003008:	f7ff ff54 	bl	8002eb4 <__NVIC_EnableIRQ>
}
 800300c:	bf00      	nop
 800300e:	3708      	adds	r7, #8
 8003010:	46bd      	mov	sp, r7
 8003012:	bd80      	pop	{r7, pc}

08003014 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003014:	b480      	push	{r7}
 8003016:	b089      	sub	sp, #36	; 0x24
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
 800301c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800301e:	2300      	movs	r3, #0
 8003020:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003022:	2300      	movs	r3, #0
 8003024:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003026:	2300      	movs	r3, #0
 8003028:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800302a:	2300      	movs	r3, #0
 800302c:	61fb      	str	r3, [r7, #28]
 800302e:	e16b      	b.n	8003308 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003030:	2201      	movs	r2, #1
 8003032:	69fb      	ldr	r3, [r7, #28]
 8003034:	fa02 f303 	lsl.w	r3, r2, r3
 8003038:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	697a      	ldr	r2, [r7, #20]
 8003040:	4013      	ands	r3, r2
 8003042:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003044:	693a      	ldr	r2, [r7, #16]
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	429a      	cmp	r2, r3
 800304a:	f040 815a 	bne.w	8003302 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	2b01      	cmp	r3, #1
 8003054:	d00b      	beq.n	800306e <HAL_GPIO_Init+0x5a>
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	2b02      	cmp	r3, #2
 800305c:	d007      	beq.n	800306e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003062:	2b11      	cmp	r3, #17
 8003064:	d003      	beq.n	800306e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	2b12      	cmp	r3, #18
 800306c:	d130      	bne.n	80030d0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	689b      	ldr	r3, [r3, #8]
 8003072:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003074:	69fb      	ldr	r3, [r7, #28]
 8003076:	005b      	lsls	r3, r3, #1
 8003078:	2203      	movs	r2, #3
 800307a:	fa02 f303 	lsl.w	r3, r2, r3
 800307e:	43db      	mvns	r3, r3
 8003080:	69ba      	ldr	r2, [r7, #24]
 8003082:	4013      	ands	r3, r2
 8003084:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	68da      	ldr	r2, [r3, #12]
 800308a:	69fb      	ldr	r3, [r7, #28]
 800308c:	005b      	lsls	r3, r3, #1
 800308e:	fa02 f303 	lsl.w	r3, r2, r3
 8003092:	69ba      	ldr	r2, [r7, #24]
 8003094:	4313      	orrs	r3, r2
 8003096:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	69ba      	ldr	r2, [r7, #24]
 800309c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80030a4:	2201      	movs	r2, #1
 80030a6:	69fb      	ldr	r3, [r7, #28]
 80030a8:	fa02 f303 	lsl.w	r3, r2, r3
 80030ac:	43db      	mvns	r3, r3
 80030ae:	69ba      	ldr	r2, [r7, #24]
 80030b0:	4013      	ands	r3, r2
 80030b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	091b      	lsrs	r3, r3, #4
 80030ba:	f003 0201 	and.w	r2, r3, #1
 80030be:	69fb      	ldr	r3, [r7, #28]
 80030c0:	fa02 f303 	lsl.w	r3, r2, r3
 80030c4:	69ba      	ldr	r2, [r7, #24]
 80030c6:	4313      	orrs	r3, r2
 80030c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	69ba      	ldr	r2, [r7, #24]
 80030ce:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	68db      	ldr	r3, [r3, #12]
 80030d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80030d6:	69fb      	ldr	r3, [r7, #28]
 80030d8:	005b      	lsls	r3, r3, #1
 80030da:	2203      	movs	r2, #3
 80030dc:	fa02 f303 	lsl.w	r3, r2, r3
 80030e0:	43db      	mvns	r3, r3
 80030e2:	69ba      	ldr	r2, [r7, #24]
 80030e4:	4013      	ands	r3, r2
 80030e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	689a      	ldr	r2, [r3, #8]
 80030ec:	69fb      	ldr	r3, [r7, #28]
 80030ee:	005b      	lsls	r3, r3, #1
 80030f0:	fa02 f303 	lsl.w	r3, r2, r3
 80030f4:	69ba      	ldr	r2, [r7, #24]
 80030f6:	4313      	orrs	r3, r2
 80030f8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	69ba      	ldr	r2, [r7, #24]
 80030fe:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	2b02      	cmp	r3, #2
 8003106:	d003      	beq.n	8003110 <HAL_GPIO_Init+0xfc>
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	2b12      	cmp	r3, #18
 800310e:	d123      	bne.n	8003158 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003110:	69fb      	ldr	r3, [r7, #28]
 8003112:	08da      	lsrs	r2, r3, #3
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	3208      	adds	r2, #8
 8003118:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800311c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800311e:	69fb      	ldr	r3, [r7, #28]
 8003120:	f003 0307 	and.w	r3, r3, #7
 8003124:	009b      	lsls	r3, r3, #2
 8003126:	220f      	movs	r2, #15
 8003128:	fa02 f303 	lsl.w	r3, r2, r3
 800312c:	43db      	mvns	r3, r3
 800312e:	69ba      	ldr	r2, [r7, #24]
 8003130:	4013      	ands	r3, r2
 8003132:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	691a      	ldr	r2, [r3, #16]
 8003138:	69fb      	ldr	r3, [r7, #28]
 800313a:	f003 0307 	and.w	r3, r3, #7
 800313e:	009b      	lsls	r3, r3, #2
 8003140:	fa02 f303 	lsl.w	r3, r2, r3
 8003144:	69ba      	ldr	r2, [r7, #24]
 8003146:	4313      	orrs	r3, r2
 8003148:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800314a:	69fb      	ldr	r3, [r7, #28]
 800314c:	08da      	lsrs	r2, r3, #3
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	3208      	adds	r2, #8
 8003152:	69b9      	ldr	r1, [r7, #24]
 8003154:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800315e:	69fb      	ldr	r3, [r7, #28]
 8003160:	005b      	lsls	r3, r3, #1
 8003162:	2203      	movs	r2, #3
 8003164:	fa02 f303 	lsl.w	r3, r2, r3
 8003168:	43db      	mvns	r3, r3
 800316a:	69ba      	ldr	r2, [r7, #24]
 800316c:	4013      	ands	r3, r2
 800316e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	f003 0203 	and.w	r2, r3, #3
 8003178:	69fb      	ldr	r3, [r7, #28]
 800317a:	005b      	lsls	r3, r3, #1
 800317c:	fa02 f303 	lsl.w	r3, r2, r3
 8003180:	69ba      	ldr	r2, [r7, #24]
 8003182:	4313      	orrs	r3, r2
 8003184:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	69ba      	ldr	r2, [r7, #24]
 800318a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003194:	2b00      	cmp	r3, #0
 8003196:	f000 80b4 	beq.w	8003302 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800319a:	2300      	movs	r3, #0
 800319c:	60fb      	str	r3, [r7, #12]
 800319e:	4b5f      	ldr	r3, [pc, #380]	; (800331c <HAL_GPIO_Init+0x308>)
 80031a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031a2:	4a5e      	ldr	r2, [pc, #376]	; (800331c <HAL_GPIO_Init+0x308>)
 80031a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80031a8:	6453      	str	r3, [r2, #68]	; 0x44
 80031aa:	4b5c      	ldr	r3, [pc, #368]	; (800331c <HAL_GPIO_Init+0x308>)
 80031ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031b2:	60fb      	str	r3, [r7, #12]
 80031b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80031b6:	4a5a      	ldr	r2, [pc, #360]	; (8003320 <HAL_GPIO_Init+0x30c>)
 80031b8:	69fb      	ldr	r3, [r7, #28]
 80031ba:	089b      	lsrs	r3, r3, #2
 80031bc:	3302      	adds	r3, #2
 80031be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80031c4:	69fb      	ldr	r3, [r7, #28]
 80031c6:	f003 0303 	and.w	r3, r3, #3
 80031ca:	009b      	lsls	r3, r3, #2
 80031cc:	220f      	movs	r2, #15
 80031ce:	fa02 f303 	lsl.w	r3, r2, r3
 80031d2:	43db      	mvns	r3, r3
 80031d4:	69ba      	ldr	r2, [r7, #24]
 80031d6:	4013      	ands	r3, r2
 80031d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	4a51      	ldr	r2, [pc, #324]	; (8003324 <HAL_GPIO_Init+0x310>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d02b      	beq.n	800323a <HAL_GPIO_Init+0x226>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	4a50      	ldr	r2, [pc, #320]	; (8003328 <HAL_GPIO_Init+0x314>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d025      	beq.n	8003236 <HAL_GPIO_Init+0x222>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	4a4f      	ldr	r2, [pc, #316]	; (800332c <HAL_GPIO_Init+0x318>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d01f      	beq.n	8003232 <HAL_GPIO_Init+0x21e>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	4a4e      	ldr	r2, [pc, #312]	; (8003330 <HAL_GPIO_Init+0x31c>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d019      	beq.n	800322e <HAL_GPIO_Init+0x21a>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	4a4d      	ldr	r2, [pc, #308]	; (8003334 <HAL_GPIO_Init+0x320>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d013      	beq.n	800322a <HAL_GPIO_Init+0x216>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	4a4c      	ldr	r2, [pc, #304]	; (8003338 <HAL_GPIO_Init+0x324>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d00d      	beq.n	8003226 <HAL_GPIO_Init+0x212>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	4a4b      	ldr	r2, [pc, #300]	; (800333c <HAL_GPIO_Init+0x328>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d007      	beq.n	8003222 <HAL_GPIO_Init+0x20e>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	4a4a      	ldr	r2, [pc, #296]	; (8003340 <HAL_GPIO_Init+0x32c>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d101      	bne.n	800321e <HAL_GPIO_Init+0x20a>
 800321a:	2307      	movs	r3, #7
 800321c:	e00e      	b.n	800323c <HAL_GPIO_Init+0x228>
 800321e:	2308      	movs	r3, #8
 8003220:	e00c      	b.n	800323c <HAL_GPIO_Init+0x228>
 8003222:	2306      	movs	r3, #6
 8003224:	e00a      	b.n	800323c <HAL_GPIO_Init+0x228>
 8003226:	2305      	movs	r3, #5
 8003228:	e008      	b.n	800323c <HAL_GPIO_Init+0x228>
 800322a:	2304      	movs	r3, #4
 800322c:	e006      	b.n	800323c <HAL_GPIO_Init+0x228>
 800322e:	2303      	movs	r3, #3
 8003230:	e004      	b.n	800323c <HAL_GPIO_Init+0x228>
 8003232:	2302      	movs	r3, #2
 8003234:	e002      	b.n	800323c <HAL_GPIO_Init+0x228>
 8003236:	2301      	movs	r3, #1
 8003238:	e000      	b.n	800323c <HAL_GPIO_Init+0x228>
 800323a:	2300      	movs	r3, #0
 800323c:	69fa      	ldr	r2, [r7, #28]
 800323e:	f002 0203 	and.w	r2, r2, #3
 8003242:	0092      	lsls	r2, r2, #2
 8003244:	4093      	lsls	r3, r2
 8003246:	69ba      	ldr	r2, [r7, #24]
 8003248:	4313      	orrs	r3, r2
 800324a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800324c:	4934      	ldr	r1, [pc, #208]	; (8003320 <HAL_GPIO_Init+0x30c>)
 800324e:	69fb      	ldr	r3, [r7, #28]
 8003250:	089b      	lsrs	r3, r3, #2
 8003252:	3302      	adds	r3, #2
 8003254:	69ba      	ldr	r2, [r7, #24]
 8003256:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800325a:	4b3a      	ldr	r3, [pc, #232]	; (8003344 <HAL_GPIO_Init+0x330>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	43db      	mvns	r3, r3
 8003264:	69ba      	ldr	r2, [r7, #24]
 8003266:	4013      	ands	r3, r2
 8003268:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003272:	2b00      	cmp	r3, #0
 8003274:	d003      	beq.n	800327e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003276:	69ba      	ldr	r2, [r7, #24]
 8003278:	693b      	ldr	r3, [r7, #16]
 800327a:	4313      	orrs	r3, r2
 800327c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800327e:	4a31      	ldr	r2, [pc, #196]	; (8003344 <HAL_GPIO_Init+0x330>)
 8003280:	69bb      	ldr	r3, [r7, #24]
 8003282:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003284:	4b2f      	ldr	r3, [pc, #188]	; (8003344 <HAL_GPIO_Init+0x330>)
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	43db      	mvns	r3, r3
 800328e:	69ba      	ldr	r2, [r7, #24]
 8003290:	4013      	ands	r3, r2
 8003292:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800329c:	2b00      	cmp	r3, #0
 800329e:	d003      	beq.n	80032a8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80032a0:	69ba      	ldr	r2, [r7, #24]
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	4313      	orrs	r3, r2
 80032a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80032a8:	4a26      	ldr	r2, [pc, #152]	; (8003344 <HAL_GPIO_Init+0x330>)
 80032aa:	69bb      	ldr	r3, [r7, #24]
 80032ac:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80032ae:	4b25      	ldr	r3, [pc, #148]	; (8003344 <HAL_GPIO_Init+0x330>)
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032b4:	693b      	ldr	r3, [r7, #16]
 80032b6:	43db      	mvns	r3, r3
 80032b8:	69ba      	ldr	r2, [r7, #24]
 80032ba:	4013      	ands	r3, r2
 80032bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d003      	beq.n	80032d2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80032ca:	69ba      	ldr	r2, [r7, #24]
 80032cc:	693b      	ldr	r3, [r7, #16]
 80032ce:	4313      	orrs	r3, r2
 80032d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80032d2:	4a1c      	ldr	r2, [pc, #112]	; (8003344 <HAL_GPIO_Init+0x330>)
 80032d4:	69bb      	ldr	r3, [r7, #24]
 80032d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80032d8:	4b1a      	ldr	r3, [pc, #104]	; (8003344 <HAL_GPIO_Init+0x330>)
 80032da:	68db      	ldr	r3, [r3, #12]
 80032dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	43db      	mvns	r3, r3
 80032e2:	69ba      	ldr	r2, [r7, #24]
 80032e4:	4013      	ands	r3, r2
 80032e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d003      	beq.n	80032fc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80032f4:	69ba      	ldr	r2, [r7, #24]
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	4313      	orrs	r3, r2
 80032fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80032fc:	4a11      	ldr	r2, [pc, #68]	; (8003344 <HAL_GPIO_Init+0x330>)
 80032fe:	69bb      	ldr	r3, [r7, #24]
 8003300:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003302:	69fb      	ldr	r3, [r7, #28]
 8003304:	3301      	adds	r3, #1
 8003306:	61fb      	str	r3, [r7, #28]
 8003308:	69fb      	ldr	r3, [r7, #28]
 800330a:	2b0f      	cmp	r3, #15
 800330c:	f67f ae90 	bls.w	8003030 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003310:	bf00      	nop
 8003312:	3724      	adds	r7, #36	; 0x24
 8003314:	46bd      	mov	sp, r7
 8003316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331a:	4770      	bx	lr
 800331c:	40023800 	.word	0x40023800
 8003320:	40013800 	.word	0x40013800
 8003324:	40020000 	.word	0x40020000
 8003328:	40020400 	.word	0x40020400
 800332c:	40020800 	.word	0x40020800
 8003330:	40020c00 	.word	0x40020c00
 8003334:	40021000 	.word	0x40021000
 8003338:	40021400 	.word	0x40021400
 800333c:	40021800 	.word	0x40021800
 8003340:	40021c00 	.word	0x40021c00
 8003344:	40013c00 	.word	0x40013c00

08003348 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003348:	b480      	push	{r7}
 800334a:	b085      	sub	sp, #20
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
 8003350:	460b      	mov	r3, r1
 8003352:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	691a      	ldr	r2, [r3, #16]
 8003358:	887b      	ldrh	r3, [r7, #2]
 800335a:	4013      	ands	r3, r2
 800335c:	2b00      	cmp	r3, #0
 800335e:	d002      	beq.n	8003366 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003360:	2301      	movs	r3, #1
 8003362:	73fb      	strb	r3, [r7, #15]
 8003364:	e001      	b.n	800336a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003366:	2300      	movs	r3, #0
 8003368:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800336a:	7bfb      	ldrb	r3, [r7, #15]
}
 800336c:	4618      	mov	r0, r3
 800336e:	3714      	adds	r7, #20
 8003370:	46bd      	mov	sp, r7
 8003372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003376:	4770      	bx	lr

08003378 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003378:	b480      	push	{r7}
 800337a:	b083      	sub	sp, #12
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
 8003380:	460b      	mov	r3, r1
 8003382:	807b      	strh	r3, [r7, #2]
 8003384:	4613      	mov	r3, r2
 8003386:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003388:	787b      	ldrb	r3, [r7, #1]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d003      	beq.n	8003396 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800338e:	887a      	ldrh	r2, [r7, #2]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003394:	e003      	b.n	800339e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003396:	887b      	ldrh	r3, [r7, #2]
 8003398:	041a      	lsls	r2, r3, #16
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	619a      	str	r2, [r3, #24]
}
 800339e:	bf00      	nop
 80033a0:	370c      	adds	r7, #12
 80033a2:	46bd      	mov	sp, r7
 80033a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a8:	4770      	bx	lr

080033aa <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80033aa:	b480      	push	{r7}
 80033ac:	b083      	sub	sp, #12
 80033ae:	af00      	add	r7, sp, #0
 80033b0:	6078      	str	r0, [r7, #4]
 80033b2:	460b      	mov	r3, r1
 80033b4:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	695a      	ldr	r2, [r3, #20]
 80033ba:	887b      	ldrh	r3, [r7, #2]
 80033bc:	401a      	ands	r2, r3
 80033be:	887b      	ldrh	r3, [r7, #2]
 80033c0:	429a      	cmp	r2, r3
 80033c2:	d104      	bne.n	80033ce <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80033c4:	887b      	ldrh	r3, [r7, #2]
 80033c6:	041a      	lsls	r2, r3, #16
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80033cc:	e002      	b.n	80033d4 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80033ce:	887a      	ldrh	r2, [r7, #2]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	619a      	str	r2, [r3, #24]
}
 80033d4:	bf00      	nop
 80033d6:	370c      	adds	r7, #12
 80033d8:	46bd      	mov	sp, r7
 80033da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033de:	4770      	bx	lr

080033e0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b082      	sub	sp, #8
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	4603      	mov	r3, r0
 80033e8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80033ea:	4b08      	ldr	r3, [pc, #32]	; (800340c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80033ec:	695a      	ldr	r2, [r3, #20]
 80033ee:	88fb      	ldrh	r3, [r7, #6]
 80033f0:	4013      	ands	r3, r2
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d006      	beq.n	8003404 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80033f6:	4a05      	ldr	r2, [pc, #20]	; (800340c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80033f8:	88fb      	ldrh	r3, [r7, #6]
 80033fa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80033fc:	88fb      	ldrh	r3, [r7, #6]
 80033fe:	4618      	mov	r0, r3
 8003400:	f000 f806 	bl	8003410 <HAL_GPIO_EXTI_Callback>
  }
}
 8003404:	bf00      	nop
 8003406:	3708      	adds	r7, #8
 8003408:	46bd      	mov	sp, r7
 800340a:	bd80      	pop	{r7, pc}
 800340c:	40013c00 	.word	0x40013c00

08003410 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003410:	b480      	push	{r7}
 8003412:	b083      	sub	sp, #12
 8003414:	af00      	add	r7, sp, #0
 8003416:	4603      	mov	r3, r0
 8003418:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800341a:	bf00      	nop
 800341c:	370c      	adds	r7, #12
 800341e:	46bd      	mov	sp, r7
 8003420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003424:	4770      	bx	lr
	...

08003428 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b086      	sub	sp, #24
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d101      	bne.n	800343a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003436:	2301      	movs	r3, #1
 8003438:	e25b      	b.n	80038f2 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f003 0301 	and.w	r3, r3, #1
 8003442:	2b00      	cmp	r3, #0
 8003444:	d075      	beq.n	8003532 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003446:	4ba3      	ldr	r3, [pc, #652]	; (80036d4 <HAL_RCC_OscConfig+0x2ac>)
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	f003 030c 	and.w	r3, r3, #12
 800344e:	2b04      	cmp	r3, #4
 8003450:	d00c      	beq.n	800346c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003452:	4ba0      	ldr	r3, [pc, #640]	; (80036d4 <HAL_RCC_OscConfig+0x2ac>)
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800345a:	2b08      	cmp	r3, #8
 800345c:	d112      	bne.n	8003484 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800345e:	4b9d      	ldr	r3, [pc, #628]	; (80036d4 <HAL_RCC_OscConfig+0x2ac>)
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003466:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800346a:	d10b      	bne.n	8003484 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800346c:	4b99      	ldr	r3, [pc, #612]	; (80036d4 <HAL_RCC_OscConfig+0x2ac>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003474:	2b00      	cmp	r3, #0
 8003476:	d05b      	beq.n	8003530 <HAL_RCC_OscConfig+0x108>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d157      	bne.n	8003530 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003480:	2301      	movs	r3, #1
 8003482:	e236      	b.n	80038f2 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800348c:	d106      	bne.n	800349c <HAL_RCC_OscConfig+0x74>
 800348e:	4b91      	ldr	r3, [pc, #580]	; (80036d4 <HAL_RCC_OscConfig+0x2ac>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a90      	ldr	r2, [pc, #576]	; (80036d4 <HAL_RCC_OscConfig+0x2ac>)
 8003494:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003498:	6013      	str	r3, [r2, #0]
 800349a:	e01d      	b.n	80034d8 <HAL_RCC_OscConfig+0xb0>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80034a4:	d10c      	bne.n	80034c0 <HAL_RCC_OscConfig+0x98>
 80034a6:	4b8b      	ldr	r3, [pc, #556]	; (80036d4 <HAL_RCC_OscConfig+0x2ac>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a8a      	ldr	r2, [pc, #552]	; (80036d4 <HAL_RCC_OscConfig+0x2ac>)
 80034ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80034b0:	6013      	str	r3, [r2, #0]
 80034b2:	4b88      	ldr	r3, [pc, #544]	; (80036d4 <HAL_RCC_OscConfig+0x2ac>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a87      	ldr	r2, [pc, #540]	; (80036d4 <HAL_RCC_OscConfig+0x2ac>)
 80034b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034bc:	6013      	str	r3, [r2, #0]
 80034be:	e00b      	b.n	80034d8 <HAL_RCC_OscConfig+0xb0>
 80034c0:	4b84      	ldr	r3, [pc, #528]	; (80036d4 <HAL_RCC_OscConfig+0x2ac>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a83      	ldr	r2, [pc, #524]	; (80036d4 <HAL_RCC_OscConfig+0x2ac>)
 80034c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034ca:	6013      	str	r3, [r2, #0]
 80034cc:	4b81      	ldr	r3, [pc, #516]	; (80036d4 <HAL_RCC_OscConfig+0x2ac>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a80      	ldr	r2, [pc, #512]	; (80036d4 <HAL_RCC_OscConfig+0x2ac>)
 80034d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d013      	beq.n	8003508 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034e0:	f7fe ff32 	bl	8002348 <HAL_GetTick>
 80034e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034e6:	e008      	b.n	80034fa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034e8:	f7fe ff2e 	bl	8002348 <HAL_GetTick>
 80034ec:	4602      	mov	r2, r0
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	1ad3      	subs	r3, r2, r3
 80034f2:	2b64      	cmp	r3, #100	; 0x64
 80034f4:	d901      	bls.n	80034fa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80034f6:	2303      	movs	r3, #3
 80034f8:	e1fb      	b.n	80038f2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034fa:	4b76      	ldr	r3, [pc, #472]	; (80036d4 <HAL_RCC_OscConfig+0x2ac>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003502:	2b00      	cmp	r3, #0
 8003504:	d0f0      	beq.n	80034e8 <HAL_RCC_OscConfig+0xc0>
 8003506:	e014      	b.n	8003532 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003508:	f7fe ff1e 	bl	8002348 <HAL_GetTick>
 800350c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800350e:	e008      	b.n	8003522 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003510:	f7fe ff1a 	bl	8002348 <HAL_GetTick>
 8003514:	4602      	mov	r2, r0
 8003516:	693b      	ldr	r3, [r7, #16]
 8003518:	1ad3      	subs	r3, r2, r3
 800351a:	2b64      	cmp	r3, #100	; 0x64
 800351c:	d901      	bls.n	8003522 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800351e:	2303      	movs	r3, #3
 8003520:	e1e7      	b.n	80038f2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003522:	4b6c      	ldr	r3, [pc, #432]	; (80036d4 <HAL_RCC_OscConfig+0x2ac>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800352a:	2b00      	cmp	r3, #0
 800352c:	d1f0      	bne.n	8003510 <HAL_RCC_OscConfig+0xe8>
 800352e:	e000      	b.n	8003532 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003530:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f003 0302 	and.w	r3, r3, #2
 800353a:	2b00      	cmp	r3, #0
 800353c:	d063      	beq.n	8003606 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800353e:	4b65      	ldr	r3, [pc, #404]	; (80036d4 <HAL_RCC_OscConfig+0x2ac>)
 8003540:	689b      	ldr	r3, [r3, #8]
 8003542:	f003 030c 	and.w	r3, r3, #12
 8003546:	2b00      	cmp	r3, #0
 8003548:	d00b      	beq.n	8003562 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800354a:	4b62      	ldr	r3, [pc, #392]	; (80036d4 <HAL_RCC_OscConfig+0x2ac>)
 800354c:	689b      	ldr	r3, [r3, #8]
 800354e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003552:	2b08      	cmp	r3, #8
 8003554:	d11c      	bne.n	8003590 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003556:	4b5f      	ldr	r3, [pc, #380]	; (80036d4 <HAL_RCC_OscConfig+0x2ac>)
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800355e:	2b00      	cmp	r3, #0
 8003560:	d116      	bne.n	8003590 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003562:	4b5c      	ldr	r3, [pc, #368]	; (80036d4 <HAL_RCC_OscConfig+0x2ac>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f003 0302 	and.w	r3, r3, #2
 800356a:	2b00      	cmp	r3, #0
 800356c:	d005      	beq.n	800357a <HAL_RCC_OscConfig+0x152>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	68db      	ldr	r3, [r3, #12]
 8003572:	2b01      	cmp	r3, #1
 8003574:	d001      	beq.n	800357a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	e1bb      	b.n	80038f2 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800357a:	4b56      	ldr	r3, [pc, #344]	; (80036d4 <HAL_RCC_OscConfig+0x2ac>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	691b      	ldr	r3, [r3, #16]
 8003586:	00db      	lsls	r3, r3, #3
 8003588:	4952      	ldr	r1, [pc, #328]	; (80036d4 <HAL_RCC_OscConfig+0x2ac>)
 800358a:	4313      	orrs	r3, r2
 800358c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800358e:	e03a      	b.n	8003606 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	68db      	ldr	r3, [r3, #12]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d020      	beq.n	80035da <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003598:	4b4f      	ldr	r3, [pc, #316]	; (80036d8 <HAL_RCC_OscConfig+0x2b0>)
 800359a:	2201      	movs	r2, #1
 800359c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800359e:	f7fe fed3 	bl	8002348 <HAL_GetTick>
 80035a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035a4:	e008      	b.n	80035b8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035a6:	f7fe fecf 	bl	8002348 <HAL_GetTick>
 80035aa:	4602      	mov	r2, r0
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	1ad3      	subs	r3, r2, r3
 80035b0:	2b02      	cmp	r3, #2
 80035b2:	d901      	bls.n	80035b8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80035b4:	2303      	movs	r3, #3
 80035b6:	e19c      	b.n	80038f2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035b8:	4b46      	ldr	r3, [pc, #280]	; (80036d4 <HAL_RCC_OscConfig+0x2ac>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f003 0302 	and.w	r3, r3, #2
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d0f0      	beq.n	80035a6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035c4:	4b43      	ldr	r3, [pc, #268]	; (80036d4 <HAL_RCC_OscConfig+0x2ac>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	691b      	ldr	r3, [r3, #16]
 80035d0:	00db      	lsls	r3, r3, #3
 80035d2:	4940      	ldr	r1, [pc, #256]	; (80036d4 <HAL_RCC_OscConfig+0x2ac>)
 80035d4:	4313      	orrs	r3, r2
 80035d6:	600b      	str	r3, [r1, #0]
 80035d8:	e015      	b.n	8003606 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035da:	4b3f      	ldr	r3, [pc, #252]	; (80036d8 <HAL_RCC_OscConfig+0x2b0>)
 80035dc:	2200      	movs	r2, #0
 80035de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035e0:	f7fe feb2 	bl	8002348 <HAL_GetTick>
 80035e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035e6:	e008      	b.n	80035fa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035e8:	f7fe feae 	bl	8002348 <HAL_GetTick>
 80035ec:	4602      	mov	r2, r0
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	1ad3      	subs	r3, r2, r3
 80035f2:	2b02      	cmp	r3, #2
 80035f4:	d901      	bls.n	80035fa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80035f6:	2303      	movs	r3, #3
 80035f8:	e17b      	b.n	80038f2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035fa:	4b36      	ldr	r3, [pc, #216]	; (80036d4 <HAL_RCC_OscConfig+0x2ac>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f003 0302 	and.w	r3, r3, #2
 8003602:	2b00      	cmp	r3, #0
 8003604:	d1f0      	bne.n	80035e8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f003 0308 	and.w	r3, r3, #8
 800360e:	2b00      	cmp	r3, #0
 8003610:	d030      	beq.n	8003674 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	695b      	ldr	r3, [r3, #20]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d016      	beq.n	8003648 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800361a:	4b30      	ldr	r3, [pc, #192]	; (80036dc <HAL_RCC_OscConfig+0x2b4>)
 800361c:	2201      	movs	r2, #1
 800361e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003620:	f7fe fe92 	bl	8002348 <HAL_GetTick>
 8003624:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003626:	e008      	b.n	800363a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003628:	f7fe fe8e 	bl	8002348 <HAL_GetTick>
 800362c:	4602      	mov	r2, r0
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	1ad3      	subs	r3, r2, r3
 8003632:	2b02      	cmp	r3, #2
 8003634:	d901      	bls.n	800363a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003636:	2303      	movs	r3, #3
 8003638:	e15b      	b.n	80038f2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800363a:	4b26      	ldr	r3, [pc, #152]	; (80036d4 <HAL_RCC_OscConfig+0x2ac>)
 800363c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800363e:	f003 0302 	and.w	r3, r3, #2
 8003642:	2b00      	cmp	r3, #0
 8003644:	d0f0      	beq.n	8003628 <HAL_RCC_OscConfig+0x200>
 8003646:	e015      	b.n	8003674 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003648:	4b24      	ldr	r3, [pc, #144]	; (80036dc <HAL_RCC_OscConfig+0x2b4>)
 800364a:	2200      	movs	r2, #0
 800364c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800364e:	f7fe fe7b 	bl	8002348 <HAL_GetTick>
 8003652:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003654:	e008      	b.n	8003668 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003656:	f7fe fe77 	bl	8002348 <HAL_GetTick>
 800365a:	4602      	mov	r2, r0
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	1ad3      	subs	r3, r2, r3
 8003660:	2b02      	cmp	r3, #2
 8003662:	d901      	bls.n	8003668 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003664:	2303      	movs	r3, #3
 8003666:	e144      	b.n	80038f2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003668:	4b1a      	ldr	r3, [pc, #104]	; (80036d4 <HAL_RCC_OscConfig+0x2ac>)
 800366a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800366c:	f003 0302 	and.w	r3, r3, #2
 8003670:	2b00      	cmp	r3, #0
 8003672:	d1f0      	bne.n	8003656 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f003 0304 	and.w	r3, r3, #4
 800367c:	2b00      	cmp	r3, #0
 800367e:	f000 80a0 	beq.w	80037c2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003682:	2300      	movs	r3, #0
 8003684:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003686:	4b13      	ldr	r3, [pc, #76]	; (80036d4 <HAL_RCC_OscConfig+0x2ac>)
 8003688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800368a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800368e:	2b00      	cmp	r3, #0
 8003690:	d10f      	bne.n	80036b2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003692:	2300      	movs	r3, #0
 8003694:	60bb      	str	r3, [r7, #8]
 8003696:	4b0f      	ldr	r3, [pc, #60]	; (80036d4 <HAL_RCC_OscConfig+0x2ac>)
 8003698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800369a:	4a0e      	ldr	r2, [pc, #56]	; (80036d4 <HAL_RCC_OscConfig+0x2ac>)
 800369c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036a0:	6413      	str	r3, [r2, #64]	; 0x40
 80036a2:	4b0c      	ldr	r3, [pc, #48]	; (80036d4 <HAL_RCC_OscConfig+0x2ac>)
 80036a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036aa:	60bb      	str	r3, [r7, #8]
 80036ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036ae:	2301      	movs	r3, #1
 80036b0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036b2:	4b0b      	ldr	r3, [pc, #44]	; (80036e0 <HAL_RCC_OscConfig+0x2b8>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d121      	bne.n	8003702 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80036be:	4b08      	ldr	r3, [pc, #32]	; (80036e0 <HAL_RCC_OscConfig+0x2b8>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a07      	ldr	r2, [pc, #28]	; (80036e0 <HAL_RCC_OscConfig+0x2b8>)
 80036c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036ca:	f7fe fe3d 	bl	8002348 <HAL_GetTick>
 80036ce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036d0:	e011      	b.n	80036f6 <HAL_RCC_OscConfig+0x2ce>
 80036d2:	bf00      	nop
 80036d4:	40023800 	.word	0x40023800
 80036d8:	42470000 	.word	0x42470000
 80036dc:	42470e80 	.word	0x42470e80
 80036e0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036e4:	f7fe fe30 	bl	8002348 <HAL_GetTick>
 80036e8:	4602      	mov	r2, r0
 80036ea:	693b      	ldr	r3, [r7, #16]
 80036ec:	1ad3      	subs	r3, r2, r3
 80036ee:	2b02      	cmp	r3, #2
 80036f0:	d901      	bls.n	80036f6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80036f2:	2303      	movs	r3, #3
 80036f4:	e0fd      	b.n	80038f2 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036f6:	4b81      	ldr	r3, [pc, #516]	; (80038fc <HAL_RCC_OscConfig+0x4d4>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d0f0      	beq.n	80036e4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	689b      	ldr	r3, [r3, #8]
 8003706:	2b01      	cmp	r3, #1
 8003708:	d106      	bne.n	8003718 <HAL_RCC_OscConfig+0x2f0>
 800370a:	4b7d      	ldr	r3, [pc, #500]	; (8003900 <HAL_RCC_OscConfig+0x4d8>)
 800370c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800370e:	4a7c      	ldr	r2, [pc, #496]	; (8003900 <HAL_RCC_OscConfig+0x4d8>)
 8003710:	f043 0301 	orr.w	r3, r3, #1
 8003714:	6713      	str	r3, [r2, #112]	; 0x70
 8003716:	e01c      	b.n	8003752 <HAL_RCC_OscConfig+0x32a>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	2b05      	cmp	r3, #5
 800371e:	d10c      	bne.n	800373a <HAL_RCC_OscConfig+0x312>
 8003720:	4b77      	ldr	r3, [pc, #476]	; (8003900 <HAL_RCC_OscConfig+0x4d8>)
 8003722:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003724:	4a76      	ldr	r2, [pc, #472]	; (8003900 <HAL_RCC_OscConfig+0x4d8>)
 8003726:	f043 0304 	orr.w	r3, r3, #4
 800372a:	6713      	str	r3, [r2, #112]	; 0x70
 800372c:	4b74      	ldr	r3, [pc, #464]	; (8003900 <HAL_RCC_OscConfig+0x4d8>)
 800372e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003730:	4a73      	ldr	r2, [pc, #460]	; (8003900 <HAL_RCC_OscConfig+0x4d8>)
 8003732:	f043 0301 	orr.w	r3, r3, #1
 8003736:	6713      	str	r3, [r2, #112]	; 0x70
 8003738:	e00b      	b.n	8003752 <HAL_RCC_OscConfig+0x32a>
 800373a:	4b71      	ldr	r3, [pc, #452]	; (8003900 <HAL_RCC_OscConfig+0x4d8>)
 800373c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800373e:	4a70      	ldr	r2, [pc, #448]	; (8003900 <HAL_RCC_OscConfig+0x4d8>)
 8003740:	f023 0301 	bic.w	r3, r3, #1
 8003744:	6713      	str	r3, [r2, #112]	; 0x70
 8003746:	4b6e      	ldr	r3, [pc, #440]	; (8003900 <HAL_RCC_OscConfig+0x4d8>)
 8003748:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800374a:	4a6d      	ldr	r2, [pc, #436]	; (8003900 <HAL_RCC_OscConfig+0x4d8>)
 800374c:	f023 0304 	bic.w	r3, r3, #4
 8003750:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d015      	beq.n	8003786 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800375a:	f7fe fdf5 	bl	8002348 <HAL_GetTick>
 800375e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003760:	e00a      	b.n	8003778 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003762:	f7fe fdf1 	bl	8002348 <HAL_GetTick>
 8003766:	4602      	mov	r2, r0
 8003768:	693b      	ldr	r3, [r7, #16]
 800376a:	1ad3      	subs	r3, r2, r3
 800376c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003770:	4293      	cmp	r3, r2
 8003772:	d901      	bls.n	8003778 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003774:	2303      	movs	r3, #3
 8003776:	e0bc      	b.n	80038f2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003778:	4b61      	ldr	r3, [pc, #388]	; (8003900 <HAL_RCC_OscConfig+0x4d8>)
 800377a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800377c:	f003 0302 	and.w	r3, r3, #2
 8003780:	2b00      	cmp	r3, #0
 8003782:	d0ee      	beq.n	8003762 <HAL_RCC_OscConfig+0x33a>
 8003784:	e014      	b.n	80037b0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003786:	f7fe fddf 	bl	8002348 <HAL_GetTick>
 800378a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800378c:	e00a      	b.n	80037a4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800378e:	f7fe fddb 	bl	8002348 <HAL_GetTick>
 8003792:	4602      	mov	r2, r0
 8003794:	693b      	ldr	r3, [r7, #16]
 8003796:	1ad3      	subs	r3, r2, r3
 8003798:	f241 3288 	movw	r2, #5000	; 0x1388
 800379c:	4293      	cmp	r3, r2
 800379e:	d901      	bls.n	80037a4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80037a0:	2303      	movs	r3, #3
 80037a2:	e0a6      	b.n	80038f2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037a4:	4b56      	ldr	r3, [pc, #344]	; (8003900 <HAL_RCC_OscConfig+0x4d8>)
 80037a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037a8:	f003 0302 	and.w	r3, r3, #2
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d1ee      	bne.n	800378e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80037b0:	7dfb      	ldrb	r3, [r7, #23]
 80037b2:	2b01      	cmp	r3, #1
 80037b4:	d105      	bne.n	80037c2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037b6:	4b52      	ldr	r3, [pc, #328]	; (8003900 <HAL_RCC_OscConfig+0x4d8>)
 80037b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ba:	4a51      	ldr	r2, [pc, #324]	; (8003900 <HAL_RCC_OscConfig+0x4d8>)
 80037bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037c0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	699b      	ldr	r3, [r3, #24]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	f000 8092 	beq.w	80038f0 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80037cc:	4b4c      	ldr	r3, [pc, #304]	; (8003900 <HAL_RCC_OscConfig+0x4d8>)
 80037ce:	689b      	ldr	r3, [r3, #8]
 80037d0:	f003 030c 	and.w	r3, r3, #12
 80037d4:	2b08      	cmp	r3, #8
 80037d6:	d05c      	beq.n	8003892 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	699b      	ldr	r3, [r3, #24]
 80037dc:	2b02      	cmp	r3, #2
 80037de:	d141      	bne.n	8003864 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037e0:	4b48      	ldr	r3, [pc, #288]	; (8003904 <HAL_RCC_OscConfig+0x4dc>)
 80037e2:	2200      	movs	r2, #0
 80037e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037e6:	f7fe fdaf 	bl	8002348 <HAL_GetTick>
 80037ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037ec:	e008      	b.n	8003800 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037ee:	f7fe fdab 	bl	8002348 <HAL_GetTick>
 80037f2:	4602      	mov	r2, r0
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	1ad3      	subs	r3, r2, r3
 80037f8:	2b02      	cmp	r3, #2
 80037fa:	d901      	bls.n	8003800 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80037fc:	2303      	movs	r3, #3
 80037fe:	e078      	b.n	80038f2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003800:	4b3f      	ldr	r3, [pc, #252]	; (8003900 <HAL_RCC_OscConfig+0x4d8>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003808:	2b00      	cmp	r3, #0
 800380a:	d1f0      	bne.n	80037ee <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	69da      	ldr	r2, [r3, #28]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6a1b      	ldr	r3, [r3, #32]
 8003814:	431a      	orrs	r2, r3
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800381a:	019b      	lsls	r3, r3, #6
 800381c:	431a      	orrs	r2, r3
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003822:	085b      	lsrs	r3, r3, #1
 8003824:	3b01      	subs	r3, #1
 8003826:	041b      	lsls	r3, r3, #16
 8003828:	431a      	orrs	r2, r3
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800382e:	061b      	lsls	r3, r3, #24
 8003830:	4933      	ldr	r1, [pc, #204]	; (8003900 <HAL_RCC_OscConfig+0x4d8>)
 8003832:	4313      	orrs	r3, r2
 8003834:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003836:	4b33      	ldr	r3, [pc, #204]	; (8003904 <HAL_RCC_OscConfig+0x4dc>)
 8003838:	2201      	movs	r2, #1
 800383a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800383c:	f7fe fd84 	bl	8002348 <HAL_GetTick>
 8003840:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003842:	e008      	b.n	8003856 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003844:	f7fe fd80 	bl	8002348 <HAL_GetTick>
 8003848:	4602      	mov	r2, r0
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	1ad3      	subs	r3, r2, r3
 800384e:	2b02      	cmp	r3, #2
 8003850:	d901      	bls.n	8003856 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003852:	2303      	movs	r3, #3
 8003854:	e04d      	b.n	80038f2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003856:	4b2a      	ldr	r3, [pc, #168]	; (8003900 <HAL_RCC_OscConfig+0x4d8>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800385e:	2b00      	cmp	r3, #0
 8003860:	d0f0      	beq.n	8003844 <HAL_RCC_OscConfig+0x41c>
 8003862:	e045      	b.n	80038f0 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003864:	4b27      	ldr	r3, [pc, #156]	; (8003904 <HAL_RCC_OscConfig+0x4dc>)
 8003866:	2200      	movs	r2, #0
 8003868:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800386a:	f7fe fd6d 	bl	8002348 <HAL_GetTick>
 800386e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003870:	e008      	b.n	8003884 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003872:	f7fe fd69 	bl	8002348 <HAL_GetTick>
 8003876:	4602      	mov	r2, r0
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	1ad3      	subs	r3, r2, r3
 800387c:	2b02      	cmp	r3, #2
 800387e:	d901      	bls.n	8003884 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003880:	2303      	movs	r3, #3
 8003882:	e036      	b.n	80038f2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003884:	4b1e      	ldr	r3, [pc, #120]	; (8003900 <HAL_RCC_OscConfig+0x4d8>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800388c:	2b00      	cmp	r3, #0
 800388e:	d1f0      	bne.n	8003872 <HAL_RCC_OscConfig+0x44a>
 8003890:	e02e      	b.n	80038f0 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	699b      	ldr	r3, [r3, #24]
 8003896:	2b01      	cmp	r3, #1
 8003898:	d101      	bne.n	800389e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	e029      	b.n	80038f2 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800389e:	4b18      	ldr	r3, [pc, #96]	; (8003900 <HAL_RCC_OscConfig+0x4d8>)
 80038a0:	689b      	ldr	r3, [r3, #8]
 80038a2:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	69db      	ldr	r3, [r3, #28]
 80038ae:	429a      	cmp	r2, r3
 80038b0:	d11c      	bne.n	80038ec <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038bc:	429a      	cmp	r2, r3
 80038be:	d115      	bne.n	80038ec <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80038c0:	68fa      	ldr	r2, [r7, #12]
 80038c2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80038c6:	4013      	ands	r3, r2
 80038c8:	687a      	ldr	r2, [r7, #4]
 80038ca:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d10d      	bne.n	80038ec <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80038da:	429a      	cmp	r2, r3
 80038dc:	d106      	bne.n	80038ec <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80038e8:	429a      	cmp	r2, r3
 80038ea:	d001      	beq.n	80038f0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80038ec:	2301      	movs	r3, #1
 80038ee:	e000      	b.n	80038f2 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80038f0:	2300      	movs	r3, #0
}
 80038f2:	4618      	mov	r0, r3
 80038f4:	3718      	adds	r7, #24
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}
 80038fa:	bf00      	nop
 80038fc:	40007000 	.word	0x40007000
 8003900:	40023800 	.word	0x40023800
 8003904:	42470060 	.word	0x42470060

08003908 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b084      	sub	sp, #16
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
 8003910:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d101      	bne.n	800391c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003918:	2301      	movs	r3, #1
 800391a:	e0cc      	b.n	8003ab6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800391c:	4b68      	ldr	r3, [pc, #416]	; (8003ac0 <HAL_RCC_ClockConfig+0x1b8>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f003 030f 	and.w	r3, r3, #15
 8003924:	683a      	ldr	r2, [r7, #0]
 8003926:	429a      	cmp	r2, r3
 8003928:	d90c      	bls.n	8003944 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800392a:	4b65      	ldr	r3, [pc, #404]	; (8003ac0 <HAL_RCC_ClockConfig+0x1b8>)
 800392c:	683a      	ldr	r2, [r7, #0]
 800392e:	b2d2      	uxtb	r2, r2
 8003930:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003932:	4b63      	ldr	r3, [pc, #396]	; (8003ac0 <HAL_RCC_ClockConfig+0x1b8>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f003 030f 	and.w	r3, r3, #15
 800393a:	683a      	ldr	r2, [r7, #0]
 800393c:	429a      	cmp	r2, r3
 800393e:	d001      	beq.n	8003944 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003940:	2301      	movs	r3, #1
 8003942:	e0b8      	b.n	8003ab6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f003 0302 	and.w	r3, r3, #2
 800394c:	2b00      	cmp	r3, #0
 800394e:	d020      	beq.n	8003992 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f003 0304 	and.w	r3, r3, #4
 8003958:	2b00      	cmp	r3, #0
 800395a:	d005      	beq.n	8003968 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800395c:	4b59      	ldr	r3, [pc, #356]	; (8003ac4 <HAL_RCC_ClockConfig+0x1bc>)
 800395e:	689b      	ldr	r3, [r3, #8]
 8003960:	4a58      	ldr	r2, [pc, #352]	; (8003ac4 <HAL_RCC_ClockConfig+0x1bc>)
 8003962:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003966:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f003 0308 	and.w	r3, r3, #8
 8003970:	2b00      	cmp	r3, #0
 8003972:	d005      	beq.n	8003980 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003974:	4b53      	ldr	r3, [pc, #332]	; (8003ac4 <HAL_RCC_ClockConfig+0x1bc>)
 8003976:	689b      	ldr	r3, [r3, #8]
 8003978:	4a52      	ldr	r2, [pc, #328]	; (8003ac4 <HAL_RCC_ClockConfig+0x1bc>)
 800397a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800397e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003980:	4b50      	ldr	r3, [pc, #320]	; (8003ac4 <HAL_RCC_ClockConfig+0x1bc>)
 8003982:	689b      	ldr	r3, [r3, #8]
 8003984:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	689b      	ldr	r3, [r3, #8]
 800398c:	494d      	ldr	r1, [pc, #308]	; (8003ac4 <HAL_RCC_ClockConfig+0x1bc>)
 800398e:	4313      	orrs	r3, r2
 8003990:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f003 0301 	and.w	r3, r3, #1
 800399a:	2b00      	cmp	r3, #0
 800399c:	d044      	beq.n	8003a28 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	2b01      	cmp	r3, #1
 80039a4:	d107      	bne.n	80039b6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039a6:	4b47      	ldr	r3, [pc, #284]	; (8003ac4 <HAL_RCC_ClockConfig+0x1bc>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d119      	bne.n	80039e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	e07f      	b.n	8003ab6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	2b02      	cmp	r3, #2
 80039bc:	d003      	beq.n	80039c6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80039c2:	2b03      	cmp	r3, #3
 80039c4:	d107      	bne.n	80039d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039c6:	4b3f      	ldr	r3, [pc, #252]	; (8003ac4 <HAL_RCC_ClockConfig+0x1bc>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d109      	bne.n	80039e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039d2:	2301      	movs	r3, #1
 80039d4:	e06f      	b.n	8003ab6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039d6:	4b3b      	ldr	r3, [pc, #236]	; (8003ac4 <HAL_RCC_ClockConfig+0x1bc>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f003 0302 	and.w	r3, r3, #2
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d101      	bne.n	80039e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
 80039e4:	e067      	b.n	8003ab6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039e6:	4b37      	ldr	r3, [pc, #220]	; (8003ac4 <HAL_RCC_ClockConfig+0x1bc>)
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	f023 0203 	bic.w	r2, r3, #3
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	4934      	ldr	r1, [pc, #208]	; (8003ac4 <HAL_RCC_ClockConfig+0x1bc>)
 80039f4:	4313      	orrs	r3, r2
 80039f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80039f8:	f7fe fca6 	bl	8002348 <HAL_GetTick>
 80039fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039fe:	e00a      	b.n	8003a16 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a00:	f7fe fca2 	bl	8002348 <HAL_GetTick>
 8003a04:	4602      	mov	r2, r0
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	1ad3      	subs	r3, r2, r3
 8003a0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d901      	bls.n	8003a16 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003a12:	2303      	movs	r3, #3
 8003a14:	e04f      	b.n	8003ab6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a16:	4b2b      	ldr	r3, [pc, #172]	; (8003ac4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	f003 020c 	and.w	r2, r3, #12
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	009b      	lsls	r3, r3, #2
 8003a24:	429a      	cmp	r2, r3
 8003a26:	d1eb      	bne.n	8003a00 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a28:	4b25      	ldr	r3, [pc, #148]	; (8003ac0 <HAL_RCC_ClockConfig+0x1b8>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f003 030f 	and.w	r3, r3, #15
 8003a30:	683a      	ldr	r2, [r7, #0]
 8003a32:	429a      	cmp	r2, r3
 8003a34:	d20c      	bcs.n	8003a50 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a36:	4b22      	ldr	r3, [pc, #136]	; (8003ac0 <HAL_RCC_ClockConfig+0x1b8>)
 8003a38:	683a      	ldr	r2, [r7, #0]
 8003a3a:	b2d2      	uxtb	r2, r2
 8003a3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a3e:	4b20      	ldr	r3, [pc, #128]	; (8003ac0 <HAL_RCC_ClockConfig+0x1b8>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f003 030f 	and.w	r3, r3, #15
 8003a46:	683a      	ldr	r2, [r7, #0]
 8003a48:	429a      	cmp	r2, r3
 8003a4a:	d001      	beq.n	8003a50 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	e032      	b.n	8003ab6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f003 0304 	and.w	r3, r3, #4
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d008      	beq.n	8003a6e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a5c:	4b19      	ldr	r3, [pc, #100]	; (8003ac4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	68db      	ldr	r3, [r3, #12]
 8003a68:	4916      	ldr	r1, [pc, #88]	; (8003ac4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f003 0308 	and.w	r3, r3, #8
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d009      	beq.n	8003a8e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a7a:	4b12      	ldr	r3, [pc, #72]	; (8003ac4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a7c:	689b      	ldr	r3, [r3, #8]
 8003a7e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	691b      	ldr	r3, [r3, #16]
 8003a86:	00db      	lsls	r3, r3, #3
 8003a88:	490e      	ldr	r1, [pc, #56]	; (8003ac4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003a8e:	f000 f821 	bl	8003ad4 <HAL_RCC_GetSysClockFreq>
 8003a92:	4601      	mov	r1, r0
 8003a94:	4b0b      	ldr	r3, [pc, #44]	; (8003ac4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a96:	689b      	ldr	r3, [r3, #8]
 8003a98:	091b      	lsrs	r3, r3, #4
 8003a9a:	f003 030f 	and.w	r3, r3, #15
 8003a9e:	4a0a      	ldr	r2, [pc, #40]	; (8003ac8 <HAL_RCC_ClockConfig+0x1c0>)
 8003aa0:	5cd3      	ldrb	r3, [r2, r3]
 8003aa2:	fa21 f303 	lsr.w	r3, r1, r3
 8003aa6:	4a09      	ldr	r2, [pc, #36]	; (8003acc <HAL_RCC_ClockConfig+0x1c4>)
 8003aa8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003aaa:	4b09      	ldr	r3, [pc, #36]	; (8003ad0 <HAL_RCC_ClockConfig+0x1c8>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f7fe fb44 	bl	800213c <HAL_InitTick>

  return HAL_OK;
 8003ab4:	2300      	movs	r3, #0
}
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	3710      	adds	r7, #16
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bd80      	pop	{r7, pc}
 8003abe:	bf00      	nop
 8003ac0:	40023c00 	.word	0x40023c00
 8003ac4:	40023800 	.word	0x40023800
 8003ac8:	080081d8 	.word	0x080081d8
 8003acc:	20000010 	.word	0x20000010
 8003ad0:	20000014 	.word	0x20000014

08003ad4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ad4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ad6:	b085      	sub	sp, #20
 8003ad8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003ada:	2300      	movs	r3, #0
 8003adc:	607b      	str	r3, [r7, #4]
 8003ade:	2300      	movs	r3, #0
 8003ae0:	60fb      	str	r3, [r7, #12]
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003aea:	4b63      	ldr	r3, [pc, #396]	; (8003c78 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	f003 030c 	and.w	r3, r3, #12
 8003af2:	2b04      	cmp	r3, #4
 8003af4:	d007      	beq.n	8003b06 <HAL_RCC_GetSysClockFreq+0x32>
 8003af6:	2b08      	cmp	r3, #8
 8003af8:	d008      	beq.n	8003b0c <HAL_RCC_GetSysClockFreq+0x38>
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	f040 80b4 	bne.w	8003c68 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003b00:	4b5e      	ldr	r3, [pc, #376]	; (8003c7c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003b02:	60bb      	str	r3, [r7, #8]
       break;
 8003b04:	e0b3      	b.n	8003c6e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003b06:	4b5e      	ldr	r3, [pc, #376]	; (8003c80 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003b08:	60bb      	str	r3, [r7, #8]
      break;
 8003b0a:	e0b0      	b.n	8003c6e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b0c:	4b5a      	ldr	r3, [pc, #360]	; (8003c78 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b14:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003b16:	4b58      	ldr	r3, [pc, #352]	; (8003c78 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d04a      	beq.n	8003bb8 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b22:	4b55      	ldr	r3, [pc, #340]	; (8003c78 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	099b      	lsrs	r3, r3, #6
 8003b28:	f04f 0400 	mov.w	r4, #0
 8003b2c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003b30:	f04f 0200 	mov.w	r2, #0
 8003b34:	ea03 0501 	and.w	r5, r3, r1
 8003b38:	ea04 0602 	and.w	r6, r4, r2
 8003b3c:	4629      	mov	r1, r5
 8003b3e:	4632      	mov	r2, r6
 8003b40:	f04f 0300 	mov.w	r3, #0
 8003b44:	f04f 0400 	mov.w	r4, #0
 8003b48:	0154      	lsls	r4, r2, #5
 8003b4a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003b4e:	014b      	lsls	r3, r1, #5
 8003b50:	4619      	mov	r1, r3
 8003b52:	4622      	mov	r2, r4
 8003b54:	1b49      	subs	r1, r1, r5
 8003b56:	eb62 0206 	sbc.w	r2, r2, r6
 8003b5a:	f04f 0300 	mov.w	r3, #0
 8003b5e:	f04f 0400 	mov.w	r4, #0
 8003b62:	0194      	lsls	r4, r2, #6
 8003b64:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003b68:	018b      	lsls	r3, r1, #6
 8003b6a:	1a5b      	subs	r3, r3, r1
 8003b6c:	eb64 0402 	sbc.w	r4, r4, r2
 8003b70:	f04f 0100 	mov.w	r1, #0
 8003b74:	f04f 0200 	mov.w	r2, #0
 8003b78:	00e2      	lsls	r2, r4, #3
 8003b7a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003b7e:	00d9      	lsls	r1, r3, #3
 8003b80:	460b      	mov	r3, r1
 8003b82:	4614      	mov	r4, r2
 8003b84:	195b      	adds	r3, r3, r5
 8003b86:	eb44 0406 	adc.w	r4, r4, r6
 8003b8a:	f04f 0100 	mov.w	r1, #0
 8003b8e:	f04f 0200 	mov.w	r2, #0
 8003b92:	0262      	lsls	r2, r4, #9
 8003b94:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003b98:	0259      	lsls	r1, r3, #9
 8003b9a:	460b      	mov	r3, r1
 8003b9c:	4614      	mov	r4, r2
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	4621      	mov	r1, r4
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	f04f 0400 	mov.w	r4, #0
 8003ba8:	461a      	mov	r2, r3
 8003baa:	4623      	mov	r3, r4
 8003bac:	f7fc ff9c 	bl	8000ae8 <__aeabi_uldivmod>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	460c      	mov	r4, r1
 8003bb4:	60fb      	str	r3, [r7, #12]
 8003bb6:	e049      	b.n	8003c4c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bb8:	4b2f      	ldr	r3, [pc, #188]	; (8003c78 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	099b      	lsrs	r3, r3, #6
 8003bbe:	f04f 0400 	mov.w	r4, #0
 8003bc2:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003bc6:	f04f 0200 	mov.w	r2, #0
 8003bca:	ea03 0501 	and.w	r5, r3, r1
 8003bce:	ea04 0602 	and.w	r6, r4, r2
 8003bd2:	4629      	mov	r1, r5
 8003bd4:	4632      	mov	r2, r6
 8003bd6:	f04f 0300 	mov.w	r3, #0
 8003bda:	f04f 0400 	mov.w	r4, #0
 8003bde:	0154      	lsls	r4, r2, #5
 8003be0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003be4:	014b      	lsls	r3, r1, #5
 8003be6:	4619      	mov	r1, r3
 8003be8:	4622      	mov	r2, r4
 8003bea:	1b49      	subs	r1, r1, r5
 8003bec:	eb62 0206 	sbc.w	r2, r2, r6
 8003bf0:	f04f 0300 	mov.w	r3, #0
 8003bf4:	f04f 0400 	mov.w	r4, #0
 8003bf8:	0194      	lsls	r4, r2, #6
 8003bfa:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003bfe:	018b      	lsls	r3, r1, #6
 8003c00:	1a5b      	subs	r3, r3, r1
 8003c02:	eb64 0402 	sbc.w	r4, r4, r2
 8003c06:	f04f 0100 	mov.w	r1, #0
 8003c0a:	f04f 0200 	mov.w	r2, #0
 8003c0e:	00e2      	lsls	r2, r4, #3
 8003c10:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003c14:	00d9      	lsls	r1, r3, #3
 8003c16:	460b      	mov	r3, r1
 8003c18:	4614      	mov	r4, r2
 8003c1a:	195b      	adds	r3, r3, r5
 8003c1c:	eb44 0406 	adc.w	r4, r4, r6
 8003c20:	f04f 0100 	mov.w	r1, #0
 8003c24:	f04f 0200 	mov.w	r2, #0
 8003c28:	02a2      	lsls	r2, r4, #10
 8003c2a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003c2e:	0299      	lsls	r1, r3, #10
 8003c30:	460b      	mov	r3, r1
 8003c32:	4614      	mov	r4, r2
 8003c34:	4618      	mov	r0, r3
 8003c36:	4621      	mov	r1, r4
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	f04f 0400 	mov.w	r4, #0
 8003c3e:	461a      	mov	r2, r3
 8003c40:	4623      	mov	r3, r4
 8003c42:	f7fc ff51 	bl	8000ae8 <__aeabi_uldivmod>
 8003c46:	4603      	mov	r3, r0
 8003c48:	460c      	mov	r4, r1
 8003c4a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003c4c:	4b0a      	ldr	r3, [pc, #40]	; (8003c78 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	0c1b      	lsrs	r3, r3, #16
 8003c52:	f003 0303 	and.w	r3, r3, #3
 8003c56:	3301      	adds	r3, #1
 8003c58:	005b      	lsls	r3, r3, #1
 8003c5a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003c5c:	68fa      	ldr	r2, [r7, #12]
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c64:	60bb      	str	r3, [r7, #8]
      break;
 8003c66:	e002      	b.n	8003c6e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003c68:	4b04      	ldr	r3, [pc, #16]	; (8003c7c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003c6a:	60bb      	str	r3, [r7, #8]
      break;
 8003c6c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c6e:	68bb      	ldr	r3, [r7, #8]
}
 8003c70:	4618      	mov	r0, r3
 8003c72:	3714      	adds	r7, #20
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c78:	40023800 	.word	0x40023800
 8003c7c:	00f42400 	.word	0x00f42400
 8003c80:	007a1200 	.word	0x007a1200

08003c84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c84:	b480      	push	{r7}
 8003c86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c88:	4b03      	ldr	r3, [pc, #12]	; (8003c98 <HAL_RCC_GetHCLKFreq+0x14>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
}
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c94:	4770      	bx	lr
 8003c96:	bf00      	nop
 8003c98:	20000010 	.word	0x20000010

08003c9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003ca0:	f7ff fff0 	bl	8003c84 <HAL_RCC_GetHCLKFreq>
 8003ca4:	4601      	mov	r1, r0
 8003ca6:	4b05      	ldr	r3, [pc, #20]	; (8003cbc <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	0a9b      	lsrs	r3, r3, #10
 8003cac:	f003 0307 	and.w	r3, r3, #7
 8003cb0:	4a03      	ldr	r2, [pc, #12]	; (8003cc0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003cb2:	5cd3      	ldrb	r3, [r2, r3]
 8003cb4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	bd80      	pop	{r7, pc}
 8003cbc:	40023800 	.word	0x40023800
 8003cc0:	080081e8 	.word	0x080081e8

08003cc4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b083      	sub	sp, #12
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
 8003ccc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	220f      	movs	r2, #15
 8003cd2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003cd4:	4b12      	ldr	r3, [pc, #72]	; (8003d20 <HAL_RCC_GetClockConfig+0x5c>)
 8003cd6:	689b      	ldr	r3, [r3, #8]
 8003cd8:	f003 0203 	and.w	r2, r3, #3
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003ce0:	4b0f      	ldr	r3, [pc, #60]	; (8003d20 <HAL_RCC_GetClockConfig+0x5c>)
 8003ce2:	689b      	ldr	r3, [r3, #8]
 8003ce4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003cec:	4b0c      	ldr	r3, [pc, #48]	; (8003d20 <HAL_RCC_GetClockConfig+0x5c>)
 8003cee:	689b      	ldr	r3, [r3, #8]
 8003cf0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003cf8:	4b09      	ldr	r3, [pc, #36]	; (8003d20 <HAL_RCC_GetClockConfig+0x5c>)
 8003cfa:	689b      	ldr	r3, [r3, #8]
 8003cfc:	08db      	lsrs	r3, r3, #3
 8003cfe:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003d06:	4b07      	ldr	r3, [pc, #28]	; (8003d24 <HAL_RCC_GetClockConfig+0x60>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f003 020f 	and.w	r2, r3, #15
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	601a      	str	r2, [r3, #0]
}
 8003d12:	bf00      	nop
 8003d14:	370c      	adds	r7, #12
 8003d16:	46bd      	mov	sp, r7
 8003d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1c:	4770      	bx	lr
 8003d1e:	bf00      	nop
 8003d20:	40023800 	.word	0x40023800
 8003d24:	40023c00 	.word	0x40023c00

08003d28 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b082      	sub	sp, #8
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d101      	bne.n	8003d3a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	e056      	b.n	8003de8 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003d46:	b2db      	uxtb	r3, r3
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d106      	bne.n	8003d5a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003d54:	6878      	ldr	r0, [r7, #4]
 8003d56:	f7fe f9a9 	bl	80020ac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2202      	movs	r2, #2
 8003d5e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	681a      	ldr	r2, [r3, #0]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d70:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	685a      	ldr	r2, [r3, #4]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	689b      	ldr	r3, [r3, #8]
 8003d7a:	431a      	orrs	r2, r3
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	68db      	ldr	r3, [r3, #12]
 8003d80:	431a      	orrs	r2, r3
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	691b      	ldr	r3, [r3, #16]
 8003d86:	431a      	orrs	r2, r3
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	695b      	ldr	r3, [r3, #20]
 8003d8c:	431a      	orrs	r2, r3
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	699b      	ldr	r3, [r3, #24]
 8003d92:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d96:	431a      	orrs	r2, r3
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	69db      	ldr	r3, [r3, #28]
 8003d9c:	431a      	orrs	r2, r3
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6a1b      	ldr	r3, [r3, #32]
 8003da2:	ea42 0103 	orr.w	r1, r2, r3
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	430a      	orrs	r2, r1
 8003db0:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	699b      	ldr	r3, [r3, #24]
 8003db6:	0c1b      	lsrs	r3, r3, #16
 8003db8:	f003 0104 	and.w	r1, r3, #4
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	430a      	orrs	r2, r1
 8003dc6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	69da      	ldr	r2, [r3, #28]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003dd6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2201      	movs	r2, #1
 8003de2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003de6:	2300      	movs	r3, #0
}
 8003de8:	4618      	mov	r0, r3
 8003dea:	3708      	adds	r7, #8
 8003dec:	46bd      	mov	sp, r7
 8003dee:	bd80      	pop	{r7, pc}

08003df0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b088      	sub	sp, #32
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	60f8      	str	r0, [r7, #12]
 8003df8:	60b9      	str	r1, [r7, #8]
 8003dfa:	603b      	str	r3, [r7, #0]
 8003dfc:	4613      	mov	r3, r2
 8003dfe:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003e00:	2300      	movs	r3, #0
 8003e02:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003e0a:	2b01      	cmp	r3, #1
 8003e0c:	d101      	bne.n	8003e12 <HAL_SPI_Transmit+0x22>
 8003e0e:	2302      	movs	r3, #2
 8003e10:	e11e      	b.n	8004050 <HAL_SPI_Transmit+0x260>
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	2201      	movs	r2, #1
 8003e16:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003e1a:	f7fe fa95 	bl	8002348 <HAL_GetTick>
 8003e1e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003e20:	88fb      	ldrh	r3, [r7, #6]
 8003e22:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003e2a:	b2db      	uxtb	r3, r3
 8003e2c:	2b01      	cmp	r3, #1
 8003e2e:	d002      	beq.n	8003e36 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003e30:	2302      	movs	r3, #2
 8003e32:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003e34:	e103      	b.n	800403e <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d002      	beq.n	8003e42 <HAL_SPI_Transmit+0x52>
 8003e3c:	88fb      	ldrh	r3, [r7, #6]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d102      	bne.n	8003e48 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003e42:	2301      	movs	r3, #1
 8003e44:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003e46:	e0fa      	b.n	800403e <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	2203      	movs	r2, #3
 8003e4c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	2200      	movs	r2, #0
 8003e54:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	68ba      	ldr	r2, [r7, #8]
 8003e5a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	88fa      	ldrh	r2, [r7, #6]
 8003e60:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	88fa      	ldrh	r2, [r7, #6]
 8003e66:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	2200      	movs	r2, #0
 8003e72:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2200      	movs	r2, #0
 8003e78:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2200      	movs	r2, #0
 8003e84:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e8e:	d107      	bne.n	8003ea0 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	681a      	ldr	r2, [r3, #0]
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003e9e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eaa:	2b40      	cmp	r3, #64	; 0x40
 8003eac:	d007      	beq.n	8003ebe <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	681a      	ldr	r2, [r3, #0]
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ebc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	68db      	ldr	r3, [r3, #12]
 8003ec2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ec6:	d14b      	bne.n	8003f60 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d002      	beq.n	8003ed6 <HAL_SPI_Transmit+0xe6>
 8003ed0:	8afb      	ldrh	r3, [r7, #22]
 8003ed2:	2b01      	cmp	r3, #1
 8003ed4:	d13e      	bne.n	8003f54 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eda:	881a      	ldrh	r2, [r3, #0]
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ee6:	1c9a      	adds	r2, r3, #2
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ef0:	b29b      	uxth	r3, r3
 8003ef2:	3b01      	subs	r3, #1
 8003ef4:	b29a      	uxth	r2, r3
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003efa:	e02b      	b.n	8003f54 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	689b      	ldr	r3, [r3, #8]
 8003f02:	f003 0302 	and.w	r3, r3, #2
 8003f06:	2b02      	cmp	r3, #2
 8003f08:	d112      	bne.n	8003f30 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f0e:	881a      	ldrh	r2, [r3, #0]
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f1a:	1c9a      	adds	r2, r3, #2
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f24:	b29b      	uxth	r3, r3
 8003f26:	3b01      	subs	r3, #1
 8003f28:	b29a      	uxth	r2, r3
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	86da      	strh	r2, [r3, #54]	; 0x36
 8003f2e:	e011      	b.n	8003f54 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003f30:	f7fe fa0a 	bl	8002348 <HAL_GetTick>
 8003f34:	4602      	mov	r2, r0
 8003f36:	69bb      	ldr	r3, [r7, #24]
 8003f38:	1ad3      	subs	r3, r2, r3
 8003f3a:	683a      	ldr	r2, [r7, #0]
 8003f3c:	429a      	cmp	r2, r3
 8003f3e:	d803      	bhi.n	8003f48 <HAL_SPI_Transmit+0x158>
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f46:	d102      	bne.n	8003f4e <HAL_SPI_Transmit+0x15e>
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d102      	bne.n	8003f54 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8003f4e:	2303      	movs	r3, #3
 8003f50:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003f52:	e074      	b.n	800403e <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f58:	b29b      	uxth	r3, r3
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d1ce      	bne.n	8003efc <HAL_SPI_Transmit+0x10c>
 8003f5e:	e04c      	b.n	8003ffa <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d002      	beq.n	8003f6e <HAL_SPI_Transmit+0x17e>
 8003f68:	8afb      	ldrh	r3, [r7, #22]
 8003f6a:	2b01      	cmp	r3, #1
 8003f6c:	d140      	bne.n	8003ff0 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	330c      	adds	r3, #12
 8003f78:	7812      	ldrb	r2, [r2, #0]
 8003f7a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f80:	1c5a      	adds	r2, r3, #1
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f8a:	b29b      	uxth	r3, r3
 8003f8c:	3b01      	subs	r3, #1
 8003f8e:	b29a      	uxth	r2, r3
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003f94:	e02c      	b.n	8003ff0 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	689b      	ldr	r3, [r3, #8]
 8003f9c:	f003 0302 	and.w	r3, r3, #2
 8003fa0:	2b02      	cmp	r3, #2
 8003fa2:	d113      	bne.n	8003fcc <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	330c      	adds	r3, #12
 8003fae:	7812      	ldrb	r2, [r2, #0]
 8003fb0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fb6:	1c5a      	adds	r2, r3, #1
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003fc0:	b29b      	uxth	r3, r3
 8003fc2:	3b01      	subs	r3, #1
 8003fc4:	b29a      	uxth	r2, r3
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	86da      	strh	r2, [r3, #54]	; 0x36
 8003fca:	e011      	b.n	8003ff0 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003fcc:	f7fe f9bc 	bl	8002348 <HAL_GetTick>
 8003fd0:	4602      	mov	r2, r0
 8003fd2:	69bb      	ldr	r3, [r7, #24]
 8003fd4:	1ad3      	subs	r3, r2, r3
 8003fd6:	683a      	ldr	r2, [r7, #0]
 8003fd8:	429a      	cmp	r2, r3
 8003fda:	d803      	bhi.n	8003fe4 <HAL_SPI_Transmit+0x1f4>
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fe2:	d102      	bne.n	8003fea <HAL_SPI_Transmit+0x1fa>
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d102      	bne.n	8003ff0 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8003fea:	2303      	movs	r3, #3
 8003fec:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003fee:	e026      	b.n	800403e <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ff4:	b29b      	uxth	r3, r3
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d1cd      	bne.n	8003f96 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003ffa:	69ba      	ldr	r2, [r7, #24]
 8003ffc:	6839      	ldr	r1, [r7, #0]
 8003ffe:	68f8      	ldr	r0, [r7, #12]
 8004000:	f000 fba4 	bl	800474c <SPI_EndRxTxTransaction>
 8004004:	4603      	mov	r3, r0
 8004006:	2b00      	cmp	r3, #0
 8004008:	d002      	beq.n	8004010 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	2220      	movs	r2, #32
 800400e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d10a      	bne.n	800402e <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004018:	2300      	movs	r3, #0
 800401a:	613b      	str	r3, [r7, #16]
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	68db      	ldr	r3, [r3, #12]
 8004022:	613b      	str	r3, [r7, #16]
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	689b      	ldr	r3, [r3, #8]
 800402a:	613b      	str	r3, [r7, #16]
 800402c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004032:	2b00      	cmp	r3, #0
 8004034:	d002      	beq.n	800403c <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8004036:	2301      	movs	r3, #1
 8004038:	77fb      	strb	r3, [r7, #31]
 800403a:	e000      	b.n	800403e <HAL_SPI_Transmit+0x24e>
  }

error:
 800403c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	2201      	movs	r2, #1
 8004042:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	2200      	movs	r2, #0
 800404a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800404e:	7ffb      	ldrb	r3, [r7, #31]
}
 8004050:	4618      	mov	r0, r3
 8004052:	3720      	adds	r7, #32
 8004054:	46bd      	mov	sp, r7
 8004056:	bd80      	pop	{r7, pc}

08004058 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b088      	sub	sp, #32
 800405c:	af02      	add	r7, sp, #8
 800405e:	60f8      	str	r0, [r7, #12]
 8004060:	60b9      	str	r1, [r7, #8]
 8004062:	603b      	str	r3, [r7, #0]
 8004064:	4613      	mov	r3, r2
 8004066:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004068:	2300      	movs	r3, #0
 800406a:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004074:	d112      	bne.n	800409c <HAL_SPI_Receive+0x44>
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	689b      	ldr	r3, [r3, #8]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d10e      	bne.n	800409c <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	2204      	movs	r2, #4
 8004082:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004086:	88fa      	ldrh	r2, [r7, #6]
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	9300      	str	r3, [sp, #0]
 800408c:	4613      	mov	r3, r2
 800408e:	68ba      	ldr	r2, [r7, #8]
 8004090:	68b9      	ldr	r1, [r7, #8]
 8004092:	68f8      	ldr	r0, [r7, #12]
 8004094:	f000 f8e9 	bl	800426a <HAL_SPI_TransmitReceive>
 8004098:	4603      	mov	r3, r0
 800409a:	e0e2      	b.n	8004262 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80040a2:	2b01      	cmp	r3, #1
 80040a4:	d101      	bne.n	80040aa <HAL_SPI_Receive+0x52>
 80040a6:	2302      	movs	r3, #2
 80040a8:	e0db      	b.n	8004262 <HAL_SPI_Receive+0x20a>
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	2201      	movs	r2, #1
 80040ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80040b2:	f7fe f949 	bl	8002348 <HAL_GetTick>
 80040b6:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80040be:	b2db      	uxtb	r3, r3
 80040c0:	2b01      	cmp	r3, #1
 80040c2:	d002      	beq.n	80040ca <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80040c4:	2302      	movs	r3, #2
 80040c6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80040c8:	e0c2      	b.n	8004250 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d002      	beq.n	80040d6 <HAL_SPI_Receive+0x7e>
 80040d0:	88fb      	ldrh	r3, [r7, #6]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d102      	bne.n	80040dc <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80040d6:	2301      	movs	r3, #1
 80040d8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80040da:	e0b9      	b.n	8004250 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2204      	movs	r2, #4
 80040e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	2200      	movs	r2, #0
 80040e8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	68ba      	ldr	r2, [r7, #8]
 80040ee:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	88fa      	ldrh	r2, [r7, #6]
 80040f4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	88fa      	ldrh	r2, [r7, #6]
 80040fa:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	2200      	movs	r2, #0
 8004100:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	2200      	movs	r2, #0
 8004106:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	2200      	movs	r2, #0
 800410c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	2200      	movs	r2, #0
 8004112:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	2200      	movs	r2, #0
 8004118:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	689b      	ldr	r3, [r3, #8]
 800411e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004122:	d107      	bne.n	8004134 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	681a      	ldr	r2, [r3, #0]
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004132:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800413e:	2b40      	cmp	r3, #64	; 0x40
 8004140:	d007      	beq.n	8004152 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	681a      	ldr	r2, [r3, #0]
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004150:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	68db      	ldr	r3, [r3, #12]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d162      	bne.n	8004220 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800415a:	e02e      	b.n	80041ba <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	689b      	ldr	r3, [r3, #8]
 8004162:	f003 0301 	and.w	r3, r3, #1
 8004166:	2b01      	cmp	r3, #1
 8004168:	d115      	bne.n	8004196 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f103 020c 	add.w	r2, r3, #12
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004176:	7812      	ldrb	r2, [r2, #0]
 8004178:	b2d2      	uxtb	r2, r2
 800417a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004180:	1c5a      	adds	r2, r3, #1
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800418a:	b29b      	uxth	r3, r3
 800418c:	3b01      	subs	r3, #1
 800418e:	b29a      	uxth	r2, r3
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004194:	e011      	b.n	80041ba <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004196:	f7fe f8d7 	bl	8002348 <HAL_GetTick>
 800419a:	4602      	mov	r2, r0
 800419c:	693b      	ldr	r3, [r7, #16]
 800419e:	1ad3      	subs	r3, r2, r3
 80041a0:	683a      	ldr	r2, [r7, #0]
 80041a2:	429a      	cmp	r2, r3
 80041a4:	d803      	bhi.n	80041ae <HAL_SPI_Receive+0x156>
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041ac:	d102      	bne.n	80041b4 <HAL_SPI_Receive+0x15c>
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d102      	bne.n	80041ba <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 80041b4:	2303      	movs	r3, #3
 80041b6:	75fb      	strb	r3, [r7, #23]
          goto error;
 80041b8:	e04a      	b.n	8004250 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041be:	b29b      	uxth	r3, r3
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d1cb      	bne.n	800415c <HAL_SPI_Receive+0x104>
 80041c4:	e031      	b.n	800422a <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	689b      	ldr	r3, [r3, #8]
 80041cc:	f003 0301 	and.w	r3, r3, #1
 80041d0:	2b01      	cmp	r3, #1
 80041d2:	d113      	bne.n	80041fc <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	68da      	ldr	r2, [r3, #12]
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041de:	b292      	uxth	r2, r2
 80041e0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041e6:	1c9a      	adds	r2, r3, #2
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041f0:	b29b      	uxth	r3, r3
 80041f2:	3b01      	subs	r3, #1
 80041f4:	b29a      	uxth	r2, r3
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80041fa:	e011      	b.n	8004220 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80041fc:	f7fe f8a4 	bl	8002348 <HAL_GetTick>
 8004200:	4602      	mov	r2, r0
 8004202:	693b      	ldr	r3, [r7, #16]
 8004204:	1ad3      	subs	r3, r2, r3
 8004206:	683a      	ldr	r2, [r7, #0]
 8004208:	429a      	cmp	r2, r3
 800420a:	d803      	bhi.n	8004214 <HAL_SPI_Receive+0x1bc>
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004212:	d102      	bne.n	800421a <HAL_SPI_Receive+0x1c2>
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d102      	bne.n	8004220 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 800421a:	2303      	movs	r3, #3
 800421c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800421e:	e017      	b.n	8004250 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004224:	b29b      	uxth	r3, r3
 8004226:	2b00      	cmp	r3, #0
 8004228:	d1cd      	bne.n	80041c6 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800422a:	693a      	ldr	r2, [r7, #16]
 800422c:	6839      	ldr	r1, [r7, #0]
 800422e:	68f8      	ldr	r0, [r7, #12]
 8004230:	f000 fa27 	bl	8004682 <SPI_EndRxTransaction>
 8004234:	4603      	mov	r3, r0
 8004236:	2b00      	cmp	r3, #0
 8004238:	d002      	beq.n	8004240 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	2220      	movs	r2, #32
 800423e:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004244:	2b00      	cmp	r3, #0
 8004246:	d002      	beq.n	800424e <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8004248:	2301      	movs	r3, #1
 800424a:	75fb      	strb	r3, [r7, #23]
 800424c:	e000      	b.n	8004250 <HAL_SPI_Receive+0x1f8>
  }

error :
 800424e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	2201      	movs	r2, #1
 8004254:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	2200      	movs	r2, #0
 800425c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004260:	7dfb      	ldrb	r3, [r7, #23]
}
 8004262:	4618      	mov	r0, r3
 8004264:	3718      	adds	r7, #24
 8004266:	46bd      	mov	sp, r7
 8004268:	bd80      	pop	{r7, pc}

0800426a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800426a:	b580      	push	{r7, lr}
 800426c:	b08c      	sub	sp, #48	; 0x30
 800426e:	af00      	add	r7, sp, #0
 8004270:	60f8      	str	r0, [r7, #12]
 8004272:	60b9      	str	r1, [r7, #8]
 8004274:	607a      	str	r2, [r7, #4]
 8004276:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004278:	2301      	movs	r3, #1
 800427a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800427c:	2300      	movs	r3, #0
 800427e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004288:	2b01      	cmp	r3, #1
 800428a:	d101      	bne.n	8004290 <HAL_SPI_TransmitReceive+0x26>
 800428c:	2302      	movs	r3, #2
 800428e:	e18a      	b.n	80045a6 <HAL_SPI_TransmitReceive+0x33c>
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	2201      	movs	r2, #1
 8004294:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004298:	f7fe f856 	bl	8002348 <HAL_GetTick>
 800429c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80042a4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80042ae:	887b      	ldrh	r3, [r7, #2]
 80042b0:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80042b2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80042b6:	2b01      	cmp	r3, #1
 80042b8:	d00f      	beq.n	80042da <HAL_SPI_TransmitReceive+0x70>
 80042ba:	69fb      	ldr	r3, [r7, #28]
 80042bc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80042c0:	d107      	bne.n	80042d2 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	689b      	ldr	r3, [r3, #8]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d103      	bne.n	80042d2 <HAL_SPI_TransmitReceive+0x68>
 80042ca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80042ce:	2b04      	cmp	r3, #4
 80042d0:	d003      	beq.n	80042da <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80042d2:	2302      	movs	r3, #2
 80042d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80042d8:	e15b      	b.n	8004592 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d005      	beq.n	80042ec <HAL_SPI_TransmitReceive+0x82>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d002      	beq.n	80042ec <HAL_SPI_TransmitReceive+0x82>
 80042e6:	887b      	ldrh	r3, [r7, #2]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d103      	bne.n	80042f4 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80042ec:	2301      	movs	r3, #1
 80042ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80042f2:	e14e      	b.n	8004592 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80042fa:	b2db      	uxtb	r3, r3
 80042fc:	2b04      	cmp	r3, #4
 80042fe:	d003      	beq.n	8004308 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	2205      	movs	r2, #5
 8004304:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	2200      	movs	r2, #0
 800430c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	687a      	ldr	r2, [r7, #4]
 8004312:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	887a      	ldrh	r2, [r7, #2]
 8004318:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	887a      	ldrh	r2, [r7, #2]
 800431e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	68ba      	ldr	r2, [r7, #8]
 8004324:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	887a      	ldrh	r2, [r7, #2]
 800432a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	887a      	ldrh	r2, [r7, #2]
 8004330:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	2200      	movs	r2, #0
 8004336:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	2200      	movs	r2, #0
 800433c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004348:	2b40      	cmp	r3, #64	; 0x40
 800434a:	d007      	beq.n	800435c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	681a      	ldr	r2, [r3, #0]
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800435a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	68db      	ldr	r3, [r3, #12]
 8004360:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004364:	d178      	bne.n	8004458 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d002      	beq.n	8004374 <HAL_SPI_TransmitReceive+0x10a>
 800436e:	8b7b      	ldrh	r3, [r7, #26]
 8004370:	2b01      	cmp	r3, #1
 8004372:	d166      	bne.n	8004442 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004378:	881a      	ldrh	r2, [r3, #0]
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004384:	1c9a      	adds	r2, r3, #2
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800438e:	b29b      	uxth	r3, r3
 8004390:	3b01      	subs	r3, #1
 8004392:	b29a      	uxth	r2, r3
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004398:	e053      	b.n	8004442 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	689b      	ldr	r3, [r3, #8]
 80043a0:	f003 0302 	and.w	r3, r3, #2
 80043a4:	2b02      	cmp	r3, #2
 80043a6:	d11b      	bne.n	80043e0 <HAL_SPI_TransmitReceive+0x176>
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80043ac:	b29b      	uxth	r3, r3
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d016      	beq.n	80043e0 <HAL_SPI_TransmitReceive+0x176>
 80043b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043b4:	2b01      	cmp	r3, #1
 80043b6:	d113      	bne.n	80043e0 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043bc:	881a      	ldrh	r2, [r3, #0]
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043c8:	1c9a      	adds	r2, r3, #2
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80043d2:	b29b      	uxth	r3, r3
 80043d4:	3b01      	subs	r3, #1
 80043d6:	b29a      	uxth	r2, r3
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80043dc:	2300      	movs	r3, #0
 80043de:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	689b      	ldr	r3, [r3, #8]
 80043e6:	f003 0301 	and.w	r3, r3, #1
 80043ea:	2b01      	cmp	r3, #1
 80043ec:	d119      	bne.n	8004422 <HAL_SPI_TransmitReceive+0x1b8>
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043f2:	b29b      	uxth	r3, r3
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d014      	beq.n	8004422 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	68da      	ldr	r2, [r3, #12]
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004402:	b292      	uxth	r2, r2
 8004404:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800440a:	1c9a      	adds	r2, r3, #2
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004414:	b29b      	uxth	r3, r3
 8004416:	3b01      	subs	r3, #1
 8004418:	b29a      	uxth	r2, r3
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800441e:	2301      	movs	r3, #1
 8004420:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004422:	f7fd ff91 	bl	8002348 <HAL_GetTick>
 8004426:	4602      	mov	r2, r0
 8004428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800442a:	1ad3      	subs	r3, r2, r3
 800442c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800442e:	429a      	cmp	r2, r3
 8004430:	d807      	bhi.n	8004442 <HAL_SPI_TransmitReceive+0x1d8>
 8004432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004434:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004438:	d003      	beq.n	8004442 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800443a:	2303      	movs	r3, #3
 800443c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004440:	e0a7      	b.n	8004592 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004446:	b29b      	uxth	r3, r3
 8004448:	2b00      	cmp	r3, #0
 800444a:	d1a6      	bne.n	800439a <HAL_SPI_TransmitReceive+0x130>
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004450:	b29b      	uxth	r3, r3
 8004452:	2b00      	cmp	r3, #0
 8004454:	d1a1      	bne.n	800439a <HAL_SPI_TransmitReceive+0x130>
 8004456:	e07c      	b.n	8004552 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d002      	beq.n	8004466 <HAL_SPI_TransmitReceive+0x1fc>
 8004460:	8b7b      	ldrh	r3, [r7, #26]
 8004462:	2b01      	cmp	r3, #1
 8004464:	d16b      	bne.n	800453e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	330c      	adds	r3, #12
 8004470:	7812      	ldrb	r2, [r2, #0]
 8004472:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004478:	1c5a      	adds	r2, r3, #1
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004482:	b29b      	uxth	r3, r3
 8004484:	3b01      	subs	r3, #1
 8004486:	b29a      	uxth	r2, r3
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800448c:	e057      	b.n	800453e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	689b      	ldr	r3, [r3, #8]
 8004494:	f003 0302 	and.w	r3, r3, #2
 8004498:	2b02      	cmp	r3, #2
 800449a:	d11c      	bne.n	80044d6 <HAL_SPI_TransmitReceive+0x26c>
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80044a0:	b29b      	uxth	r3, r3
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d017      	beq.n	80044d6 <HAL_SPI_TransmitReceive+0x26c>
 80044a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044a8:	2b01      	cmp	r3, #1
 80044aa:	d114      	bne.n	80044d6 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	330c      	adds	r3, #12
 80044b6:	7812      	ldrb	r2, [r2, #0]
 80044b8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044be:	1c5a      	adds	r2, r3, #1
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80044c8:	b29b      	uxth	r3, r3
 80044ca:	3b01      	subs	r3, #1
 80044cc:	b29a      	uxth	r2, r3
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80044d2:	2300      	movs	r3, #0
 80044d4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	689b      	ldr	r3, [r3, #8]
 80044dc:	f003 0301 	and.w	r3, r3, #1
 80044e0:	2b01      	cmp	r3, #1
 80044e2:	d119      	bne.n	8004518 <HAL_SPI_TransmitReceive+0x2ae>
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044e8:	b29b      	uxth	r3, r3
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d014      	beq.n	8004518 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	68da      	ldr	r2, [r3, #12]
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044f8:	b2d2      	uxtb	r2, r2
 80044fa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004500:	1c5a      	adds	r2, r3, #1
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800450a:	b29b      	uxth	r3, r3
 800450c:	3b01      	subs	r3, #1
 800450e:	b29a      	uxth	r2, r3
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004514:	2301      	movs	r3, #1
 8004516:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004518:	f7fd ff16 	bl	8002348 <HAL_GetTick>
 800451c:	4602      	mov	r2, r0
 800451e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004520:	1ad3      	subs	r3, r2, r3
 8004522:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004524:	429a      	cmp	r2, r3
 8004526:	d803      	bhi.n	8004530 <HAL_SPI_TransmitReceive+0x2c6>
 8004528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800452a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800452e:	d102      	bne.n	8004536 <HAL_SPI_TransmitReceive+0x2cc>
 8004530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004532:	2b00      	cmp	r3, #0
 8004534:	d103      	bne.n	800453e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004536:	2303      	movs	r3, #3
 8004538:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800453c:	e029      	b.n	8004592 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004542:	b29b      	uxth	r3, r3
 8004544:	2b00      	cmp	r3, #0
 8004546:	d1a2      	bne.n	800448e <HAL_SPI_TransmitReceive+0x224>
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800454c:	b29b      	uxth	r3, r3
 800454e:	2b00      	cmp	r3, #0
 8004550:	d19d      	bne.n	800448e <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004552:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004554:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004556:	68f8      	ldr	r0, [r7, #12]
 8004558:	f000 f8f8 	bl	800474c <SPI_EndRxTxTransaction>
 800455c:	4603      	mov	r3, r0
 800455e:	2b00      	cmp	r3, #0
 8004560:	d006      	beq.n	8004570 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004562:	2301      	movs	r3, #1
 8004564:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	2220      	movs	r2, #32
 800456c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800456e:	e010      	b.n	8004592 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	689b      	ldr	r3, [r3, #8]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d10b      	bne.n	8004590 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004578:	2300      	movs	r3, #0
 800457a:	617b      	str	r3, [r7, #20]
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	68db      	ldr	r3, [r3, #12]
 8004582:	617b      	str	r3, [r7, #20]
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	689b      	ldr	r3, [r3, #8]
 800458a:	617b      	str	r3, [r7, #20]
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	e000      	b.n	8004592 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004590:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	2201      	movs	r2, #1
 8004596:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	2200      	movs	r2, #0
 800459e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80045a2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80045a6:	4618      	mov	r0, r3
 80045a8:	3730      	adds	r7, #48	; 0x30
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}

080045ae <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80045ae:	b580      	push	{r7, lr}
 80045b0:	b084      	sub	sp, #16
 80045b2:	af00      	add	r7, sp, #0
 80045b4:	60f8      	str	r0, [r7, #12]
 80045b6:	60b9      	str	r1, [r7, #8]
 80045b8:	603b      	str	r3, [r7, #0]
 80045ba:	4613      	mov	r3, r2
 80045bc:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80045be:	e04c      	b.n	800465a <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045c6:	d048      	beq.n	800465a <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80045c8:	f7fd febe 	bl	8002348 <HAL_GetTick>
 80045cc:	4602      	mov	r2, r0
 80045ce:	69bb      	ldr	r3, [r7, #24]
 80045d0:	1ad3      	subs	r3, r2, r3
 80045d2:	683a      	ldr	r2, [r7, #0]
 80045d4:	429a      	cmp	r2, r3
 80045d6:	d902      	bls.n	80045de <SPI_WaitFlagStateUntilTimeout+0x30>
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d13d      	bne.n	800465a <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	685a      	ldr	r2, [r3, #4]
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80045ec:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80045f6:	d111      	bne.n	800461c <SPI_WaitFlagStateUntilTimeout+0x6e>
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	689b      	ldr	r3, [r3, #8]
 80045fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004600:	d004      	beq.n	800460c <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	689b      	ldr	r3, [r3, #8]
 8004606:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800460a:	d107      	bne.n	800461c <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	681a      	ldr	r2, [r3, #0]
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800461a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004620:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004624:	d10f      	bne.n	8004646 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	681a      	ldr	r2, [r3, #0]
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004634:	601a      	str	r2, [r3, #0]
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	681a      	ldr	r2, [r3, #0]
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004644:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	2201      	movs	r2, #1
 800464a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	2200      	movs	r2, #0
 8004652:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004656:	2303      	movs	r3, #3
 8004658:	e00f      	b.n	800467a <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	689a      	ldr	r2, [r3, #8]
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	4013      	ands	r3, r2
 8004664:	68ba      	ldr	r2, [r7, #8]
 8004666:	429a      	cmp	r2, r3
 8004668:	bf0c      	ite	eq
 800466a:	2301      	moveq	r3, #1
 800466c:	2300      	movne	r3, #0
 800466e:	b2db      	uxtb	r3, r3
 8004670:	461a      	mov	r2, r3
 8004672:	79fb      	ldrb	r3, [r7, #7]
 8004674:	429a      	cmp	r2, r3
 8004676:	d1a3      	bne.n	80045c0 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8004678:	2300      	movs	r3, #0
}
 800467a:	4618      	mov	r0, r3
 800467c:	3710      	adds	r7, #16
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}

08004682 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004682:	b580      	push	{r7, lr}
 8004684:	b086      	sub	sp, #24
 8004686:	af02      	add	r7, sp, #8
 8004688:	60f8      	str	r0, [r7, #12]
 800468a:	60b9      	str	r1, [r7, #8]
 800468c:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004696:	d111      	bne.n	80046bc <SPI_EndRxTransaction+0x3a>
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	689b      	ldr	r3, [r3, #8]
 800469c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046a0:	d004      	beq.n	80046ac <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	689b      	ldr	r3, [r3, #8]
 80046a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046aa:	d107      	bne.n	80046bc <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	681a      	ldr	r2, [r3, #0]
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046ba:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80046c4:	d12a      	bne.n	800471c <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	689b      	ldr	r3, [r3, #8]
 80046ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046ce:	d012      	beq.n	80046f6 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	9300      	str	r3, [sp, #0]
 80046d4:	68bb      	ldr	r3, [r7, #8]
 80046d6:	2200      	movs	r2, #0
 80046d8:	2180      	movs	r1, #128	; 0x80
 80046da:	68f8      	ldr	r0, [r7, #12]
 80046dc:	f7ff ff67 	bl	80045ae <SPI_WaitFlagStateUntilTimeout>
 80046e0:	4603      	mov	r3, r0
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d02d      	beq.n	8004742 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046ea:	f043 0220 	orr.w	r2, r3, #32
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80046f2:	2303      	movs	r3, #3
 80046f4:	e026      	b.n	8004744 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	9300      	str	r3, [sp, #0]
 80046fa:	68bb      	ldr	r3, [r7, #8]
 80046fc:	2200      	movs	r2, #0
 80046fe:	2101      	movs	r1, #1
 8004700:	68f8      	ldr	r0, [r7, #12]
 8004702:	f7ff ff54 	bl	80045ae <SPI_WaitFlagStateUntilTimeout>
 8004706:	4603      	mov	r3, r0
 8004708:	2b00      	cmp	r3, #0
 800470a:	d01a      	beq.n	8004742 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004710:	f043 0220 	orr.w	r2, r3, #32
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004718:	2303      	movs	r3, #3
 800471a:	e013      	b.n	8004744 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	9300      	str	r3, [sp, #0]
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	2200      	movs	r2, #0
 8004724:	2101      	movs	r1, #1
 8004726:	68f8      	ldr	r0, [r7, #12]
 8004728:	f7ff ff41 	bl	80045ae <SPI_WaitFlagStateUntilTimeout>
 800472c:	4603      	mov	r3, r0
 800472e:	2b00      	cmp	r3, #0
 8004730:	d007      	beq.n	8004742 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004736:	f043 0220 	orr.w	r2, r3, #32
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800473e:	2303      	movs	r3, #3
 8004740:	e000      	b.n	8004744 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004742:	2300      	movs	r3, #0
}
 8004744:	4618      	mov	r0, r3
 8004746:	3710      	adds	r7, #16
 8004748:	46bd      	mov	sp, r7
 800474a:	bd80      	pop	{r7, pc}

0800474c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b088      	sub	sp, #32
 8004750:	af02      	add	r7, sp, #8
 8004752:	60f8      	str	r0, [r7, #12]
 8004754:	60b9      	str	r1, [r7, #8]
 8004756:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004758:	4b1b      	ldr	r3, [pc, #108]	; (80047c8 <SPI_EndRxTxTransaction+0x7c>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a1b      	ldr	r2, [pc, #108]	; (80047cc <SPI_EndRxTxTransaction+0x80>)
 800475e:	fba2 2303 	umull	r2, r3, r2, r3
 8004762:	0d5b      	lsrs	r3, r3, #21
 8004764:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004768:	fb02 f303 	mul.w	r3, r2, r3
 800476c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004776:	d112      	bne.n	800479e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	9300      	str	r3, [sp, #0]
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	2200      	movs	r2, #0
 8004780:	2180      	movs	r1, #128	; 0x80
 8004782:	68f8      	ldr	r0, [r7, #12]
 8004784:	f7ff ff13 	bl	80045ae <SPI_WaitFlagStateUntilTimeout>
 8004788:	4603      	mov	r3, r0
 800478a:	2b00      	cmp	r3, #0
 800478c:	d016      	beq.n	80047bc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004792:	f043 0220 	orr.w	r2, r3, #32
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800479a:	2303      	movs	r3, #3
 800479c:	e00f      	b.n	80047be <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d00a      	beq.n	80047ba <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80047a4:	697b      	ldr	r3, [r7, #20]
 80047a6:	3b01      	subs	r3, #1
 80047a8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	689b      	ldr	r3, [r3, #8]
 80047b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047b4:	2b80      	cmp	r3, #128	; 0x80
 80047b6:	d0f2      	beq.n	800479e <SPI_EndRxTxTransaction+0x52>
 80047b8:	e000      	b.n	80047bc <SPI_EndRxTxTransaction+0x70>
        break;
 80047ba:	bf00      	nop
  }

  return HAL_OK;
 80047bc:	2300      	movs	r3, #0
}
 80047be:	4618      	mov	r0, r3
 80047c0:	3718      	adds	r7, #24
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bd80      	pop	{r7, pc}
 80047c6:	bf00      	nop
 80047c8:	20000010 	.word	0x20000010
 80047cc:	165e9f81 	.word	0x165e9f81

080047d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b082      	sub	sp, #8
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d101      	bne.n	80047e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80047de:	2301      	movs	r3, #1
 80047e0:	e01d      	b.n	800481e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047e8:	b2db      	uxtb	r3, r3
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d106      	bne.n	80047fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2200      	movs	r2, #0
 80047f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80047f6:	6878      	ldr	r0, [r7, #4]
 80047f8:	f000 f815 	bl	8004826 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2202      	movs	r2, #2
 8004800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681a      	ldr	r2, [r3, #0]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	3304      	adds	r3, #4
 800480c:	4619      	mov	r1, r3
 800480e:	4610      	mov	r0, r2
 8004810:	f000 f968 	bl	8004ae4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2201      	movs	r2, #1
 8004818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800481c:	2300      	movs	r3, #0
}
 800481e:	4618      	mov	r0, r3
 8004820:	3708      	adds	r7, #8
 8004822:	46bd      	mov	sp, r7
 8004824:	bd80      	pop	{r7, pc}

08004826 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004826:	b480      	push	{r7}
 8004828:	b083      	sub	sp, #12
 800482a:	af00      	add	r7, sp, #0
 800482c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800482e:	bf00      	nop
 8004830:	370c      	adds	r7, #12
 8004832:	46bd      	mov	sp, r7
 8004834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004838:	4770      	bx	lr

0800483a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800483a:	b480      	push	{r7}
 800483c:	b085      	sub	sp, #20
 800483e:	af00      	add	r7, sp, #0
 8004840:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	68da      	ldr	r2, [r3, #12]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f042 0201 	orr.w	r2, r2, #1
 8004850:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	689b      	ldr	r3, [r3, #8]
 8004858:	f003 0307 	and.w	r3, r3, #7
 800485c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	2b06      	cmp	r3, #6
 8004862:	d007      	beq.n	8004874 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	681a      	ldr	r2, [r3, #0]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f042 0201 	orr.w	r2, r2, #1
 8004872:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004874:	2300      	movs	r3, #0
}
 8004876:	4618      	mov	r0, r3
 8004878:	3714      	adds	r7, #20
 800487a:	46bd      	mov	sp, r7
 800487c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004880:	4770      	bx	lr

08004882 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004882:	b580      	push	{r7, lr}
 8004884:	b082      	sub	sp, #8
 8004886:	af00      	add	r7, sp, #0
 8004888:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	691b      	ldr	r3, [r3, #16]
 8004890:	f003 0302 	and.w	r3, r3, #2
 8004894:	2b02      	cmp	r3, #2
 8004896:	d122      	bne.n	80048de <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	68db      	ldr	r3, [r3, #12]
 800489e:	f003 0302 	and.w	r3, r3, #2
 80048a2:	2b02      	cmp	r3, #2
 80048a4:	d11b      	bne.n	80048de <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f06f 0202 	mvn.w	r2, #2
 80048ae:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2201      	movs	r2, #1
 80048b4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	699b      	ldr	r3, [r3, #24]
 80048bc:	f003 0303 	and.w	r3, r3, #3
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d003      	beq.n	80048cc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80048c4:	6878      	ldr	r0, [r7, #4]
 80048c6:	f000 f8ee 	bl	8004aa6 <HAL_TIM_IC_CaptureCallback>
 80048ca:	e005      	b.n	80048d8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80048cc:	6878      	ldr	r0, [r7, #4]
 80048ce:	f000 f8e0 	bl	8004a92 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	f000 f8f1 	bl	8004aba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2200      	movs	r2, #0
 80048dc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	691b      	ldr	r3, [r3, #16]
 80048e4:	f003 0304 	and.w	r3, r3, #4
 80048e8:	2b04      	cmp	r3, #4
 80048ea:	d122      	bne.n	8004932 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	68db      	ldr	r3, [r3, #12]
 80048f2:	f003 0304 	and.w	r3, r3, #4
 80048f6:	2b04      	cmp	r3, #4
 80048f8:	d11b      	bne.n	8004932 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f06f 0204 	mvn.w	r2, #4
 8004902:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2202      	movs	r2, #2
 8004908:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	699b      	ldr	r3, [r3, #24]
 8004910:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004914:	2b00      	cmp	r3, #0
 8004916:	d003      	beq.n	8004920 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004918:	6878      	ldr	r0, [r7, #4]
 800491a:	f000 f8c4 	bl	8004aa6 <HAL_TIM_IC_CaptureCallback>
 800491e:	e005      	b.n	800492c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004920:	6878      	ldr	r0, [r7, #4]
 8004922:	f000 f8b6 	bl	8004a92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004926:	6878      	ldr	r0, [r7, #4]
 8004928:	f000 f8c7 	bl	8004aba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2200      	movs	r2, #0
 8004930:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	691b      	ldr	r3, [r3, #16]
 8004938:	f003 0308 	and.w	r3, r3, #8
 800493c:	2b08      	cmp	r3, #8
 800493e:	d122      	bne.n	8004986 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	68db      	ldr	r3, [r3, #12]
 8004946:	f003 0308 	and.w	r3, r3, #8
 800494a:	2b08      	cmp	r3, #8
 800494c:	d11b      	bne.n	8004986 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f06f 0208 	mvn.w	r2, #8
 8004956:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2204      	movs	r2, #4
 800495c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	69db      	ldr	r3, [r3, #28]
 8004964:	f003 0303 	and.w	r3, r3, #3
 8004968:	2b00      	cmp	r3, #0
 800496a:	d003      	beq.n	8004974 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800496c:	6878      	ldr	r0, [r7, #4]
 800496e:	f000 f89a 	bl	8004aa6 <HAL_TIM_IC_CaptureCallback>
 8004972:	e005      	b.n	8004980 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004974:	6878      	ldr	r0, [r7, #4]
 8004976:	f000 f88c 	bl	8004a92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800497a:	6878      	ldr	r0, [r7, #4]
 800497c:	f000 f89d 	bl	8004aba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2200      	movs	r2, #0
 8004984:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	691b      	ldr	r3, [r3, #16]
 800498c:	f003 0310 	and.w	r3, r3, #16
 8004990:	2b10      	cmp	r3, #16
 8004992:	d122      	bne.n	80049da <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	68db      	ldr	r3, [r3, #12]
 800499a:	f003 0310 	and.w	r3, r3, #16
 800499e:	2b10      	cmp	r3, #16
 80049a0:	d11b      	bne.n	80049da <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f06f 0210 	mvn.w	r2, #16
 80049aa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2208      	movs	r2, #8
 80049b0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	69db      	ldr	r3, [r3, #28]
 80049b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d003      	beq.n	80049c8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049c0:	6878      	ldr	r0, [r7, #4]
 80049c2:	f000 f870 	bl	8004aa6 <HAL_TIM_IC_CaptureCallback>
 80049c6:	e005      	b.n	80049d4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049c8:	6878      	ldr	r0, [r7, #4]
 80049ca:	f000 f862 	bl	8004a92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049ce:	6878      	ldr	r0, [r7, #4]
 80049d0:	f000 f873 	bl	8004aba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2200      	movs	r2, #0
 80049d8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	691b      	ldr	r3, [r3, #16]
 80049e0:	f003 0301 	and.w	r3, r3, #1
 80049e4:	2b01      	cmp	r3, #1
 80049e6:	d10e      	bne.n	8004a06 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	68db      	ldr	r3, [r3, #12]
 80049ee:	f003 0301 	and.w	r3, r3, #1
 80049f2:	2b01      	cmp	r3, #1
 80049f4:	d107      	bne.n	8004a06 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f06f 0201 	mvn.w	r2, #1
 80049fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004a00:	6878      	ldr	r0, [r7, #4]
 8004a02:	f7fd fabd 	bl	8001f80 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	691b      	ldr	r3, [r3, #16]
 8004a0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a10:	2b80      	cmp	r3, #128	; 0x80
 8004a12:	d10e      	bne.n	8004a32 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	68db      	ldr	r3, [r3, #12]
 8004a1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a1e:	2b80      	cmp	r3, #128	; 0x80
 8004a20:	d107      	bne.n	8004a32 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004a2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004a2c:	6878      	ldr	r0, [r7, #4]
 8004a2e:	f000 f903 	bl	8004c38 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	691b      	ldr	r3, [r3, #16]
 8004a38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a3c:	2b40      	cmp	r3, #64	; 0x40
 8004a3e:	d10e      	bne.n	8004a5e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	68db      	ldr	r3, [r3, #12]
 8004a46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a4a:	2b40      	cmp	r3, #64	; 0x40
 8004a4c:	d107      	bne.n	8004a5e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004a56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004a58:	6878      	ldr	r0, [r7, #4]
 8004a5a:	f000 f838 	bl	8004ace <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	691b      	ldr	r3, [r3, #16]
 8004a64:	f003 0320 	and.w	r3, r3, #32
 8004a68:	2b20      	cmp	r3, #32
 8004a6a:	d10e      	bne.n	8004a8a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	68db      	ldr	r3, [r3, #12]
 8004a72:	f003 0320 	and.w	r3, r3, #32
 8004a76:	2b20      	cmp	r3, #32
 8004a78:	d107      	bne.n	8004a8a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f06f 0220 	mvn.w	r2, #32
 8004a82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004a84:	6878      	ldr	r0, [r7, #4]
 8004a86:	f000 f8cd 	bl	8004c24 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004a8a:	bf00      	nop
 8004a8c:	3708      	adds	r7, #8
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	bd80      	pop	{r7, pc}

08004a92 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004a92:	b480      	push	{r7}
 8004a94:	b083      	sub	sp, #12
 8004a96:	af00      	add	r7, sp, #0
 8004a98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004a9a:	bf00      	nop
 8004a9c:	370c      	adds	r7, #12
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa4:	4770      	bx	lr

08004aa6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004aa6:	b480      	push	{r7}
 8004aa8:	b083      	sub	sp, #12
 8004aaa:	af00      	add	r7, sp, #0
 8004aac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004aae:	bf00      	nop
 8004ab0:	370c      	adds	r7, #12
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab8:	4770      	bx	lr

08004aba <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004aba:	b480      	push	{r7}
 8004abc:	b083      	sub	sp, #12
 8004abe:	af00      	add	r7, sp, #0
 8004ac0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004ac2:	bf00      	nop
 8004ac4:	370c      	adds	r7, #12
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004acc:	4770      	bx	lr

08004ace <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004ace:	b480      	push	{r7}
 8004ad0:	b083      	sub	sp, #12
 8004ad2:	af00      	add	r7, sp, #0
 8004ad4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004ad6:	bf00      	nop
 8004ad8:	370c      	adds	r7, #12
 8004ada:	46bd      	mov	sp, r7
 8004adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae0:	4770      	bx	lr
	...

08004ae4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	b085      	sub	sp, #20
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
 8004aec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	4a40      	ldr	r2, [pc, #256]	; (8004bf8 <TIM_Base_SetConfig+0x114>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d013      	beq.n	8004b24 <TIM_Base_SetConfig+0x40>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b02:	d00f      	beq.n	8004b24 <TIM_Base_SetConfig+0x40>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	4a3d      	ldr	r2, [pc, #244]	; (8004bfc <TIM_Base_SetConfig+0x118>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d00b      	beq.n	8004b24 <TIM_Base_SetConfig+0x40>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	4a3c      	ldr	r2, [pc, #240]	; (8004c00 <TIM_Base_SetConfig+0x11c>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d007      	beq.n	8004b24 <TIM_Base_SetConfig+0x40>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	4a3b      	ldr	r2, [pc, #236]	; (8004c04 <TIM_Base_SetConfig+0x120>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d003      	beq.n	8004b24 <TIM_Base_SetConfig+0x40>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	4a3a      	ldr	r2, [pc, #232]	; (8004c08 <TIM_Base_SetConfig+0x124>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d108      	bne.n	8004b36 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	68fa      	ldr	r2, [r7, #12]
 8004b32:	4313      	orrs	r3, r2
 8004b34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	4a2f      	ldr	r2, [pc, #188]	; (8004bf8 <TIM_Base_SetConfig+0x114>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d02b      	beq.n	8004b96 <TIM_Base_SetConfig+0xb2>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b44:	d027      	beq.n	8004b96 <TIM_Base_SetConfig+0xb2>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	4a2c      	ldr	r2, [pc, #176]	; (8004bfc <TIM_Base_SetConfig+0x118>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d023      	beq.n	8004b96 <TIM_Base_SetConfig+0xb2>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	4a2b      	ldr	r2, [pc, #172]	; (8004c00 <TIM_Base_SetConfig+0x11c>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d01f      	beq.n	8004b96 <TIM_Base_SetConfig+0xb2>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	4a2a      	ldr	r2, [pc, #168]	; (8004c04 <TIM_Base_SetConfig+0x120>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d01b      	beq.n	8004b96 <TIM_Base_SetConfig+0xb2>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	4a29      	ldr	r2, [pc, #164]	; (8004c08 <TIM_Base_SetConfig+0x124>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d017      	beq.n	8004b96 <TIM_Base_SetConfig+0xb2>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	4a28      	ldr	r2, [pc, #160]	; (8004c0c <TIM_Base_SetConfig+0x128>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d013      	beq.n	8004b96 <TIM_Base_SetConfig+0xb2>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	4a27      	ldr	r2, [pc, #156]	; (8004c10 <TIM_Base_SetConfig+0x12c>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d00f      	beq.n	8004b96 <TIM_Base_SetConfig+0xb2>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	4a26      	ldr	r2, [pc, #152]	; (8004c14 <TIM_Base_SetConfig+0x130>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d00b      	beq.n	8004b96 <TIM_Base_SetConfig+0xb2>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	4a25      	ldr	r2, [pc, #148]	; (8004c18 <TIM_Base_SetConfig+0x134>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d007      	beq.n	8004b96 <TIM_Base_SetConfig+0xb2>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	4a24      	ldr	r2, [pc, #144]	; (8004c1c <TIM_Base_SetConfig+0x138>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d003      	beq.n	8004b96 <TIM_Base_SetConfig+0xb2>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	4a23      	ldr	r2, [pc, #140]	; (8004c20 <TIM_Base_SetConfig+0x13c>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d108      	bne.n	8004ba8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	68db      	ldr	r3, [r3, #12]
 8004ba2:	68fa      	ldr	r2, [r7, #12]
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	695b      	ldr	r3, [r3, #20]
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	68fa      	ldr	r2, [r7, #12]
 8004bba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	689a      	ldr	r2, [r3, #8]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	681a      	ldr	r2, [r3, #0]
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	4a0a      	ldr	r2, [pc, #40]	; (8004bf8 <TIM_Base_SetConfig+0x114>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d003      	beq.n	8004bdc <TIM_Base_SetConfig+0xf8>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	4a0c      	ldr	r2, [pc, #48]	; (8004c08 <TIM_Base_SetConfig+0x124>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d103      	bne.n	8004be4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	691a      	ldr	r2, [r3, #16]
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2201      	movs	r2, #1
 8004be8:	615a      	str	r2, [r3, #20]
}
 8004bea:	bf00      	nop
 8004bec:	3714      	adds	r7, #20
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf4:	4770      	bx	lr
 8004bf6:	bf00      	nop
 8004bf8:	40010000 	.word	0x40010000
 8004bfc:	40000400 	.word	0x40000400
 8004c00:	40000800 	.word	0x40000800
 8004c04:	40000c00 	.word	0x40000c00
 8004c08:	40010400 	.word	0x40010400
 8004c0c:	40014000 	.word	0x40014000
 8004c10:	40014400 	.word	0x40014400
 8004c14:	40014800 	.word	0x40014800
 8004c18:	40001800 	.word	0x40001800
 8004c1c:	40001c00 	.word	0x40001c00
 8004c20:	40002000 	.word	0x40002000

08004c24 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004c24:	b480      	push	{r7}
 8004c26:	b083      	sub	sp, #12
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004c2c:	bf00      	nop
 8004c2e:	370c      	adds	r7, #12
 8004c30:	46bd      	mov	sp, r7
 8004c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c36:	4770      	bx	lr

08004c38 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004c38:	b480      	push	{r7}
 8004c3a:	b083      	sub	sp, #12
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004c40:	bf00      	nop
 8004c42:	370c      	adds	r7, #12
 8004c44:	46bd      	mov	sp, r7
 8004c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4a:	4770      	bx	lr

08004c4c <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004c4c:	b480      	push	{r7}
 8004c4e:	b085      	sub	sp, #20
 8004c50:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004c52:	f3ef 8305 	mrs	r3, IPSR
 8004c56:	60bb      	str	r3, [r7, #8]
  return(result);
 8004c58:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d10f      	bne.n	8004c7e <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c5e:	f3ef 8310 	mrs	r3, PRIMASK
 8004c62:	607b      	str	r3, [r7, #4]
  return(result);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d109      	bne.n	8004c7e <osKernelInitialize+0x32>
 8004c6a:	4b11      	ldr	r3, [pc, #68]	; (8004cb0 <osKernelInitialize+0x64>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	2b02      	cmp	r3, #2
 8004c70:	d109      	bne.n	8004c86 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004c72:	f3ef 8311 	mrs	r3, BASEPRI
 8004c76:	603b      	str	r3, [r7, #0]
  return(result);
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d003      	beq.n	8004c86 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8004c7e:	f06f 0305 	mvn.w	r3, #5
 8004c82:	60fb      	str	r3, [r7, #12]
 8004c84:	e00c      	b.n	8004ca0 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004c86:	4b0a      	ldr	r3, [pc, #40]	; (8004cb0 <osKernelInitialize+0x64>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d105      	bne.n	8004c9a <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8004c8e:	4b08      	ldr	r3, [pc, #32]	; (8004cb0 <osKernelInitialize+0x64>)
 8004c90:	2201      	movs	r2, #1
 8004c92:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004c94:	2300      	movs	r3, #0
 8004c96:	60fb      	str	r3, [r7, #12]
 8004c98:	e002      	b.n	8004ca0 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8004c9a:	f04f 33ff 	mov.w	r3, #4294967295
 8004c9e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004ca0:	68fb      	ldr	r3, [r7, #12]
}
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	3714      	adds	r7, #20
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cac:	4770      	bx	lr
 8004cae:	bf00      	nop
 8004cb0:	2000010c 	.word	0x2000010c

08004cb4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b084      	sub	sp, #16
 8004cb8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004cba:	f3ef 8305 	mrs	r3, IPSR
 8004cbe:	60bb      	str	r3, [r7, #8]
  return(result);
 8004cc0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d10f      	bne.n	8004ce6 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004cc6:	f3ef 8310 	mrs	r3, PRIMASK
 8004cca:	607b      	str	r3, [r7, #4]
  return(result);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d109      	bne.n	8004ce6 <osKernelStart+0x32>
 8004cd2:	4b11      	ldr	r3, [pc, #68]	; (8004d18 <osKernelStart+0x64>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	2b02      	cmp	r3, #2
 8004cd8:	d109      	bne.n	8004cee <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004cda:	f3ef 8311 	mrs	r3, BASEPRI
 8004cde:	603b      	str	r3, [r7, #0]
  return(result);
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d003      	beq.n	8004cee <osKernelStart+0x3a>
    stat = osErrorISR;
 8004ce6:	f06f 0305 	mvn.w	r3, #5
 8004cea:	60fb      	str	r3, [r7, #12]
 8004cec:	e00e      	b.n	8004d0c <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8004cee:	4b0a      	ldr	r3, [pc, #40]	; (8004d18 <osKernelStart+0x64>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	2b01      	cmp	r3, #1
 8004cf4:	d107      	bne.n	8004d06 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8004cf6:	4b08      	ldr	r3, [pc, #32]	; (8004d18 <osKernelStart+0x64>)
 8004cf8:	2202      	movs	r2, #2
 8004cfa:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8004cfc:	f001 f9ca 	bl	8006094 <vTaskStartScheduler>
      stat = osOK;
 8004d00:	2300      	movs	r3, #0
 8004d02:	60fb      	str	r3, [r7, #12]
 8004d04:	e002      	b.n	8004d0c <osKernelStart+0x58>
    } else {
      stat = osError;
 8004d06:	f04f 33ff 	mov.w	r3, #4294967295
 8004d0a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004d0c:	68fb      	ldr	r3, [r7, #12]
}
 8004d0e:	4618      	mov	r0, r3
 8004d10:	3710      	adds	r7, #16
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bd80      	pop	{r7, pc}
 8004d16:	bf00      	nop
 8004d18:	2000010c 	.word	0x2000010c

08004d1c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b092      	sub	sp, #72	; 0x48
 8004d20:	af04      	add	r7, sp, #16
 8004d22:	60f8      	str	r0, [r7, #12]
 8004d24:	60b9      	str	r1, [r7, #8]
 8004d26:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004d28:	2300      	movs	r3, #0
 8004d2a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004d2c:	f3ef 8305 	mrs	r3, IPSR
 8004d30:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	f040 8094 	bne.w	8004e62 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d3a:	f3ef 8310 	mrs	r3, PRIMASK
 8004d3e:	623b      	str	r3, [r7, #32]
  return(result);
 8004d40:	6a3b      	ldr	r3, [r7, #32]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	f040 808d 	bne.w	8004e62 <osThreadNew+0x146>
 8004d48:	4b48      	ldr	r3, [pc, #288]	; (8004e6c <osThreadNew+0x150>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	2b02      	cmp	r3, #2
 8004d4e:	d106      	bne.n	8004d5e <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004d50:	f3ef 8311 	mrs	r3, BASEPRI
 8004d54:	61fb      	str	r3, [r7, #28]
  return(result);
 8004d56:	69fb      	ldr	r3, [r7, #28]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	f040 8082 	bne.w	8004e62 <osThreadNew+0x146>
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d07e      	beq.n	8004e62 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8004d64:	2380      	movs	r3, #128	; 0x80
 8004d66:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8004d68:	2318      	movs	r3, #24
 8004d6a:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8004d70:	f107 031b 	add.w	r3, r7, #27
 8004d74:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8004d76:	f04f 33ff 	mov.w	r3, #4294967295
 8004d7a:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d045      	beq.n	8004e0e <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d002      	beq.n	8004d90 <osThreadNew+0x74>
        name = attr->name;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	699b      	ldr	r3, [r3, #24]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d002      	beq.n	8004d9e <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	699b      	ldr	r3, [r3, #24]
 8004d9c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004d9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d008      	beq.n	8004db6 <osThreadNew+0x9a>
 8004da4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004da6:	2b38      	cmp	r3, #56	; 0x38
 8004da8:	d805      	bhi.n	8004db6 <osThreadNew+0x9a>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	f003 0301 	and.w	r3, r3, #1
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d001      	beq.n	8004dba <osThreadNew+0x9e>
        return (NULL);
 8004db6:	2300      	movs	r3, #0
 8004db8:	e054      	b.n	8004e64 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	695b      	ldr	r3, [r3, #20]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d003      	beq.n	8004dca <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	695b      	ldr	r3, [r3, #20]
 8004dc6:	089b      	lsrs	r3, r3, #2
 8004dc8:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	689b      	ldr	r3, [r3, #8]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d00e      	beq.n	8004df0 <osThreadNew+0xd4>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	68db      	ldr	r3, [r3, #12]
 8004dd6:	2b5b      	cmp	r3, #91	; 0x5b
 8004dd8:	d90a      	bls.n	8004df0 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d006      	beq.n	8004df0 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	695b      	ldr	r3, [r3, #20]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d002      	beq.n	8004df0 <osThreadNew+0xd4>
        mem = 1;
 8004dea:	2301      	movs	r3, #1
 8004dec:	62bb      	str	r3, [r7, #40]	; 0x28
 8004dee:	e010      	b.n	8004e12 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	689b      	ldr	r3, [r3, #8]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d10c      	bne.n	8004e12 <osThreadNew+0xf6>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	68db      	ldr	r3, [r3, #12]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d108      	bne.n	8004e12 <osThreadNew+0xf6>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	691b      	ldr	r3, [r3, #16]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d104      	bne.n	8004e12 <osThreadNew+0xf6>
          mem = 0;
 8004e08:	2300      	movs	r3, #0
 8004e0a:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e0c:	e001      	b.n	8004e12 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8004e0e:	2300      	movs	r3, #0
 8004e10:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8004e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e14:	2b01      	cmp	r3, #1
 8004e16:	d110      	bne.n	8004e3a <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8004e1c:	687a      	ldr	r2, [r7, #4]
 8004e1e:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004e20:	9202      	str	r2, [sp, #8]
 8004e22:	9301      	str	r3, [sp, #4]
 8004e24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e26:	9300      	str	r3, [sp, #0]
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e2c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004e2e:	68f8      	ldr	r0, [r7, #12]
 8004e30:	f000 ff68 	bl	8005d04 <xTaskCreateStatic>
 8004e34:	4603      	mov	r3, r0
 8004e36:	617b      	str	r3, [r7, #20]
 8004e38:	e013      	b.n	8004e62 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8004e3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d110      	bne.n	8004e62 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004e40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e42:	b29a      	uxth	r2, r3
 8004e44:	f107 0314 	add.w	r3, r7, #20
 8004e48:	9301      	str	r3, [sp, #4]
 8004e4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e4c:	9300      	str	r3, [sp, #0]
 8004e4e:	68bb      	ldr	r3, [r7, #8]
 8004e50:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004e52:	68f8      	ldr	r0, [r7, #12]
 8004e54:	f000 ffaf 	bl	8005db6 <xTaskCreate>
 8004e58:	4603      	mov	r3, r0
 8004e5a:	2b01      	cmp	r3, #1
 8004e5c:	d001      	beq.n	8004e62 <osThreadNew+0x146>
          hTask = NULL;
 8004e5e:	2300      	movs	r3, #0
 8004e60:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004e62:	697b      	ldr	r3, [r7, #20]
}
 8004e64:	4618      	mov	r0, r3
 8004e66:	3738      	adds	r7, #56	; 0x38
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	bd80      	pop	{r7, pc}
 8004e6c:	2000010c 	.word	0x2000010c

08004e70 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004e70:	b480      	push	{r7}
 8004e72:	b085      	sub	sp, #20
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	60f8      	str	r0, [r7, #12]
 8004e78:	60b9      	str	r1, [r7, #8]
 8004e7a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	4a07      	ldr	r2, [pc, #28]	; (8004e9c <vApplicationGetIdleTaskMemory+0x2c>)
 8004e80:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004e82:	68bb      	ldr	r3, [r7, #8]
 8004e84:	4a06      	ldr	r2, [pc, #24]	; (8004ea0 <vApplicationGetIdleTaskMemory+0x30>)
 8004e86:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2280      	movs	r2, #128	; 0x80
 8004e8c:	601a      	str	r2, [r3, #0]
}
 8004e8e:	bf00      	nop
 8004e90:	3714      	adds	r7, #20
 8004e92:	46bd      	mov	sp, r7
 8004e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e98:	4770      	bx	lr
 8004e9a:	bf00      	nop
 8004e9c:	20000110 	.word	0x20000110
 8004ea0:	2000016c 	.word	0x2000016c

08004ea4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004ea4:	b480      	push	{r7}
 8004ea6:	b085      	sub	sp, #20
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	60f8      	str	r0, [r7, #12]
 8004eac:	60b9      	str	r1, [r7, #8]
 8004eae:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	4a07      	ldr	r2, [pc, #28]	; (8004ed0 <vApplicationGetTimerTaskMemory+0x2c>)
 8004eb4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004eb6:	68bb      	ldr	r3, [r7, #8]
 8004eb8:	4a06      	ldr	r2, [pc, #24]	; (8004ed4 <vApplicationGetTimerTaskMemory+0x30>)
 8004eba:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004ec2:	601a      	str	r2, [r3, #0]
}
 8004ec4:	bf00      	nop
 8004ec6:	3714      	adds	r7, #20
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ece:	4770      	bx	lr
 8004ed0:	2000036c 	.word	0x2000036c
 8004ed4:	200003c8 	.word	0x200003c8

08004ed8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004ed8:	b480      	push	{r7}
 8004eda:	b083      	sub	sp, #12
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	f103 0208 	add.w	r2, r3, #8
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	f04f 32ff 	mov.w	r2, #4294967295
 8004ef0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	f103 0208 	add.w	r2, r3, #8
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	f103 0208 	add.w	r2, r3, #8
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2200      	movs	r2, #0
 8004f0a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004f0c:	bf00      	nop
 8004f0e:	370c      	adds	r7, #12
 8004f10:	46bd      	mov	sp, r7
 8004f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f16:	4770      	bx	lr

08004f18 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b083      	sub	sp, #12
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2200      	movs	r2, #0
 8004f24:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004f26:	bf00      	nop
 8004f28:	370c      	adds	r7, #12
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f30:	4770      	bx	lr

08004f32 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004f32:	b480      	push	{r7}
 8004f34:	b085      	sub	sp, #20
 8004f36:	af00      	add	r7, sp, #0
 8004f38:	6078      	str	r0, [r7, #4]
 8004f3a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	685b      	ldr	r3, [r3, #4]
 8004f40:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	68fa      	ldr	r2, [r7, #12]
 8004f46:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	689a      	ldr	r2, [r3, #8]
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	689b      	ldr	r3, [r3, #8]
 8004f54:	683a      	ldr	r2, [r7, #0]
 8004f56:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	683a      	ldr	r2, [r7, #0]
 8004f5c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	687a      	ldr	r2, [r7, #4]
 8004f62:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	1c5a      	adds	r2, r3, #1
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	601a      	str	r2, [r3, #0]
}
 8004f6e:	bf00      	nop
 8004f70:	3714      	adds	r7, #20
 8004f72:	46bd      	mov	sp, r7
 8004f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f78:	4770      	bx	lr

08004f7a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004f7a:	b480      	push	{r7}
 8004f7c:	b085      	sub	sp, #20
 8004f7e:	af00      	add	r7, sp, #0
 8004f80:	6078      	str	r0, [r7, #4]
 8004f82:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004f8a:	68bb      	ldr	r3, [r7, #8]
 8004f8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f90:	d103      	bne.n	8004f9a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	691b      	ldr	r3, [r3, #16]
 8004f96:	60fb      	str	r3, [r7, #12]
 8004f98:	e00c      	b.n	8004fb4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	3308      	adds	r3, #8
 8004f9e:	60fb      	str	r3, [r7, #12]
 8004fa0:	e002      	b.n	8004fa8 <vListInsert+0x2e>
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	685b      	ldr	r3, [r3, #4]
 8004fa6:	60fb      	str	r3, [r7, #12]
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	685b      	ldr	r3, [r3, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	68ba      	ldr	r2, [r7, #8]
 8004fb0:	429a      	cmp	r2, r3
 8004fb2:	d2f6      	bcs.n	8004fa2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	685a      	ldr	r2, [r3, #4]
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	685b      	ldr	r3, [r3, #4]
 8004fc0:	683a      	ldr	r2, [r7, #0]
 8004fc2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	68fa      	ldr	r2, [r7, #12]
 8004fc8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	683a      	ldr	r2, [r7, #0]
 8004fce:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	687a      	ldr	r2, [r7, #4]
 8004fd4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	1c5a      	adds	r2, r3, #1
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	601a      	str	r2, [r3, #0]
}
 8004fe0:	bf00      	nop
 8004fe2:	3714      	adds	r7, #20
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fea:	4770      	bx	lr

08004fec <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004fec:	b480      	push	{r7}
 8004fee:	b085      	sub	sp, #20
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	691b      	ldr	r3, [r3, #16]
 8004ff8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	685b      	ldr	r3, [r3, #4]
 8004ffe:	687a      	ldr	r2, [r7, #4]
 8005000:	6892      	ldr	r2, [r2, #8]
 8005002:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	689b      	ldr	r3, [r3, #8]
 8005008:	687a      	ldr	r2, [r7, #4]
 800500a:	6852      	ldr	r2, [r2, #4]
 800500c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	685b      	ldr	r3, [r3, #4]
 8005012:	687a      	ldr	r2, [r7, #4]
 8005014:	429a      	cmp	r2, r3
 8005016:	d103      	bne.n	8005020 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	689a      	ldr	r2, [r3, #8]
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2200      	movs	r2, #0
 8005024:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	1e5a      	subs	r2, r3, #1
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
}
 8005034:	4618      	mov	r0, r3
 8005036:	3714      	adds	r7, #20
 8005038:	46bd      	mov	sp, r7
 800503a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503e:	4770      	bx	lr

08005040 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b084      	sub	sp, #16
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
 8005048:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d109      	bne.n	8005068 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005054:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005058:	f383 8811 	msr	BASEPRI, r3
 800505c:	f3bf 8f6f 	isb	sy
 8005060:	f3bf 8f4f 	dsb	sy
 8005064:	60bb      	str	r3, [r7, #8]
 8005066:	e7fe      	b.n	8005066 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8005068:	f002 fa68 	bl	800753c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681a      	ldr	r2, [r3, #0]
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005074:	68f9      	ldr	r1, [r7, #12]
 8005076:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005078:	fb01 f303 	mul.w	r3, r1, r3
 800507c:	441a      	add	r2, r3
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	2200      	movs	r2, #0
 8005086:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681a      	ldr	r2, [r3, #0]
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681a      	ldr	r2, [r3, #0]
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005098:	3b01      	subs	r3, #1
 800509a:	68f9      	ldr	r1, [r7, #12]
 800509c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800509e:	fb01 f303 	mul.w	r3, r1, r3
 80050a2:	441a      	add	r2, r3
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	22ff      	movs	r2, #255	; 0xff
 80050ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	22ff      	movs	r2, #255	; 0xff
 80050b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d114      	bne.n	80050e8 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	691b      	ldr	r3, [r3, #16]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d01a      	beq.n	80050fc <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	3310      	adds	r3, #16
 80050ca:	4618      	mov	r0, r3
 80050cc:	f001 fa68 	bl	80065a0 <xTaskRemoveFromEventList>
 80050d0:	4603      	mov	r3, r0
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d012      	beq.n	80050fc <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80050d6:	4b0d      	ldr	r3, [pc, #52]	; (800510c <xQueueGenericReset+0xcc>)
 80050d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050dc:	601a      	str	r2, [r3, #0]
 80050de:	f3bf 8f4f 	dsb	sy
 80050e2:	f3bf 8f6f 	isb	sy
 80050e6:	e009      	b.n	80050fc <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	3310      	adds	r3, #16
 80050ec:	4618      	mov	r0, r3
 80050ee:	f7ff fef3 	bl	8004ed8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	3324      	adds	r3, #36	; 0x24
 80050f6:	4618      	mov	r0, r3
 80050f8:	f7ff feee 	bl	8004ed8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80050fc:	f002 fa4c 	bl	8007598 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005100:	2301      	movs	r3, #1
}
 8005102:	4618      	mov	r0, r3
 8005104:	3710      	adds	r7, #16
 8005106:	46bd      	mov	sp, r7
 8005108:	bd80      	pop	{r7, pc}
 800510a:	bf00      	nop
 800510c:	e000ed04 	.word	0xe000ed04

08005110 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005110:	b580      	push	{r7, lr}
 8005112:	b08e      	sub	sp, #56	; 0x38
 8005114:	af02      	add	r7, sp, #8
 8005116:	60f8      	str	r0, [r7, #12]
 8005118:	60b9      	str	r1, [r7, #8]
 800511a:	607a      	str	r2, [r7, #4]
 800511c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d109      	bne.n	8005138 <xQueueGenericCreateStatic+0x28>
 8005124:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005128:	f383 8811 	msr	BASEPRI, r3
 800512c:	f3bf 8f6f 	isb	sy
 8005130:	f3bf 8f4f 	dsb	sy
 8005134:	62bb      	str	r3, [r7, #40]	; 0x28
 8005136:	e7fe      	b.n	8005136 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d109      	bne.n	8005152 <xQueueGenericCreateStatic+0x42>
 800513e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005142:	f383 8811 	msr	BASEPRI, r3
 8005146:	f3bf 8f6f 	isb	sy
 800514a:	f3bf 8f4f 	dsb	sy
 800514e:	627b      	str	r3, [r7, #36]	; 0x24
 8005150:	e7fe      	b.n	8005150 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d002      	beq.n	800515e <xQueueGenericCreateStatic+0x4e>
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d001      	beq.n	8005162 <xQueueGenericCreateStatic+0x52>
 800515e:	2301      	movs	r3, #1
 8005160:	e000      	b.n	8005164 <xQueueGenericCreateStatic+0x54>
 8005162:	2300      	movs	r3, #0
 8005164:	2b00      	cmp	r3, #0
 8005166:	d109      	bne.n	800517c <xQueueGenericCreateStatic+0x6c>
 8005168:	f04f 0350 	mov.w	r3, #80	; 0x50
 800516c:	f383 8811 	msr	BASEPRI, r3
 8005170:	f3bf 8f6f 	isb	sy
 8005174:	f3bf 8f4f 	dsb	sy
 8005178:	623b      	str	r3, [r7, #32]
 800517a:	e7fe      	b.n	800517a <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d102      	bne.n	8005188 <xQueueGenericCreateStatic+0x78>
 8005182:	68bb      	ldr	r3, [r7, #8]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d101      	bne.n	800518c <xQueueGenericCreateStatic+0x7c>
 8005188:	2301      	movs	r3, #1
 800518a:	e000      	b.n	800518e <xQueueGenericCreateStatic+0x7e>
 800518c:	2300      	movs	r3, #0
 800518e:	2b00      	cmp	r3, #0
 8005190:	d109      	bne.n	80051a6 <xQueueGenericCreateStatic+0x96>
 8005192:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005196:	f383 8811 	msr	BASEPRI, r3
 800519a:	f3bf 8f6f 	isb	sy
 800519e:	f3bf 8f4f 	dsb	sy
 80051a2:	61fb      	str	r3, [r7, #28]
 80051a4:	e7fe      	b.n	80051a4 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80051a6:	2350      	movs	r3, #80	; 0x50
 80051a8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80051aa:	697b      	ldr	r3, [r7, #20]
 80051ac:	2b50      	cmp	r3, #80	; 0x50
 80051ae:	d009      	beq.n	80051c4 <xQueueGenericCreateStatic+0xb4>
 80051b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051b4:	f383 8811 	msr	BASEPRI, r3
 80051b8:	f3bf 8f6f 	isb	sy
 80051bc:	f3bf 8f4f 	dsb	sy
 80051c0:	61bb      	str	r3, [r7, #24]
 80051c2:	e7fe      	b.n	80051c2 <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80051c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d00d      	beq.n	80051ea <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80051ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051d0:	2201      	movs	r2, #1
 80051d2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80051d6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80051da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051dc:	9300      	str	r3, [sp, #0]
 80051de:	4613      	mov	r3, r2
 80051e0:	687a      	ldr	r2, [r7, #4]
 80051e2:	68b9      	ldr	r1, [r7, #8]
 80051e4:	68f8      	ldr	r0, [r7, #12]
 80051e6:	f000 f842 	bl	800526e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80051ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80051ec:	4618      	mov	r0, r3
 80051ee:	3730      	adds	r7, #48	; 0x30
 80051f0:	46bd      	mov	sp, r7
 80051f2:	bd80      	pop	{r7, pc}

080051f4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b08a      	sub	sp, #40	; 0x28
 80051f8:	af02      	add	r7, sp, #8
 80051fa:	60f8      	str	r0, [r7, #12]
 80051fc:	60b9      	str	r1, [r7, #8]
 80051fe:	4613      	mov	r3, r2
 8005200:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d109      	bne.n	800521c <xQueueGenericCreate+0x28>
 8005208:	f04f 0350 	mov.w	r3, #80	; 0x50
 800520c:	f383 8811 	msr	BASEPRI, r3
 8005210:	f3bf 8f6f 	isb	sy
 8005214:	f3bf 8f4f 	dsb	sy
 8005218:	613b      	str	r3, [r7, #16]
 800521a:	e7fe      	b.n	800521a <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d102      	bne.n	8005228 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8005222:	2300      	movs	r3, #0
 8005224:	61fb      	str	r3, [r7, #28]
 8005226:	e004      	b.n	8005232 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	68ba      	ldr	r2, [r7, #8]
 800522c:	fb02 f303 	mul.w	r3, r2, r3
 8005230:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8005232:	69fb      	ldr	r3, [r7, #28]
 8005234:	3350      	adds	r3, #80	; 0x50
 8005236:	4618      	mov	r0, r3
 8005238:	f002 fa9a 	bl	8007770 <pvPortMalloc>
 800523c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800523e:	69bb      	ldr	r3, [r7, #24]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d00f      	beq.n	8005264 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8005244:	69bb      	ldr	r3, [r7, #24]
 8005246:	3350      	adds	r3, #80	; 0x50
 8005248:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800524a:	69bb      	ldr	r3, [r7, #24]
 800524c:	2200      	movs	r2, #0
 800524e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005252:	79fa      	ldrb	r2, [r7, #7]
 8005254:	69bb      	ldr	r3, [r7, #24]
 8005256:	9300      	str	r3, [sp, #0]
 8005258:	4613      	mov	r3, r2
 800525a:	697a      	ldr	r2, [r7, #20]
 800525c:	68b9      	ldr	r1, [r7, #8]
 800525e:	68f8      	ldr	r0, [r7, #12]
 8005260:	f000 f805 	bl	800526e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8005264:	69bb      	ldr	r3, [r7, #24]
	}
 8005266:	4618      	mov	r0, r3
 8005268:	3720      	adds	r7, #32
 800526a:	46bd      	mov	sp, r7
 800526c:	bd80      	pop	{r7, pc}

0800526e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800526e:	b580      	push	{r7, lr}
 8005270:	b084      	sub	sp, #16
 8005272:	af00      	add	r7, sp, #0
 8005274:	60f8      	str	r0, [r7, #12]
 8005276:	60b9      	str	r1, [r7, #8]
 8005278:	607a      	str	r2, [r7, #4]
 800527a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d103      	bne.n	800528a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005282:	69bb      	ldr	r3, [r7, #24]
 8005284:	69ba      	ldr	r2, [r7, #24]
 8005286:	601a      	str	r2, [r3, #0]
 8005288:	e002      	b.n	8005290 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800528a:	69bb      	ldr	r3, [r7, #24]
 800528c:	687a      	ldr	r2, [r7, #4]
 800528e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005290:	69bb      	ldr	r3, [r7, #24]
 8005292:	68fa      	ldr	r2, [r7, #12]
 8005294:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005296:	69bb      	ldr	r3, [r7, #24]
 8005298:	68ba      	ldr	r2, [r7, #8]
 800529a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800529c:	2101      	movs	r1, #1
 800529e:	69b8      	ldr	r0, [r7, #24]
 80052a0:	f7ff fece 	bl	8005040 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80052a4:	69bb      	ldr	r3, [r7, #24]
 80052a6:	78fa      	ldrb	r2, [r7, #3]
 80052a8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80052ac:	bf00      	nop
 80052ae:	3710      	adds	r7, #16
 80052b0:	46bd      	mov	sp, r7
 80052b2:	bd80      	pop	{r7, pc}

080052b4 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b086      	sub	sp, #24
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
 80052bc:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d109      	bne.n	80052d8 <xQueueCreateCountingSemaphore+0x24>
 80052c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052c8:	f383 8811 	msr	BASEPRI, r3
 80052cc:	f3bf 8f6f 	isb	sy
 80052d0:	f3bf 8f4f 	dsb	sy
 80052d4:	613b      	str	r3, [r7, #16]
 80052d6:	e7fe      	b.n	80052d6 <xQueueCreateCountingSemaphore+0x22>
		configASSERT( uxInitialCount <= uxMaxCount );
 80052d8:	683a      	ldr	r2, [r7, #0]
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	429a      	cmp	r2, r3
 80052de:	d909      	bls.n	80052f4 <xQueueCreateCountingSemaphore+0x40>
 80052e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052e4:	f383 8811 	msr	BASEPRI, r3
 80052e8:	f3bf 8f6f 	isb	sy
 80052ec:	f3bf 8f4f 	dsb	sy
 80052f0:	60fb      	str	r3, [r7, #12]
 80052f2:	e7fe      	b.n	80052f2 <xQueueCreateCountingSemaphore+0x3e>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80052f4:	2202      	movs	r2, #2
 80052f6:	2100      	movs	r1, #0
 80052f8:	6878      	ldr	r0, [r7, #4]
 80052fa:	f7ff ff7b 	bl	80051f4 <xQueueGenericCreate>
 80052fe:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8005300:	697b      	ldr	r3, [r7, #20]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d002      	beq.n	800530c <xQueueCreateCountingSemaphore+0x58>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005306:	697b      	ldr	r3, [r7, #20]
 8005308:	683a      	ldr	r2, [r7, #0]
 800530a:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800530c:	697b      	ldr	r3, [r7, #20]
	}
 800530e:	4618      	mov	r0, r3
 8005310:	3718      	adds	r7, #24
 8005312:	46bd      	mov	sp, r7
 8005314:	bd80      	pop	{r7, pc}
	...

08005318 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b08e      	sub	sp, #56	; 0x38
 800531c:	af00      	add	r7, sp, #0
 800531e:	60f8      	str	r0, [r7, #12]
 8005320:	60b9      	str	r1, [r7, #8]
 8005322:	607a      	str	r2, [r7, #4]
 8005324:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005326:	2300      	movs	r3, #0
 8005328:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800532e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005330:	2b00      	cmp	r3, #0
 8005332:	d109      	bne.n	8005348 <xQueueGenericSend+0x30>
 8005334:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005338:	f383 8811 	msr	BASEPRI, r3
 800533c:	f3bf 8f6f 	isb	sy
 8005340:	f3bf 8f4f 	dsb	sy
 8005344:	62bb      	str	r3, [r7, #40]	; 0x28
 8005346:	e7fe      	b.n	8005346 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d103      	bne.n	8005356 <xQueueGenericSend+0x3e>
 800534e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005352:	2b00      	cmp	r3, #0
 8005354:	d101      	bne.n	800535a <xQueueGenericSend+0x42>
 8005356:	2301      	movs	r3, #1
 8005358:	e000      	b.n	800535c <xQueueGenericSend+0x44>
 800535a:	2300      	movs	r3, #0
 800535c:	2b00      	cmp	r3, #0
 800535e:	d109      	bne.n	8005374 <xQueueGenericSend+0x5c>
 8005360:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005364:	f383 8811 	msr	BASEPRI, r3
 8005368:	f3bf 8f6f 	isb	sy
 800536c:	f3bf 8f4f 	dsb	sy
 8005370:	627b      	str	r3, [r7, #36]	; 0x24
 8005372:	e7fe      	b.n	8005372 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	2b02      	cmp	r3, #2
 8005378:	d103      	bne.n	8005382 <xQueueGenericSend+0x6a>
 800537a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800537c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800537e:	2b01      	cmp	r3, #1
 8005380:	d101      	bne.n	8005386 <xQueueGenericSend+0x6e>
 8005382:	2301      	movs	r3, #1
 8005384:	e000      	b.n	8005388 <xQueueGenericSend+0x70>
 8005386:	2300      	movs	r3, #0
 8005388:	2b00      	cmp	r3, #0
 800538a:	d109      	bne.n	80053a0 <xQueueGenericSend+0x88>
 800538c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005390:	f383 8811 	msr	BASEPRI, r3
 8005394:	f3bf 8f6f 	isb	sy
 8005398:	f3bf 8f4f 	dsb	sy
 800539c:	623b      	str	r3, [r7, #32]
 800539e:	e7fe      	b.n	800539e <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80053a0:	f001 faba 	bl	8006918 <xTaskGetSchedulerState>
 80053a4:	4603      	mov	r3, r0
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d102      	bne.n	80053b0 <xQueueGenericSend+0x98>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d101      	bne.n	80053b4 <xQueueGenericSend+0x9c>
 80053b0:	2301      	movs	r3, #1
 80053b2:	e000      	b.n	80053b6 <xQueueGenericSend+0x9e>
 80053b4:	2300      	movs	r3, #0
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d109      	bne.n	80053ce <xQueueGenericSend+0xb6>
 80053ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053be:	f383 8811 	msr	BASEPRI, r3
 80053c2:	f3bf 8f6f 	isb	sy
 80053c6:	f3bf 8f4f 	dsb	sy
 80053ca:	61fb      	str	r3, [r7, #28]
 80053cc:	e7fe      	b.n	80053cc <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80053ce:	f002 f8b5 	bl	800753c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80053d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80053d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053da:	429a      	cmp	r2, r3
 80053dc:	d302      	bcc.n	80053e4 <xQueueGenericSend+0xcc>
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	2b02      	cmp	r3, #2
 80053e2:	d129      	bne.n	8005438 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80053e4:	683a      	ldr	r2, [r7, #0]
 80053e6:	68b9      	ldr	r1, [r7, #8]
 80053e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80053ea:	f000 fb1f 	bl	8005a2c <prvCopyDataToQueue>
 80053ee:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80053f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d010      	beq.n	800541a <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80053f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053fa:	3324      	adds	r3, #36	; 0x24
 80053fc:	4618      	mov	r0, r3
 80053fe:	f001 f8cf 	bl	80065a0 <xTaskRemoveFromEventList>
 8005402:	4603      	mov	r3, r0
 8005404:	2b00      	cmp	r3, #0
 8005406:	d013      	beq.n	8005430 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005408:	4b3f      	ldr	r3, [pc, #252]	; (8005508 <xQueueGenericSend+0x1f0>)
 800540a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800540e:	601a      	str	r2, [r3, #0]
 8005410:	f3bf 8f4f 	dsb	sy
 8005414:	f3bf 8f6f 	isb	sy
 8005418:	e00a      	b.n	8005430 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800541a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800541c:	2b00      	cmp	r3, #0
 800541e:	d007      	beq.n	8005430 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005420:	4b39      	ldr	r3, [pc, #228]	; (8005508 <xQueueGenericSend+0x1f0>)
 8005422:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005426:	601a      	str	r2, [r3, #0]
 8005428:	f3bf 8f4f 	dsb	sy
 800542c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005430:	f002 f8b2 	bl	8007598 <vPortExitCritical>
				return pdPASS;
 8005434:	2301      	movs	r3, #1
 8005436:	e063      	b.n	8005500 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d103      	bne.n	8005446 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800543e:	f002 f8ab 	bl	8007598 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005442:	2300      	movs	r3, #0
 8005444:	e05c      	b.n	8005500 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005446:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005448:	2b00      	cmp	r3, #0
 800544a:	d106      	bne.n	800545a <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800544c:	f107 0314 	add.w	r3, r7, #20
 8005450:	4618      	mov	r0, r3
 8005452:	f001 f907 	bl	8006664 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005456:	2301      	movs	r3, #1
 8005458:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800545a:	f002 f89d 	bl	8007598 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800545e:	f000 fe7d 	bl	800615c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005462:	f002 f86b 	bl	800753c <vPortEnterCritical>
 8005466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005468:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800546c:	b25b      	sxtb	r3, r3
 800546e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005472:	d103      	bne.n	800547c <xQueueGenericSend+0x164>
 8005474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005476:	2200      	movs	r2, #0
 8005478:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800547c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800547e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005482:	b25b      	sxtb	r3, r3
 8005484:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005488:	d103      	bne.n	8005492 <xQueueGenericSend+0x17a>
 800548a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800548c:	2200      	movs	r2, #0
 800548e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005492:	f002 f881 	bl	8007598 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005496:	1d3a      	adds	r2, r7, #4
 8005498:	f107 0314 	add.w	r3, r7, #20
 800549c:	4611      	mov	r1, r2
 800549e:	4618      	mov	r0, r3
 80054a0:	f001 f8f6 	bl	8006690 <xTaskCheckForTimeOut>
 80054a4:	4603      	mov	r3, r0
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d124      	bne.n	80054f4 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80054aa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80054ac:	f000 fbb6 	bl	8005c1c <prvIsQueueFull>
 80054b0:	4603      	mov	r3, r0
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d018      	beq.n	80054e8 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80054b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054b8:	3310      	adds	r3, #16
 80054ba:	687a      	ldr	r2, [r7, #4]
 80054bc:	4611      	mov	r1, r2
 80054be:	4618      	mov	r0, r3
 80054c0:	f001 f820 	bl	8006504 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80054c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80054c6:	f000 fb41 	bl	8005b4c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80054ca:	f000 fe55 	bl	8006178 <xTaskResumeAll>
 80054ce:	4603      	mov	r3, r0
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	f47f af7c 	bne.w	80053ce <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 80054d6:	4b0c      	ldr	r3, [pc, #48]	; (8005508 <xQueueGenericSend+0x1f0>)
 80054d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054dc:	601a      	str	r2, [r3, #0]
 80054de:	f3bf 8f4f 	dsb	sy
 80054e2:	f3bf 8f6f 	isb	sy
 80054e6:	e772      	b.n	80053ce <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80054e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80054ea:	f000 fb2f 	bl	8005b4c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80054ee:	f000 fe43 	bl	8006178 <xTaskResumeAll>
 80054f2:	e76c      	b.n	80053ce <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80054f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80054f6:	f000 fb29 	bl	8005b4c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80054fa:	f000 fe3d 	bl	8006178 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80054fe:	2300      	movs	r3, #0
		}
	}
}
 8005500:	4618      	mov	r0, r3
 8005502:	3738      	adds	r7, #56	; 0x38
 8005504:	46bd      	mov	sp, r7
 8005506:	bd80      	pop	{r7, pc}
 8005508:	e000ed04 	.word	0xe000ed04

0800550c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b08e      	sub	sp, #56	; 0x38
 8005510:	af00      	add	r7, sp, #0
 8005512:	60f8      	str	r0, [r7, #12]
 8005514:	60b9      	str	r1, [r7, #8]
 8005516:	607a      	str	r2, [r7, #4]
 8005518:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800551e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005520:	2b00      	cmp	r3, #0
 8005522:	d109      	bne.n	8005538 <xQueueGenericSendFromISR+0x2c>
 8005524:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005528:	f383 8811 	msr	BASEPRI, r3
 800552c:	f3bf 8f6f 	isb	sy
 8005530:	f3bf 8f4f 	dsb	sy
 8005534:	627b      	str	r3, [r7, #36]	; 0x24
 8005536:	e7fe      	b.n	8005536 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d103      	bne.n	8005546 <xQueueGenericSendFromISR+0x3a>
 800553e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005542:	2b00      	cmp	r3, #0
 8005544:	d101      	bne.n	800554a <xQueueGenericSendFromISR+0x3e>
 8005546:	2301      	movs	r3, #1
 8005548:	e000      	b.n	800554c <xQueueGenericSendFromISR+0x40>
 800554a:	2300      	movs	r3, #0
 800554c:	2b00      	cmp	r3, #0
 800554e:	d109      	bne.n	8005564 <xQueueGenericSendFromISR+0x58>
 8005550:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005554:	f383 8811 	msr	BASEPRI, r3
 8005558:	f3bf 8f6f 	isb	sy
 800555c:	f3bf 8f4f 	dsb	sy
 8005560:	623b      	str	r3, [r7, #32]
 8005562:	e7fe      	b.n	8005562 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	2b02      	cmp	r3, #2
 8005568:	d103      	bne.n	8005572 <xQueueGenericSendFromISR+0x66>
 800556a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800556c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800556e:	2b01      	cmp	r3, #1
 8005570:	d101      	bne.n	8005576 <xQueueGenericSendFromISR+0x6a>
 8005572:	2301      	movs	r3, #1
 8005574:	e000      	b.n	8005578 <xQueueGenericSendFromISR+0x6c>
 8005576:	2300      	movs	r3, #0
 8005578:	2b00      	cmp	r3, #0
 800557a:	d109      	bne.n	8005590 <xQueueGenericSendFromISR+0x84>
 800557c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005580:	f383 8811 	msr	BASEPRI, r3
 8005584:	f3bf 8f6f 	isb	sy
 8005588:	f3bf 8f4f 	dsb	sy
 800558c:	61fb      	str	r3, [r7, #28]
 800558e:	e7fe      	b.n	800558e <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005590:	f002 f8b0 	bl	80076f4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005594:	f3ef 8211 	mrs	r2, BASEPRI
 8005598:	f04f 0350 	mov.w	r3, #80	; 0x50
 800559c:	f383 8811 	msr	BASEPRI, r3
 80055a0:	f3bf 8f6f 	isb	sy
 80055a4:	f3bf 8f4f 	dsb	sy
 80055a8:	61ba      	str	r2, [r7, #24]
 80055aa:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80055ac:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80055ae:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80055b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80055b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055b8:	429a      	cmp	r2, r3
 80055ba:	d302      	bcc.n	80055c2 <xQueueGenericSendFromISR+0xb6>
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	2b02      	cmp	r3, #2
 80055c0:	d12c      	bne.n	800561c <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80055c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80055c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80055cc:	683a      	ldr	r2, [r7, #0]
 80055ce:	68b9      	ldr	r1, [r7, #8]
 80055d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80055d2:	f000 fa2b 	bl	8005a2c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80055d6:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80055da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055de:	d112      	bne.n	8005606 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80055e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d016      	beq.n	8005616 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80055e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ea:	3324      	adds	r3, #36	; 0x24
 80055ec:	4618      	mov	r0, r3
 80055ee:	f000 ffd7 	bl	80065a0 <xTaskRemoveFromEventList>
 80055f2:	4603      	mov	r3, r0
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d00e      	beq.n	8005616 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d00b      	beq.n	8005616 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2201      	movs	r2, #1
 8005602:	601a      	str	r2, [r3, #0]
 8005604:	e007      	b.n	8005616 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005606:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800560a:	3301      	adds	r3, #1
 800560c:	b2db      	uxtb	r3, r3
 800560e:	b25a      	sxtb	r2, r3
 8005610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005612:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005616:	2301      	movs	r3, #1
 8005618:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800561a:	e001      	b.n	8005620 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800561c:	2300      	movs	r3, #0
 800561e:	637b      	str	r3, [r7, #52]	; 0x34
 8005620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005622:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005624:	693b      	ldr	r3, [r7, #16]
 8005626:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800562a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800562c:	4618      	mov	r0, r3
 800562e:	3738      	adds	r7, #56	; 0x38
 8005630:	46bd      	mov	sp, r7
 8005632:	bd80      	pop	{r7, pc}

08005634 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005634:	b580      	push	{r7, lr}
 8005636:	b08c      	sub	sp, #48	; 0x30
 8005638:	af00      	add	r7, sp, #0
 800563a:	60f8      	str	r0, [r7, #12]
 800563c:	60b9      	str	r1, [r7, #8]
 800563e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005640:	2300      	movs	r3, #0
 8005642:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800564a:	2b00      	cmp	r3, #0
 800564c:	d109      	bne.n	8005662 <xQueueReceive+0x2e>
	__asm volatile
 800564e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005652:	f383 8811 	msr	BASEPRI, r3
 8005656:	f3bf 8f6f 	isb	sy
 800565a:	f3bf 8f4f 	dsb	sy
 800565e:	623b      	str	r3, [r7, #32]
 8005660:	e7fe      	b.n	8005660 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d103      	bne.n	8005670 <xQueueReceive+0x3c>
 8005668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800566a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800566c:	2b00      	cmp	r3, #0
 800566e:	d101      	bne.n	8005674 <xQueueReceive+0x40>
 8005670:	2301      	movs	r3, #1
 8005672:	e000      	b.n	8005676 <xQueueReceive+0x42>
 8005674:	2300      	movs	r3, #0
 8005676:	2b00      	cmp	r3, #0
 8005678:	d109      	bne.n	800568e <xQueueReceive+0x5a>
 800567a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800567e:	f383 8811 	msr	BASEPRI, r3
 8005682:	f3bf 8f6f 	isb	sy
 8005686:	f3bf 8f4f 	dsb	sy
 800568a:	61fb      	str	r3, [r7, #28]
 800568c:	e7fe      	b.n	800568c <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800568e:	f001 f943 	bl	8006918 <xTaskGetSchedulerState>
 8005692:	4603      	mov	r3, r0
 8005694:	2b00      	cmp	r3, #0
 8005696:	d102      	bne.n	800569e <xQueueReceive+0x6a>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d101      	bne.n	80056a2 <xQueueReceive+0x6e>
 800569e:	2301      	movs	r3, #1
 80056a0:	e000      	b.n	80056a4 <xQueueReceive+0x70>
 80056a2:	2300      	movs	r3, #0
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d109      	bne.n	80056bc <xQueueReceive+0x88>
 80056a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056ac:	f383 8811 	msr	BASEPRI, r3
 80056b0:	f3bf 8f6f 	isb	sy
 80056b4:	f3bf 8f4f 	dsb	sy
 80056b8:	61bb      	str	r3, [r7, #24]
 80056ba:	e7fe      	b.n	80056ba <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80056bc:	f001 ff3e 	bl	800753c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80056c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056c4:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80056c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d01f      	beq.n	800570c <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80056cc:	68b9      	ldr	r1, [r7, #8]
 80056ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80056d0:	f000 fa16 	bl	8005b00 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80056d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056d6:	1e5a      	subs	r2, r3, #1
 80056d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056da:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80056dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056de:	691b      	ldr	r3, [r3, #16]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d00f      	beq.n	8005704 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80056e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056e6:	3310      	adds	r3, #16
 80056e8:	4618      	mov	r0, r3
 80056ea:	f000 ff59 	bl	80065a0 <xTaskRemoveFromEventList>
 80056ee:	4603      	mov	r3, r0
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d007      	beq.n	8005704 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80056f4:	4b3c      	ldr	r3, [pc, #240]	; (80057e8 <xQueueReceive+0x1b4>)
 80056f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056fa:	601a      	str	r2, [r3, #0]
 80056fc:	f3bf 8f4f 	dsb	sy
 8005700:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005704:	f001 ff48 	bl	8007598 <vPortExitCritical>
				return pdPASS;
 8005708:	2301      	movs	r3, #1
 800570a:	e069      	b.n	80057e0 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d103      	bne.n	800571a <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005712:	f001 ff41 	bl	8007598 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005716:	2300      	movs	r3, #0
 8005718:	e062      	b.n	80057e0 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800571a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800571c:	2b00      	cmp	r3, #0
 800571e:	d106      	bne.n	800572e <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005720:	f107 0310 	add.w	r3, r7, #16
 8005724:	4618      	mov	r0, r3
 8005726:	f000 ff9d 	bl	8006664 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800572a:	2301      	movs	r3, #1
 800572c:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800572e:	f001 ff33 	bl	8007598 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005732:	f000 fd13 	bl	800615c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005736:	f001 ff01 	bl	800753c <vPortEnterCritical>
 800573a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800573c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005740:	b25b      	sxtb	r3, r3
 8005742:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005746:	d103      	bne.n	8005750 <xQueueReceive+0x11c>
 8005748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800574a:	2200      	movs	r2, #0
 800574c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005752:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005756:	b25b      	sxtb	r3, r3
 8005758:	f1b3 3fff 	cmp.w	r3, #4294967295
 800575c:	d103      	bne.n	8005766 <xQueueReceive+0x132>
 800575e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005760:	2200      	movs	r2, #0
 8005762:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005766:	f001 ff17 	bl	8007598 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800576a:	1d3a      	adds	r2, r7, #4
 800576c:	f107 0310 	add.w	r3, r7, #16
 8005770:	4611      	mov	r1, r2
 8005772:	4618      	mov	r0, r3
 8005774:	f000 ff8c 	bl	8006690 <xTaskCheckForTimeOut>
 8005778:	4603      	mov	r3, r0
 800577a:	2b00      	cmp	r3, #0
 800577c:	d123      	bne.n	80057c6 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800577e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005780:	f000 fa36 	bl	8005bf0 <prvIsQueueEmpty>
 8005784:	4603      	mov	r3, r0
 8005786:	2b00      	cmp	r3, #0
 8005788:	d017      	beq.n	80057ba <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800578a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800578c:	3324      	adds	r3, #36	; 0x24
 800578e:	687a      	ldr	r2, [r7, #4]
 8005790:	4611      	mov	r1, r2
 8005792:	4618      	mov	r0, r3
 8005794:	f000 feb6 	bl	8006504 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005798:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800579a:	f000 f9d7 	bl	8005b4c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800579e:	f000 fceb 	bl	8006178 <xTaskResumeAll>
 80057a2:	4603      	mov	r3, r0
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d189      	bne.n	80056bc <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 80057a8:	4b0f      	ldr	r3, [pc, #60]	; (80057e8 <xQueueReceive+0x1b4>)
 80057aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057ae:	601a      	str	r2, [r3, #0]
 80057b0:	f3bf 8f4f 	dsb	sy
 80057b4:	f3bf 8f6f 	isb	sy
 80057b8:	e780      	b.n	80056bc <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80057ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80057bc:	f000 f9c6 	bl	8005b4c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80057c0:	f000 fcda 	bl	8006178 <xTaskResumeAll>
 80057c4:	e77a      	b.n	80056bc <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80057c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80057c8:	f000 f9c0 	bl	8005b4c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80057cc:	f000 fcd4 	bl	8006178 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80057d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80057d2:	f000 fa0d 	bl	8005bf0 <prvIsQueueEmpty>
 80057d6:	4603      	mov	r3, r0
 80057d8:	2b00      	cmp	r3, #0
 80057da:	f43f af6f 	beq.w	80056bc <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80057de:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80057e0:	4618      	mov	r0, r3
 80057e2:	3730      	adds	r7, #48	; 0x30
 80057e4:	46bd      	mov	sp, r7
 80057e6:	bd80      	pop	{r7, pc}
 80057e8:	e000ed04 	.word	0xe000ed04

080057ec <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b08e      	sub	sp, #56	; 0x38
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
 80057f4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80057f6:	2300      	movs	r3, #0
 80057f8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80057fe:	2300      	movs	r3, #0
 8005800:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005804:	2b00      	cmp	r3, #0
 8005806:	d109      	bne.n	800581c <xQueueSemaphoreTake+0x30>
 8005808:	f04f 0350 	mov.w	r3, #80	; 0x50
 800580c:	f383 8811 	msr	BASEPRI, r3
 8005810:	f3bf 8f6f 	isb	sy
 8005814:	f3bf 8f4f 	dsb	sy
 8005818:	623b      	str	r3, [r7, #32]
 800581a:	e7fe      	b.n	800581a <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800581c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800581e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005820:	2b00      	cmp	r3, #0
 8005822:	d009      	beq.n	8005838 <xQueueSemaphoreTake+0x4c>
 8005824:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005828:	f383 8811 	msr	BASEPRI, r3
 800582c:	f3bf 8f6f 	isb	sy
 8005830:	f3bf 8f4f 	dsb	sy
 8005834:	61fb      	str	r3, [r7, #28]
 8005836:	e7fe      	b.n	8005836 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005838:	f001 f86e 	bl	8006918 <xTaskGetSchedulerState>
 800583c:	4603      	mov	r3, r0
 800583e:	2b00      	cmp	r3, #0
 8005840:	d102      	bne.n	8005848 <xQueueSemaphoreTake+0x5c>
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d101      	bne.n	800584c <xQueueSemaphoreTake+0x60>
 8005848:	2301      	movs	r3, #1
 800584a:	e000      	b.n	800584e <xQueueSemaphoreTake+0x62>
 800584c:	2300      	movs	r3, #0
 800584e:	2b00      	cmp	r3, #0
 8005850:	d109      	bne.n	8005866 <xQueueSemaphoreTake+0x7a>
 8005852:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005856:	f383 8811 	msr	BASEPRI, r3
 800585a:	f3bf 8f6f 	isb	sy
 800585e:	f3bf 8f4f 	dsb	sy
 8005862:	61bb      	str	r3, [r7, #24]
 8005864:	e7fe      	b.n	8005864 <xQueueSemaphoreTake+0x78>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8005866:	f001 fe69 	bl	800753c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800586a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800586c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800586e:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005872:	2b00      	cmp	r3, #0
 8005874:	d024      	beq.n	80058c0 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005878:	1e5a      	subs	r2, r3, #1
 800587a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800587c:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800587e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d104      	bne.n	8005890 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8005886:	f001 f9c3 	bl	8006c10 <pvTaskIncrementMutexHeldCount>
 800588a:	4602      	mov	r2, r0
 800588c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800588e:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005892:	691b      	ldr	r3, [r3, #16]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d00f      	beq.n	80058b8 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800589a:	3310      	adds	r3, #16
 800589c:	4618      	mov	r0, r3
 800589e:	f000 fe7f 	bl	80065a0 <xTaskRemoveFromEventList>
 80058a2:	4603      	mov	r3, r0
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d007      	beq.n	80058b8 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80058a8:	4b53      	ldr	r3, [pc, #332]	; (80059f8 <xQueueSemaphoreTake+0x20c>)
 80058aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058ae:	601a      	str	r2, [r3, #0]
 80058b0:	f3bf 8f4f 	dsb	sy
 80058b4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80058b8:	f001 fe6e 	bl	8007598 <vPortExitCritical>
				return pdPASS;
 80058bc:	2301      	movs	r3, #1
 80058be:	e096      	b.n	80059ee <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d110      	bne.n	80058e8 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80058c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d009      	beq.n	80058e0 <xQueueSemaphoreTake+0xf4>
 80058cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058d0:	f383 8811 	msr	BASEPRI, r3
 80058d4:	f3bf 8f6f 	isb	sy
 80058d8:	f3bf 8f4f 	dsb	sy
 80058dc:	617b      	str	r3, [r7, #20]
 80058de:	e7fe      	b.n	80058de <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80058e0:	f001 fe5a 	bl	8007598 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80058e4:	2300      	movs	r3, #0
 80058e6:	e082      	b.n	80059ee <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 80058e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d106      	bne.n	80058fc <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80058ee:	f107 030c 	add.w	r3, r7, #12
 80058f2:	4618      	mov	r0, r3
 80058f4:	f000 feb6 	bl	8006664 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80058f8:	2301      	movs	r3, #1
 80058fa:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80058fc:	f001 fe4c 	bl	8007598 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005900:	f000 fc2c 	bl	800615c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005904:	f001 fe1a 	bl	800753c <vPortEnterCritical>
 8005908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800590a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800590e:	b25b      	sxtb	r3, r3
 8005910:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005914:	d103      	bne.n	800591e <xQueueSemaphoreTake+0x132>
 8005916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005918:	2200      	movs	r2, #0
 800591a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800591e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005920:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005924:	b25b      	sxtb	r3, r3
 8005926:	f1b3 3fff 	cmp.w	r3, #4294967295
 800592a:	d103      	bne.n	8005934 <xQueueSemaphoreTake+0x148>
 800592c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800592e:	2200      	movs	r2, #0
 8005930:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005934:	f001 fe30 	bl	8007598 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005938:	463a      	mov	r2, r7
 800593a:	f107 030c 	add.w	r3, r7, #12
 800593e:	4611      	mov	r1, r2
 8005940:	4618      	mov	r0, r3
 8005942:	f000 fea5 	bl	8006690 <xTaskCheckForTimeOut>
 8005946:	4603      	mov	r3, r0
 8005948:	2b00      	cmp	r3, #0
 800594a:	d132      	bne.n	80059b2 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800594c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800594e:	f000 f94f 	bl	8005bf0 <prvIsQueueEmpty>
 8005952:	4603      	mov	r3, r0
 8005954:	2b00      	cmp	r3, #0
 8005956:	d026      	beq.n	80059a6 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d109      	bne.n	8005974 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8005960:	f001 fdec 	bl	800753c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8005964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005966:	685b      	ldr	r3, [r3, #4]
 8005968:	4618      	mov	r0, r3
 800596a:	f000 fff3 	bl	8006954 <xTaskPriorityInherit>
 800596e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8005970:	f001 fe12 	bl	8007598 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005976:	3324      	adds	r3, #36	; 0x24
 8005978:	683a      	ldr	r2, [r7, #0]
 800597a:	4611      	mov	r1, r2
 800597c:	4618      	mov	r0, r3
 800597e:	f000 fdc1 	bl	8006504 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005982:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005984:	f000 f8e2 	bl	8005b4c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005988:	f000 fbf6 	bl	8006178 <xTaskResumeAll>
 800598c:	4603      	mov	r3, r0
 800598e:	2b00      	cmp	r3, #0
 8005990:	f47f af69 	bne.w	8005866 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8005994:	4b18      	ldr	r3, [pc, #96]	; (80059f8 <xQueueSemaphoreTake+0x20c>)
 8005996:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800599a:	601a      	str	r2, [r3, #0]
 800599c:	f3bf 8f4f 	dsb	sy
 80059a0:	f3bf 8f6f 	isb	sy
 80059a4:	e75f      	b.n	8005866 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80059a6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80059a8:	f000 f8d0 	bl	8005b4c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80059ac:	f000 fbe4 	bl	8006178 <xTaskResumeAll>
 80059b0:	e759      	b.n	8005866 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80059b2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80059b4:	f000 f8ca 	bl	8005b4c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80059b8:	f000 fbde 	bl	8006178 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80059bc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80059be:	f000 f917 	bl	8005bf0 <prvIsQueueEmpty>
 80059c2:	4603      	mov	r3, r0
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	f43f af4e 	beq.w	8005866 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80059ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d00d      	beq.n	80059ec <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 80059d0:	f001 fdb4 	bl	800753c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80059d4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80059d6:	f000 f811 	bl	80059fc <prvGetDisinheritPriorityAfterTimeout>
 80059da:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 80059dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059de:	685b      	ldr	r3, [r3, #4]
 80059e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80059e2:	4618      	mov	r0, r3
 80059e4:	f001 f890 	bl	8006b08 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80059e8:	f001 fdd6 	bl	8007598 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80059ec:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80059ee:	4618      	mov	r0, r3
 80059f0:	3738      	adds	r7, #56	; 0x38
 80059f2:	46bd      	mov	sp, r7
 80059f4:	bd80      	pop	{r7, pc}
 80059f6:	bf00      	nop
 80059f8:	e000ed04 	.word	0xe000ed04

080059fc <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80059fc:	b480      	push	{r7}
 80059fe:	b085      	sub	sp, #20
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d006      	beq.n	8005a1a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8005a16:	60fb      	str	r3, [r7, #12]
 8005a18:	e001      	b.n	8005a1e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
	}
 8005a20:	4618      	mov	r0, r3
 8005a22:	3714      	adds	r7, #20
 8005a24:	46bd      	mov	sp, r7
 8005a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2a:	4770      	bx	lr

08005a2c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b086      	sub	sp, #24
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	60f8      	str	r0, [r7, #12]
 8005a34:	60b9      	str	r1, [r7, #8]
 8005a36:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005a38:	2300      	movs	r3, #0
 8005a3a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a40:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d10d      	bne.n	8005a66 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d14d      	bne.n	8005aee <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	685b      	ldr	r3, [r3, #4]
 8005a56:	4618      	mov	r0, r3
 8005a58:	f000 ffea 	bl	8006a30 <xTaskPriorityDisinherit>
 8005a5c:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	2200      	movs	r2, #0
 8005a62:	605a      	str	r2, [r3, #4]
 8005a64:	e043      	b.n	8005aee <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d119      	bne.n	8005aa0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	6898      	ldr	r0, [r3, #8]
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a74:	461a      	mov	r2, r3
 8005a76:	68b9      	ldr	r1, [r7, #8]
 8005a78:	f002 f87a 	bl	8007b70 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	689a      	ldr	r2, [r3, #8]
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a84:	441a      	add	r2, r3
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	689a      	ldr	r2, [r3, #8]
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	685b      	ldr	r3, [r3, #4]
 8005a92:	429a      	cmp	r2, r3
 8005a94:	d32b      	bcc.n	8005aee <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681a      	ldr	r2, [r3, #0]
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	609a      	str	r2, [r3, #8]
 8005a9e:	e026      	b.n	8005aee <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	68d8      	ldr	r0, [r3, #12]
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aa8:	461a      	mov	r2, r3
 8005aaa:	68b9      	ldr	r1, [r7, #8]
 8005aac:	f002 f860 	bl	8007b70 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	68da      	ldr	r2, [r3, #12]
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ab8:	425b      	negs	r3, r3
 8005aba:	441a      	add	r2, r3
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	68da      	ldr	r2, [r3, #12]
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	429a      	cmp	r2, r3
 8005aca:	d207      	bcs.n	8005adc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	685a      	ldr	r2, [r3, #4]
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ad4:	425b      	negs	r3, r3
 8005ad6:	441a      	add	r2, r3
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2b02      	cmp	r3, #2
 8005ae0:	d105      	bne.n	8005aee <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005ae2:	693b      	ldr	r3, [r7, #16]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d002      	beq.n	8005aee <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005ae8:	693b      	ldr	r3, [r7, #16]
 8005aea:	3b01      	subs	r3, #1
 8005aec:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005aee:	693b      	ldr	r3, [r7, #16]
 8005af0:	1c5a      	adds	r2, r3, #1
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005af6:	697b      	ldr	r3, [r7, #20]
}
 8005af8:	4618      	mov	r0, r3
 8005afa:	3718      	adds	r7, #24
 8005afc:	46bd      	mov	sp, r7
 8005afe:	bd80      	pop	{r7, pc}

08005b00 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b082      	sub	sp, #8
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
 8005b08:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d018      	beq.n	8005b44 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	68da      	ldr	r2, [r3, #12]
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b1a:	441a      	add	r2, r3
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	68da      	ldr	r2, [r3, #12]
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	685b      	ldr	r3, [r3, #4]
 8005b28:	429a      	cmp	r2, r3
 8005b2a:	d303      	bcc.n	8005b34 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681a      	ldr	r2, [r3, #0]
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	68d9      	ldr	r1, [r3, #12]
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b3c:	461a      	mov	r2, r3
 8005b3e:	6838      	ldr	r0, [r7, #0]
 8005b40:	f002 f816 	bl	8007b70 <memcpy>
	}
}
 8005b44:	bf00      	nop
 8005b46:	3708      	adds	r7, #8
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	bd80      	pop	{r7, pc}

08005b4c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b084      	sub	sp, #16
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005b54:	f001 fcf2 	bl	800753c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005b5e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005b60:	e011      	b.n	8005b86 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d012      	beq.n	8005b90 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	3324      	adds	r3, #36	; 0x24
 8005b6e:	4618      	mov	r0, r3
 8005b70:	f000 fd16 	bl	80065a0 <xTaskRemoveFromEventList>
 8005b74:	4603      	mov	r3, r0
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d001      	beq.n	8005b7e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005b7a:	f000 fde9 	bl	8006750 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005b7e:	7bfb      	ldrb	r3, [r7, #15]
 8005b80:	3b01      	subs	r3, #1
 8005b82:	b2db      	uxtb	r3, r3
 8005b84:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005b86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	dce9      	bgt.n	8005b62 <prvUnlockQueue+0x16>
 8005b8e:	e000      	b.n	8005b92 <prvUnlockQueue+0x46>
					break;
 8005b90:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	22ff      	movs	r2, #255	; 0xff
 8005b96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005b9a:	f001 fcfd 	bl	8007598 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005b9e:	f001 fccd 	bl	800753c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005ba8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005baa:	e011      	b.n	8005bd0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	691b      	ldr	r3, [r3, #16]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d012      	beq.n	8005bda <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	3310      	adds	r3, #16
 8005bb8:	4618      	mov	r0, r3
 8005bba:	f000 fcf1 	bl	80065a0 <xTaskRemoveFromEventList>
 8005bbe:	4603      	mov	r3, r0
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d001      	beq.n	8005bc8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005bc4:	f000 fdc4 	bl	8006750 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005bc8:	7bbb      	ldrb	r3, [r7, #14]
 8005bca:	3b01      	subs	r3, #1
 8005bcc:	b2db      	uxtb	r3, r3
 8005bce:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005bd0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	dce9      	bgt.n	8005bac <prvUnlockQueue+0x60>
 8005bd8:	e000      	b.n	8005bdc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005bda:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	22ff      	movs	r2, #255	; 0xff
 8005be0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005be4:	f001 fcd8 	bl	8007598 <vPortExitCritical>
}
 8005be8:	bf00      	nop
 8005bea:	3710      	adds	r7, #16
 8005bec:	46bd      	mov	sp, r7
 8005bee:	bd80      	pop	{r7, pc}

08005bf0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b084      	sub	sp, #16
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005bf8:	f001 fca0 	bl	800753c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d102      	bne.n	8005c0a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005c04:	2301      	movs	r3, #1
 8005c06:	60fb      	str	r3, [r7, #12]
 8005c08:	e001      	b.n	8005c0e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005c0e:	f001 fcc3 	bl	8007598 <vPortExitCritical>

	return xReturn;
 8005c12:	68fb      	ldr	r3, [r7, #12]
}
 8005c14:	4618      	mov	r0, r3
 8005c16:	3710      	adds	r7, #16
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	bd80      	pop	{r7, pc}

08005c1c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b084      	sub	sp, #16
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005c24:	f001 fc8a 	bl	800753c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c30:	429a      	cmp	r2, r3
 8005c32:	d102      	bne.n	8005c3a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005c34:	2301      	movs	r3, #1
 8005c36:	60fb      	str	r3, [r7, #12]
 8005c38:	e001      	b.n	8005c3e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005c3e:	f001 fcab 	bl	8007598 <vPortExitCritical>

	return xReturn;
 8005c42:	68fb      	ldr	r3, [r7, #12]
}
 8005c44:	4618      	mov	r0, r3
 8005c46:	3710      	adds	r7, #16
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	bd80      	pop	{r7, pc}

08005c4c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005c4c:	b480      	push	{r7}
 8005c4e:	b085      	sub	sp, #20
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
 8005c54:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005c56:	2300      	movs	r3, #0
 8005c58:	60fb      	str	r3, [r7, #12]
 8005c5a:	e014      	b.n	8005c86 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005c5c:	4a0e      	ldr	r2, [pc, #56]	; (8005c98 <vQueueAddToRegistry+0x4c>)
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d10b      	bne.n	8005c80 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005c68:	490b      	ldr	r1, [pc, #44]	; (8005c98 <vQueueAddToRegistry+0x4c>)
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	683a      	ldr	r2, [r7, #0]
 8005c6e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005c72:	4a09      	ldr	r2, [pc, #36]	; (8005c98 <vQueueAddToRegistry+0x4c>)
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	00db      	lsls	r3, r3, #3
 8005c78:	4413      	add	r3, r2
 8005c7a:	687a      	ldr	r2, [r7, #4]
 8005c7c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005c7e:	e005      	b.n	8005c8c <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	3301      	adds	r3, #1
 8005c84:	60fb      	str	r3, [r7, #12]
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	2b07      	cmp	r3, #7
 8005c8a:	d9e7      	bls.n	8005c5c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005c8c:	bf00      	nop
 8005c8e:	3714      	adds	r7, #20
 8005c90:	46bd      	mov	sp, r7
 8005c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c96:	4770      	bx	lr
 8005c98:	20004ba0 	.word	0x20004ba0

08005c9c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b086      	sub	sp, #24
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	60f8      	str	r0, [r7, #12]
 8005ca4:	60b9      	str	r1, [r7, #8]
 8005ca6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005cac:	f001 fc46 	bl	800753c <vPortEnterCritical>
 8005cb0:	697b      	ldr	r3, [r7, #20]
 8005cb2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005cb6:	b25b      	sxtb	r3, r3
 8005cb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cbc:	d103      	bne.n	8005cc6 <vQueueWaitForMessageRestricted+0x2a>
 8005cbe:	697b      	ldr	r3, [r7, #20]
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005cc6:	697b      	ldr	r3, [r7, #20]
 8005cc8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005ccc:	b25b      	sxtb	r3, r3
 8005cce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cd2:	d103      	bne.n	8005cdc <vQueueWaitForMessageRestricted+0x40>
 8005cd4:	697b      	ldr	r3, [r7, #20]
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005cdc:	f001 fc5c 	bl	8007598 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005ce0:	697b      	ldr	r3, [r7, #20]
 8005ce2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d106      	bne.n	8005cf6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005ce8:	697b      	ldr	r3, [r7, #20]
 8005cea:	3324      	adds	r3, #36	; 0x24
 8005cec:	687a      	ldr	r2, [r7, #4]
 8005cee:	68b9      	ldr	r1, [r7, #8]
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	f000 fc2b 	bl	800654c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005cf6:	6978      	ldr	r0, [r7, #20]
 8005cf8:	f7ff ff28 	bl	8005b4c <prvUnlockQueue>
	}
 8005cfc:	bf00      	nop
 8005cfe:	3718      	adds	r7, #24
 8005d00:	46bd      	mov	sp, r7
 8005d02:	bd80      	pop	{r7, pc}

08005d04 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b08e      	sub	sp, #56	; 0x38
 8005d08:	af04      	add	r7, sp, #16
 8005d0a:	60f8      	str	r0, [r7, #12]
 8005d0c:	60b9      	str	r1, [r7, #8]
 8005d0e:	607a      	str	r2, [r7, #4]
 8005d10:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005d12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d109      	bne.n	8005d2c <xTaskCreateStatic+0x28>
 8005d18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d1c:	f383 8811 	msr	BASEPRI, r3
 8005d20:	f3bf 8f6f 	isb	sy
 8005d24:	f3bf 8f4f 	dsb	sy
 8005d28:	623b      	str	r3, [r7, #32]
 8005d2a:	e7fe      	b.n	8005d2a <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8005d2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d109      	bne.n	8005d46 <xTaskCreateStatic+0x42>
 8005d32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d36:	f383 8811 	msr	BASEPRI, r3
 8005d3a:	f3bf 8f6f 	isb	sy
 8005d3e:	f3bf 8f4f 	dsb	sy
 8005d42:	61fb      	str	r3, [r7, #28]
 8005d44:	e7fe      	b.n	8005d44 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005d46:	235c      	movs	r3, #92	; 0x5c
 8005d48:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005d4a:	693b      	ldr	r3, [r7, #16]
 8005d4c:	2b5c      	cmp	r3, #92	; 0x5c
 8005d4e:	d009      	beq.n	8005d64 <xTaskCreateStatic+0x60>
 8005d50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d54:	f383 8811 	msr	BASEPRI, r3
 8005d58:	f3bf 8f6f 	isb	sy
 8005d5c:	f3bf 8f4f 	dsb	sy
 8005d60:	61bb      	str	r3, [r7, #24]
 8005d62:	e7fe      	b.n	8005d62 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005d64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d01e      	beq.n	8005da8 <xTaskCreateStatic+0xa4>
 8005d6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d01b      	beq.n	8005da8 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005d70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d72:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d76:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005d78:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d7c:	2202      	movs	r2, #2
 8005d7e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005d82:	2300      	movs	r3, #0
 8005d84:	9303      	str	r3, [sp, #12]
 8005d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d88:	9302      	str	r3, [sp, #8]
 8005d8a:	f107 0314 	add.w	r3, r7, #20
 8005d8e:	9301      	str	r3, [sp, #4]
 8005d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d92:	9300      	str	r3, [sp, #0]
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	687a      	ldr	r2, [r7, #4]
 8005d98:	68b9      	ldr	r1, [r7, #8]
 8005d9a:	68f8      	ldr	r0, [r7, #12]
 8005d9c:	f000 f850 	bl	8005e40 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005da0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005da2:	f000 f8d3 	bl	8005f4c <prvAddNewTaskToReadyList>
 8005da6:	e001      	b.n	8005dac <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8005da8:	2300      	movs	r3, #0
 8005daa:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005dac:	697b      	ldr	r3, [r7, #20]
	}
 8005dae:	4618      	mov	r0, r3
 8005db0:	3728      	adds	r7, #40	; 0x28
 8005db2:	46bd      	mov	sp, r7
 8005db4:	bd80      	pop	{r7, pc}

08005db6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005db6:	b580      	push	{r7, lr}
 8005db8:	b08c      	sub	sp, #48	; 0x30
 8005dba:	af04      	add	r7, sp, #16
 8005dbc:	60f8      	str	r0, [r7, #12]
 8005dbe:	60b9      	str	r1, [r7, #8]
 8005dc0:	603b      	str	r3, [r7, #0]
 8005dc2:	4613      	mov	r3, r2
 8005dc4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005dc6:	88fb      	ldrh	r3, [r7, #6]
 8005dc8:	009b      	lsls	r3, r3, #2
 8005dca:	4618      	mov	r0, r3
 8005dcc:	f001 fcd0 	bl	8007770 <pvPortMalloc>
 8005dd0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005dd2:	697b      	ldr	r3, [r7, #20]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d00e      	beq.n	8005df6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8005dd8:	205c      	movs	r0, #92	; 0x5c
 8005dda:	f001 fcc9 	bl	8007770 <pvPortMalloc>
 8005dde:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005de0:	69fb      	ldr	r3, [r7, #28]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d003      	beq.n	8005dee <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005de6:	69fb      	ldr	r3, [r7, #28]
 8005de8:	697a      	ldr	r2, [r7, #20]
 8005dea:	631a      	str	r2, [r3, #48]	; 0x30
 8005dec:	e005      	b.n	8005dfa <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005dee:	6978      	ldr	r0, [r7, #20]
 8005df0:	f001 fd80 	bl	80078f4 <vPortFree>
 8005df4:	e001      	b.n	8005dfa <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005df6:	2300      	movs	r3, #0
 8005df8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005dfa:	69fb      	ldr	r3, [r7, #28]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d017      	beq.n	8005e30 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005e00:	69fb      	ldr	r3, [r7, #28]
 8005e02:	2200      	movs	r2, #0
 8005e04:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005e08:	88fa      	ldrh	r2, [r7, #6]
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	9303      	str	r3, [sp, #12]
 8005e0e:	69fb      	ldr	r3, [r7, #28]
 8005e10:	9302      	str	r3, [sp, #8]
 8005e12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e14:	9301      	str	r3, [sp, #4]
 8005e16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e18:	9300      	str	r3, [sp, #0]
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	68b9      	ldr	r1, [r7, #8]
 8005e1e:	68f8      	ldr	r0, [r7, #12]
 8005e20:	f000 f80e 	bl	8005e40 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005e24:	69f8      	ldr	r0, [r7, #28]
 8005e26:	f000 f891 	bl	8005f4c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005e2a:	2301      	movs	r3, #1
 8005e2c:	61bb      	str	r3, [r7, #24]
 8005e2e:	e002      	b.n	8005e36 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005e30:	f04f 33ff 	mov.w	r3, #4294967295
 8005e34:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005e36:	69bb      	ldr	r3, [r7, #24]
	}
 8005e38:	4618      	mov	r0, r3
 8005e3a:	3720      	adds	r7, #32
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	bd80      	pop	{r7, pc}

08005e40 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b088      	sub	sp, #32
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	60f8      	str	r0, [r7, #12]
 8005e48:	60b9      	str	r1, [r7, #8]
 8005e4a:	607a      	str	r2, [r7, #4]
 8005e4c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e50:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	009b      	lsls	r3, r3, #2
 8005e56:	461a      	mov	r2, r3
 8005e58:	21a5      	movs	r1, #165	; 0xa5
 8005e5a:	f001 fe94 	bl	8007b86 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8005e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005e68:	3b01      	subs	r3, #1
 8005e6a:	009b      	lsls	r3, r3, #2
 8005e6c:	4413      	add	r3, r2
 8005e6e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8005e70:	69bb      	ldr	r3, [r7, #24]
 8005e72:	f023 0307 	bic.w	r3, r3, #7
 8005e76:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005e78:	69bb      	ldr	r3, [r7, #24]
 8005e7a:	f003 0307 	and.w	r3, r3, #7
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d009      	beq.n	8005e96 <prvInitialiseNewTask+0x56>
 8005e82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e86:	f383 8811 	msr	BASEPRI, r3
 8005e8a:	f3bf 8f6f 	isb	sy
 8005e8e:	f3bf 8f4f 	dsb	sy
 8005e92:	617b      	str	r3, [r7, #20]
 8005e94:	e7fe      	b.n	8005e94 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005e96:	2300      	movs	r3, #0
 8005e98:	61fb      	str	r3, [r7, #28]
 8005e9a:	e012      	b.n	8005ec2 <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005e9c:	68ba      	ldr	r2, [r7, #8]
 8005e9e:	69fb      	ldr	r3, [r7, #28]
 8005ea0:	4413      	add	r3, r2
 8005ea2:	7819      	ldrb	r1, [r3, #0]
 8005ea4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ea6:	69fb      	ldr	r3, [r7, #28]
 8005ea8:	4413      	add	r3, r2
 8005eaa:	3334      	adds	r3, #52	; 0x34
 8005eac:	460a      	mov	r2, r1
 8005eae:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8005eb0:	68ba      	ldr	r2, [r7, #8]
 8005eb2:	69fb      	ldr	r3, [r7, #28]
 8005eb4:	4413      	add	r3, r2
 8005eb6:	781b      	ldrb	r3, [r3, #0]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d006      	beq.n	8005eca <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005ebc:	69fb      	ldr	r3, [r7, #28]
 8005ebe:	3301      	adds	r3, #1
 8005ec0:	61fb      	str	r3, [r7, #28]
 8005ec2:	69fb      	ldr	r3, [r7, #28]
 8005ec4:	2b0f      	cmp	r3, #15
 8005ec6:	d9e9      	bls.n	8005e9c <prvInitialiseNewTask+0x5c>
 8005ec8:	e000      	b.n	8005ecc <prvInitialiseNewTask+0x8c>
		{
			break;
 8005eca:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005ecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ece:	2200      	movs	r2, #0
 8005ed0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ed6:	2b37      	cmp	r3, #55	; 0x37
 8005ed8:	d901      	bls.n	8005ede <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005eda:	2337      	movs	r3, #55	; 0x37
 8005edc:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ee0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ee2:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005ee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ee6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ee8:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eec:	2200      	movs	r2, #0
 8005eee:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005ef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ef2:	3304      	adds	r3, #4
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	f7ff f80f 	bl	8004f18 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005efa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005efc:	3318      	adds	r3, #24
 8005efe:	4618      	mov	r0, r3
 8005f00:	f7ff f80a 	bl	8004f18 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005f04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f06:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f08:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f0c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005f10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f12:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005f14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f18:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f22:	2200      	movs	r2, #0
 8005f24:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005f28:	683a      	ldr	r2, [r7, #0]
 8005f2a:	68f9      	ldr	r1, [r7, #12]
 8005f2c:	69b8      	ldr	r0, [r7, #24]
 8005f2e:	f001 f9e1 	bl	80072f4 <pxPortInitialiseStack>
 8005f32:	4602      	mov	r2, r0
 8005f34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f36:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8005f38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d002      	beq.n	8005f44 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005f3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f42:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005f44:	bf00      	nop
 8005f46:	3720      	adds	r7, #32
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	bd80      	pop	{r7, pc}

08005f4c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b082      	sub	sp, #8
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005f54:	f001 faf2 	bl	800753c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005f58:	4b2d      	ldr	r3, [pc, #180]	; (8006010 <prvAddNewTaskToReadyList+0xc4>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	3301      	adds	r3, #1
 8005f5e:	4a2c      	ldr	r2, [pc, #176]	; (8006010 <prvAddNewTaskToReadyList+0xc4>)
 8005f60:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005f62:	4b2c      	ldr	r3, [pc, #176]	; (8006014 <prvAddNewTaskToReadyList+0xc8>)
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d109      	bne.n	8005f7e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005f6a:	4a2a      	ldr	r2, [pc, #168]	; (8006014 <prvAddNewTaskToReadyList+0xc8>)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005f70:	4b27      	ldr	r3, [pc, #156]	; (8006010 <prvAddNewTaskToReadyList+0xc4>)
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	2b01      	cmp	r3, #1
 8005f76:	d110      	bne.n	8005f9a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005f78:	f000 fc0e 	bl	8006798 <prvInitialiseTaskLists>
 8005f7c:	e00d      	b.n	8005f9a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005f7e:	4b26      	ldr	r3, [pc, #152]	; (8006018 <prvAddNewTaskToReadyList+0xcc>)
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d109      	bne.n	8005f9a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005f86:	4b23      	ldr	r3, [pc, #140]	; (8006014 <prvAddNewTaskToReadyList+0xc8>)
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f90:	429a      	cmp	r2, r3
 8005f92:	d802      	bhi.n	8005f9a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005f94:	4a1f      	ldr	r2, [pc, #124]	; (8006014 <prvAddNewTaskToReadyList+0xc8>)
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005f9a:	4b20      	ldr	r3, [pc, #128]	; (800601c <prvAddNewTaskToReadyList+0xd0>)
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	3301      	adds	r3, #1
 8005fa0:	4a1e      	ldr	r2, [pc, #120]	; (800601c <prvAddNewTaskToReadyList+0xd0>)
 8005fa2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005fa4:	4b1d      	ldr	r3, [pc, #116]	; (800601c <prvAddNewTaskToReadyList+0xd0>)
 8005fa6:	681a      	ldr	r2, [r3, #0]
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fb0:	4b1b      	ldr	r3, [pc, #108]	; (8006020 <prvAddNewTaskToReadyList+0xd4>)
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	429a      	cmp	r2, r3
 8005fb6:	d903      	bls.n	8005fc0 <prvAddNewTaskToReadyList+0x74>
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fbc:	4a18      	ldr	r2, [pc, #96]	; (8006020 <prvAddNewTaskToReadyList+0xd4>)
 8005fbe:	6013      	str	r3, [r2, #0]
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fc4:	4613      	mov	r3, r2
 8005fc6:	009b      	lsls	r3, r3, #2
 8005fc8:	4413      	add	r3, r2
 8005fca:	009b      	lsls	r3, r3, #2
 8005fcc:	4a15      	ldr	r2, [pc, #84]	; (8006024 <prvAddNewTaskToReadyList+0xd8>)
 8005fce:	441a      	add	r2, r3
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	3304      	adds	r3, #4
 8005fd4:	4619      	mov	r1, r3
 8005fd6:	4610      	mov	r0, r2
 8005fd8:	f7fe ffab 	bl	8004f32 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005fdc:	f001 fadc 	bl	8007598 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005fe0:	4b0d      	ldr	r3, [pc, #52]	; (8006018 <prvAddNewTaskToReadyList+0xcc>)
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d00e      	beq.n	8006006 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005fe8:	4b0a      	ldr	r3, [pc, #40]	; (8006014 <prvAddNewTaskToReadyList+0xc8>)
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ff2:	429a      	cmp	r2, r3
 8005ff4:	d207      	bcs.n	8006006 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005ff6:	4b0c      	ldr	r3, [pc, #48]	; (8006028 <prvAddNewTaskToReadyList+0xdc>)
 8005ff8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ffc:	601a      	str	r2, [r3, #0]
 8005ffe:	f3bf 8f4f 	dsb	sy
 8006002:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006006:	bf00      	nop
 8006008:	3708      	adds	r7, #8
 800600a:	46bd      	mov	sp, r7
 800600c:	bd80      	pop	{r7, pc}
 800600e:	bf00      	nop
 8006010:	20000c9c 	.word	0x20000c9c
 8006014:	200007c8 	.word	0x200007c8
 8006018:	20000ca8 	.word	0x20000ca8
 800601c:	20000cb8 	.word	0x20000cb8
 8006020:	20000ca4 	.word	0x20000ca4
 8006024:	200007cc 	.word	0x200007cc
 8006028:	e000ed04 	.word	0xe000ed04

0800602c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800602c:	b580      	push	{r7, lr}
 800602e:	b084      	sub	sp, #16
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006034:	2300      	movs	r3, #0
 8006036:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d016      	beq.n	800606c <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800603e:	4b13      	ldr	r3, [pc, #76]	; (800608c <vTaskDelay+0x60>)
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d009      	beq.n	800605a <vTaskDelay+0x2e>
 8006046:	f04f 0350 	mov.w	r3, #80	; 0x50
 800604a:	f383 8811 	msr	BASEPRI, r3
 800604e:	f3bf 8f6f 	isb	sy
 8006052:	f3bf 8f4f 	dsb	sy
 8006056:	60bb      	str	r3, [r7, #8]
 8006058:	e7fe      	b.n	8006058 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800605a:	f000 f87f 	bl	800615c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800605e:	2100      	movs	r1, #0
 8006060:	6878      	ldr	r0, [r7, #4]
 8006062:	f000 fde9 	bl	8006c38 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006066:	f000 f887 	bl	8006178 <xTaskResumeAll>
 800606a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d107      	bne.n	8006082 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8006072:	4b07      	ldr	r3, [pc, #28]	; (8006090 <vTaskDelay+0x64>)
 8006074:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006078:	601a      	str	r2, [r3, #0]
 800607a:	f3bf 8f4f 	dsb	sy
 800607e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006082:	bf00      	nop
 8006084:	3710      	adds	r7, #16
 8006086:	46bd      	mov	sp, r7
 8006088:	bd80      	pop	{r7, pc}
 800608a:	bf00      	nop
 800608c:	20000cc4 	.word	0x20000cc4
 8006090:	e000ed04 	.word	0xe000ed04

08006094 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b08a      	sub	sp, #40	; 0x28
 8006098:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800609a:	2300      	movs	r3, #0
 800609c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800609e:	2300      	movs	r3, #0
 80060a0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80060a2:	463a      	mov	r2, r7
 80060a4:	1d39      	adds	r1, r7, #4
 80060a6:	f107 0308 	add.w	r3, r7, #8
 80060aa:	4618      	mov	r0, r3
 80060ac:	f7fe fee0 	bl	8004e70 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80060b0:	6839      	ldr	r1, [r7, #0]
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	68ba      	ldr	r2, [r7, #8]
 80060b6:	9202      	str	r2, [sp, #8]
 80060b8:	9301      	str	r3, [sp, #4]
 80060ba:	2300      	movs	r3, #0
 80060bc:	9300      	str	r3, [sp, #0]
 80060be:	2300      	movs	r3, #0
 80060c0:	460a      	mov	r2, r1
 80060c2:	4920      	ldr	r1, [pc, #128]	; (8006144 <vTaskStartScheduler+0xb0>)
 80060c4:	4820      	ldr	r0, [pc, #128]	; (8006148 <vTaskStartScheduler+0xb4>)
 80060c6:	f7ff fe1d 	bl	8005d04 <xTaskCreateStatic>
 80060ca:	4602      	mov	r2, r0
 80060cc:	4b1f      	ldr	r3, [pc, #124]	; (800614c <vTaskStartScheduler+0xb8>)
 80060ce:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80060d0:	4b1e      	ldr	r3, [pc, #120]	; (800614c <vTaskStartScheduler+0xb8>)
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d002      	beq.n	80060de <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80060d8:	2301      	movs	r3, #1
 80060da:	617b      	str	r3, [r7, #20]
 80060dc:	e001      	b.n	80060e2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80060de:	2300      	movs	r3, #0
 80060e0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80060e2:	697b      	ldr	r3, [r7, #20]
 80060e4:	2b01      	cmp	r3, #1
 80060e6:	d102      	bne.n	80060ee <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80060e8:	f000 fdfa 	bl	8006ce0 <xTimerCreateTimerTask>
 80060ec:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80060ee:	697b      	ldr	r3, [r7, #20]
 80060f0:	2b01      	cmp	r3, #1
 80060f2:	d115      	bne.n	8006120 <vTaskStartScheduler+0x8c>
 80060f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060f8:	f383 8811 	msr	BASEPRI, r3
 80060fc:	f3bf 8f6f 	isb	sy
 8006100:	f3bf 8f4f 	dsb	sy
 8006104:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006106:	4b12      	ldr	r3, [pc, #72]	; (8006150 <vTaskStartScheduler+0xbc>)
 8006108:	f04f 32ff 	mov.w	r2, #4294967295
 800610c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800610e:	4b11      	ldr	r3, [pc, #68]	; (8006154 <vTaskStartScheduler+0xc0>)
 8006110:	2201      	movs	r2, #1
 8006112:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8006114:	4b10      	ldr	r3, [pc, #64]	; (8006158 <vTaskStartScheduler+0xc4>)
 8006116:	2200      	movs	r2, #0
 8006118:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800611a:	f001 f971 	bl	8007400 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800611e:	e00d      	b.n	800613c <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006120:	697b      	ldr	r3, [r7, #20]
 8006122:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006126:	d109      	bne.n	800613c <vTaskStartScheduler+0xa8>
 8006128:	f04f 0350 	mov.w	r3, #80	; 0x50
 800612c:	f383 8811 	msr	BASEPRI, r3
 8006130:	f3bf 8f6f 	isb	sy
 8006134:	f3bf 8f4f 	dsb	sy
 8006138:	60fb      	str	r3, [r7, #12]
 800613a:	e7fe      	b.n	800613a <vTaskStartScheduler+0xa6>
}
 800613c:	bf00      	nop
 800613e:	3718      	adds	r7, #24
 8006140:	46bd      	mov	sp, r7
 8006142:	bd80      	pop	{r7, pc}
 8006144:	08008178 	.word	0x08008178
 8006148:	08006769 	.word	0x08006769
 800614c:	20000cc0 	.word	0x20000cc0
 8006150:	20000cbc 	.word	0x20000cbc
 8006154:	20000ca8 	.word	0x20000ca8
 8006158:	20000ca0 	.word	0x20000ca0

0800615c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800615c:	b480      	push	{r7}
 800615e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006160:	4b04      	ldr	r3, [pc, #16]	; (8006174 <vTaskSuspendAll+0x18>)
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	3301      	adds	r3, #1
 8006166:	4a03      	ldr	r2, [pc, #12]	; (8006174 <vTaskSuspendAll+0x18>)
 8006168:	6013      	str	r3, [r2, #0]
}
 800616a:	bf00      	nop
 800616c:	46bd      	mov	sp, r7
 800616e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006172:	4770      	bx	lr
 8006174:	20000cc4 	.word	0x20000cc4

08006178 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b084      	sub	sp, #16
 800617c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800617e:	2300      	movs	r3, #0
 8006180:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006182:	2300      	movs	r3, #0
 8006184:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006186:	4b41      	ldr	r3, [pc, #260]	; (800628c <xTaskResumeAll+0x114>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d109      	bne.n	80061a2 <xTaskResumeAll+0x2a>
 800618e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006192:	f383 8811 	msr	BASEPRI, r3
 8006196:	f3bf 8f6f 	isb	sy
 800619a:	f3bf 8f4f 	dsb	sy
 800619e:	603b      	str	r3, [r7, #0]
 80061a0:	e7fe      	b.n	80061a0 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80061a2:	f001 f9cb 	bl	800753c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80061a6:	4b39      	ldr	r3, [pc, #228]	; (800628c <xTaskResumeAll+0x114>)
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	3b01      	subs	r3, #1
 80061ac:	4a37      	ldr	r2, [pc, #220]	; (800628c <xTaskResumeAll+0x114>)
 80061ae:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80061b0:	4b36      	ldr	r3, [pc, #216]	; (800628c <xTaskResumeAll+0x114>)
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d162      	bne.n	800627e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80061b8:	4b35      	ldr	r3, [pc, #212]	; (8006290 <xTaskResumeAll+0x118>)
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d05e      	beq.n	800627e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80061c0:	e02f      	b.n	8006222 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80061c2:	4b34      	ldr	r3, [pc, #208]	; (8006294 <xTaskResumeAll+0x11c>)
 80061c4:	68db      	ldr	r3, [r3, #12]
 80061c6:	68db      	ldr	r3, [r3, #12]
 80061c8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	3318      	adds	r3, #24
 80061ce:	4618      	mov	r0, r3
 80061d0:	f7fe ff0c 	bl	8004fec <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	3304      	adds	r3, #4
 80061d8:	4618      	mov	r0, r3
 80061da:	f7fe ff07 	bl	8004fec <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061e2:	4b2d      	ldr	r3, [pc, #180]	; (8006298 <xTaskResumeAll+0x120>)
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	429a      	cmp	r2, r3
 80061e8:	d903      	bls.n	80061f2 <xTaskResumeAll+0x7a>
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061ee:	4a2a      	ldr	r2, [pc, #168]	; (8006298 <xTaskResumeAll+0x120>)
 80061f0:	6013      	str	r3, [r2, #0]
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061f6:	4613      	mov	r3, r2
 80061f8:	009b      	lsls	r3, r3, #2
 80061fa:	4413      	add	r3, r2
 80061fc:	009b      	lsls	r3, r3, #2
 80061fe:	4a27      	ldr	r2, [pc, #156]	; (800629c <xTaskResumeAll+0x124>)
 8006200:	441a      	add	r2, r3
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	3304      	adds	r3, #4
 8006206:	4619      	mov	r1, r3
 8006208:	4610      	mov	r0, r2
 800620a:	f7fe fe92 	bl	8004f32 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006212:	4b23      	ldr	r3, [pc, #140]	; (80062a0 <xTaskResumeAll+0x128>)
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006218:	429a      	cmp	r2, r3
 800621a:	d302      	bcc.n	8006222 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800621c:	4b21      	ldr	r3, [pc, #132]	; (80062a4 <xTaskResumeAll+0x12c>)
 800621e:	2201      	movs	r2, #1
 8006220:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006222:	4b1c      	ldr	r3, [pc, #112]	; (8006294 <xTaskResumeAll+0x11c>)
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d1cb      	bne.n	80061c2 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d001      	beq.n	8006234 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006230:	f000 fb4c 	bl	80068cc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006234:	4b1c      	ldr	r3, [pc, #112]	; (80062a8 <xTaskResumeAll+0x130>)
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d010      	beq.n	8006262 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006240:	f000 f846 	bl	80062d0 <xTaskIncrementTick>
 8006244:	4603      	mov	r3, r0
 8006246:	2b00      	cmp	r3, #0
 8006248:	d002      	beq.n	8006250 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800624a:	4b16      	ldr	r3, [pc, #88]	; (80062a4 <xTaskResumeAll+0x12c>)
 800624c:	2201      	movs	r2, #1
 800624e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	3b01      	subs	r3, #1
 8006254:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d1f1      	bne.n	8006240 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800625c:	4b12      	ldr	r3, [pc, #72]	; (80062a8 <xTaskResumeAll+0x130>)
 800625e:	2200      	movs	r2, #0
 8006260:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006262:	4b10      	ldr	r3, [pc, #64]	; (80062a4 <xTaskResumeAll+0x12c>)
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d009      	beq.n	800627e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800626a:	2301      	movs	r3, #1
 800626c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800626e:	4b0f      	ldr	r3, [pc, #60]	; (80062ac <xTaskResumeAll+0x134>)
 8006270:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006274:	601a      	str	r2, [r3, #0]
 8006276:	f3bf 8f4f 	dsb	sy
 800627a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800627e:	f001 f98b 	bl	8007598 <vPortExitCritical>

	return xAlreadyYielded;
 8006282:	68bb      	ldr	r3, [r7, #8]
}
 8006284:	4618      	mov	r0, r3
 8006286:	3710      	adds	r7, #16
 8006288:	46bd      	mov	sp, r7
 800628a:	bd80      	pop	{r7, pc}
 800628c:	20000cc4 	.word	0x20000cc4
 8006290:	20000c9c 	.word	0x20000c9c
 8006294:	20000c5c 	.word	0x20000c5c
 8006298:	20000ca4 	.word	0x20000ca4
 800629c:	200007cc 	.word	0x200007cc
 80062a0:	200007c8 	.word	0x200007c8
 80062a4:	20000cb0 	.word	0x20000cb0
 80062a8:	20000cac 	.word	0x20000cac
 80062ac:	e000ed04 	.word	0xe000ed04

080062b0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80062b0:	b480      	push	{r7}
 80062b2:	b083      	sub	sp, #12
 80062b4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80062b6:	4b05      	ldr	r3, [pc, #20]	; (80062cc <xTaskGetTickCount+0x1c>)
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80062bc:	687b      	ldr	r3, [r7, #4]
}
 80062be:	4618      	mov	r0, r3
 80062c0:	370c      	adds	r7, #12
 80062c2:	46bd      	mov	sp, r7
 80062c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c8:	4770      	bx	lr
 80062ca:	bf00      	nop
 80062cc:	20000ca0 	.word	0x20000ca0

080062d0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b086      	sub	sp, #24
 80062d4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80062d6:	2300      	movs	r3, #0
 80062d8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80062da:	4b51      	ldr	r3, [pc, #324]	; (8006420 <xTaskIncrementTick+0x150>)
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	f040 808d 	bne.w	80063fe <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80062e4:	4b4f      	ldr	r3, [pc, #316]	; (8006424 <xTaskIncrementTick+0x154>)
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	3301      	adds	r3, #1
 80062ea:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80062ec:	4a4d      	ldr	r2, [pc, #308]	; (8006424 <xTaskIncrementTick+0x154>)
 80062ee:	693b      	ldr	r3, [r7, #16]
 80062f0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80062f2:	693b      	ldr	r3, [r7, #16]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d11f      	bne.n	8006338 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80062f8:	4b4b      	ldr	r3, [pc, #300]	; (8006428 <xTaskIncrementTick+0x158>)
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d009      	beq.n	8006316 <xTaskIncrementTick+0x46>
 8006302:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006306:	f383 8811 	msr	BASEPRI, r3
 800630a:	f3bf 8f6f 	isb	sy
 800630e:	f3bf 8f4f 	dsb	sy
 8006312:	603b      	str	r3, [r7, #0]
 8006314:	e7fe      	b.n	8006314 <xTaskIncrementTick+0x44>
 8006316:	4b44      	ldr	r3, [pc, #272]	; (8006428 <xTaskIncrementTick+0x158>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	60fb      	str	r3, [r7, #12]
 800631c:	4b43      	ldr	r3, [pc, #268]	; (800642c <xTaskIncrementTick+0x15c>)
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	4a41      	ldr	r2, [pc, #260]	; (8006428 <xTaskIncrementTick+0x158>)
 8006322:	6013      	str	r3, [r2, #0]
 8006324:	4a41      	ldr	r2, [pc, #260]	; (800642c <xTaskIncrementTick+0x15c>)
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	6013      	str	r3, [r2, #0]
 800632a:	4b41      	ldr	r3, [pc, #260]	; (8006430 <xTaskIncrementTick+0x160>)
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	3301      	adds	r3, #1
 8006330:	4a3f      	ldr	r2, [pc, #252]	; (8006430 <xTaskIncrementTick+0x160>)
 8006332:	6013      	str	r3, [r2, #0]
 8006334:	f000 faca 	bl	80068cc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006338:	4b3e      	ldr	r3, [pc, #248]	; (8006434 <xTaskIncrementTick+0x164>)
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	693a      	ldr	r2, [r7, #16]
 800633e:	429a      	cmp	r2, r3
 8006340:	d34e      	bcc.n	80063e0 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006342:	4b39      	ldr	r3, [pc, #228]	; (8006428 <xTaskIncrementTick+0x158>)
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d101      	bne.n	8006350 <xTaskIncrementTick+0x80>
 800634c:	2301      	movs	r3, #1
 800634e:	e000      	b.n	8006352 <xTaskIncrementTick+0x82>
 8006350:	2300      	movs	r3, #0
 8006352:	2b00      	cmp	r3, #0
 8006354:	d004      	beq.n	8006360 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006356:	4b37      	ldr	r3, [pc, #220]	; (8006434 <xTaskIncrementTick+0x164>)
 8006358:	f04f 32ff 	mov.w	r2, #4294967295
 800635c:	601a      	str	r2, [r3, #0]
					break;
 800635e:	e03f      	b.n	80063e0 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006360:	4b31      	ldr	r3, [pc, #196]	; (8006428 <xTaskIncrementTick+0x158>)
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	68db      	ldr	r3, [r3, #12]
 8006366:	68db      	ldr	r3, [r3, #12]
 8006368:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800636a:	68bb      	ldr	r3, [r7, #8]
 800636c:	685b      	ldr	r3, [r3, #4]
 800636e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006370:	693a      	ldr	r2, [r7, #16]
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	429a      	cmp	r2, r3
 8006376:	d203      	bcs.n	8006380 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006378:	4a2e      	ldr	r2, [pc, #184]	; (8006434 <xTaskIncrementTick+0x164>)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6013      	str	r3, [r2, #0]
						break;
 800637e:	e02f      	b.n	80063e0 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006380:	68bb      	ldr	r3, [r7, #8]
 8006382:	3304      	adds	r3, #4
 8006384:	4618      	mov	r0, r3
 8006386:	f7fe fe31 	bl	8004fec <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800638a:	68bb      	ldr	r3, [r7, #8]
 800638c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800638e:	2b00      	cmp	r3, #0
 8006390:	d004      	beq.n	800639c <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006392:	68bb      	ldr	r3, [r7, #8]
 8006394:	3318      	adds	r3, #24
 8006396:	4618      	mov	r0, r3
 8006398:	f7fe fe28 	bl	8004fec <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800639c:	68bb      	ldr	r3, [r7, #8]
 800639e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063a0:	4b25      	ldr	r3, [pc, #148]	; (8006438 <xTaskIncrementTick+0x168>)
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	429a      	cmp	r2, r3
 80063a6:	d903      	bls.n	80063b0 <xTaskIncrementTick+0xe0>
 80063a8:	68bb      	ldr	r3, [r7, #8]
 80063aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063ac:	4a22      	ldr	r2, [pc, #136]	; (8006438 <xTaskIncrementTick+0x168>)
 80063ae:	6013      	str	r3, [r2, #0]
 80063b0:	68bb      	ldr	r3, [r7, #8]
 80063b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063b4:	4613      	mov	r3, r2
 80063b6:	009b      	lsls	r3, r3, #2
 80063b8:	4413      	add	r3, r2
 80063ba:	009b      	lsls	r3, r3, #2
 80063bc:	4a1f      	ldr	r2, [pc, #124]	; (800643c <xTaskIncrementTick+0x16c>)
 80063be:	441a      	add	r2, r3
 80063c0:	68bb      	ldr	r3, [r7, #8]
 80063c2:	3304      	adds	r3, #4
 80063c4:	4619      	mov	r1, r3
 80063c6:	4610      	mov	r0, r2
 80063c8:	f7fe fdb3 	bl	8004f32 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80063cc:	68bb      	ldr	r3, [r7, #8]
 80063ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063d0:	4b1b      	ldr	r3, [pc, #108]	; (8006440 <xTaskIncrementTick+0x170>)
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063d6:	429a      	cmp	r2, r3
 80063d8:	d3b3      	bcc.n	8006342 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80063da:	2301      	movs	r3, #1
 80063dc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80063de:	e7b0      	b.n	8006342 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80063e0:	4b17      	ldr	r3, [pc, #92]	; (8006440 <xTaskIncrementTick+0x170>)
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063e6:	4915      	ldr	r1, [pc, #84]	; (800643c <xTaskIncrementTick+0x16c>)
 80063e8:	4613      	mov	r3, r2
 80063ea:	009b      	lsls	r3, r3, #2
 80063ec:	4413      	add	r3, r2
 80063ee:	009b      	lsls	r3, r3, #2
 80063f0:	440b      	add	r3, r1
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	2b01      	cmp	r3, #1
 80063f6:	d907      	bls.n	8006408 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 80063f8:	2301      	movs	r3, #1
 80063fa:	617b      	str	r3, [r7, #20]
 80063fc:	e004      	b.n	8006408 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80063fe:	4b11      	ldr	r3, [pc, #68]	; (8006444 <xTaskIncrementTick+0x174>)
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	3301      	adds	r3, #1
 8006404:	4a0f      	ldr	r2, [pc, #60]	; (8006444 <xTaskIncrementTick+0x174>)
 8006406:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006408:	4b0f      	ldr	r3, [pc, #60]	; (8006448 <xTaskIncrementTick+0x178>)
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d001      	beq.n	8006414 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8006410:	2301      	movs	r3, #1
 8006412:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006414:	697b      	ldr	r3, [r7, #20]
}
 8006416:	4618      	mov	r0, r3
 8006418:	3718      	adds	r7, #24
 800641a:	46bd      	mov	sp, r7
 800641c:	bd80      	pop	{r7, pc}
 800641e:	bf00      	nop
 8006420:	20000cc4 	.word	0x20000cc4
 8006424:	20000ca0 	.word	0x20000ca0
 8006428:	20000c54 	.word	0x20000c54
 800642c:	20000c58 	.word	0x20000c58
 8006430:	20000cb4 	.word	0x20000cb4
 8006434:	20000cbc 	.word	0x20000cbc
 8006438:	20000ca4 	.word	0x20000ca4
 800643c:	200007cc 	.word	0x200007cc
 8006440:	200007c8 	.word	0x200007c8
 8006444:	20000cac 	.word	0x20000cac
 8006448:	20000cb0 	.word	0x20000cb0

0800644c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800644c:	b480      	push	{r7}
 800644e:	b085      	sub	sp, #20
 8006450:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006452:	4b27      	ldr	r3, [pc, #156]	; (80064f0 <vTaskSwitchContext+0xa4>)
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d003      	beq.n	8006462 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800645a:	4b26      	ldr	r3, [pc, #152]	; (80064f4 <vTaskSwitchContext+0xa8>)
 800645c:	2201      	movs	r2, #1
 800645e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006460:	e040      	b.n	80064e4 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8006462:	4b24      	ldr	r3, [pc, #144]	; (80064f4 <vTaskSwitchContext+0xa8>)
 8006464:	2200      	movs	r2, #0
 8006466:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006468:	4b23      	ldr	r3, [pc, #140]	; (80064f8 <vTaskSwitchContext+0xac>)
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	60fb      	str	r3, [r7, #12]
 800646e:	e00f      	b.n	8006490 <vTaskSwitchContext+0x44>
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d109      	bne.n	800648a <vTaskSwitchContext+0x3e>
 8006476:	f04f 0350 	mov.w	r3, #80	; 0x50
 800647a:	f383 8811 	msr	BASEPRI, r3
 800647e:	f3bf 8f6f 	isb	sy
 8006482:	f3bf 8f4f 	dsb	sy
 8006486:	607b      	str	r3, [r7, #4]
 8006488:	e7fe      	b.n	8006488 <vTaskSwitchContext+0x3c>
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	3b01      	subs	r3, #1
 800648e:	60fb      	str	r3, [r7, #12]
 8006490:	491a      	ldr	r1, [pc, #104]	; (80064fc <vTaskSwitchContext+0xb0>)
 8006492:	68fa      	ldr	r2, [r7, #12]
 8006494:	4613      	mov	r3, r2
 8006496:	009b      	lsls	r3, r3, #2
 8006498:	4413      	add	r3, r2
 800649a:	009b      	lsls	r3, r3, #2
 800649c:	440b      	add	r3, r1
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d0e5      	beq.n	8006470 <vTaskSwitchContext+0x24>
 80064a4:	68fa      	ldr	r2, [r7, #12]
 80064a6:	4613      	mov	r3, r2
 80064a8:	009b      	lsls	r3, r3, #2
 80064aa:	4413      	add	r3, r2
 80064ac:	009b      	lsls	r3, r3, #2
 80064ae:	4a13      	ldr	r2, [pc, #76]	; (80064fc <vTaskSwitchContext+0xb0>)
 80064b0:	4413      	add	r3, r2
 80064b2:	60bb      	str	r3, [r7, #8]
 80064b4:	68bb      	ldr	r3, [r7, #8]
 80064b6:	685b      	ldr	r3, [r3, #4]
 80064b8:	685a      	ldr	r2, [r3, #4]
 80064ba:	68bb      	ldr	r3, [r7, #8]
 80064bc:	605a      	str	r2, [r3, #4]
 80064be:	68bb      	ldr	r3, [r7, #8]
 80064c0:	685a      	ldr	r2, [r3, #4]
 80064c2:	68bb      	ldr	r3, [r7, #8]
 80064c4:	3308      	adds	r3, #8
 80064c6:	429a      	cmp	r2, r3
 80064c8:	d104      	bne.n	80064d4 <vTaskSwitchContext+0x88>
 80064ca:	68bb      	ldr	r3, [r7, #8]
 80064cc:	685b      	ldr	r3, [r3, #4]
 80064ce:	685a      	ldr	r2, [r3, #4]
 80064d0:	68bb      	ldr	r3, [r7, #8]
 80064d2:	605a      	str	r2, [r3, #4]
 80064d4:	68bb      	ldr	r3, [r7, #8]
 80064d6:	685b      	ldr	r3, [r3, #4]
 80064d8:	68db      	ldr	r3, [r3, #12]
 80064da:	4a09      	ldr	r2, [pc, #36]	; (8006500 <vTaskSwitchContext+0xb4>)
 80064dc:	6013      	str	r3, [r2, #0]
 80064de:	4a06      	ldr	r2, [pc, #24]	; (80064f8 <vTaskSwitchContext+0xac>)
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	6013      	str	r3, [r2, #0]
}
 80064e4:	bf00      	nop
 80064e6:	3714      	adds	r7, #20
 80064e8:	46bd      	mov	sp, r7
 80064ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ee:	4770      	bx	lr
 80064f0:	20000cc4 	.word	0x20000cc4
 80064f4:	20000cb0 	.word	0x20000cb0
 80064f8:	20000ca4 	.word	0x20000ca4
 80064fc:	200007cc 	.word	0x200007cc
 8006500:	200007c8 	.word	0x200007c8

08006504 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b084      	sub	sp, #16
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
 800650c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d109      	bne.n	8006528 <vTaskPlaceOnEventList+0x24>
 8006514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006518:	f383 8811 	msr	BASEPRI, r3
 800651c:	f3bf 8f6f 	isb	sy
 8006520:	f3bf 8f4f 	dsb	sy
 8006524:	60fb      	str	r3, [r7, #12]
 8006526:	e7fe      	b.n	8006526 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006528:	4b07      	ldr	r3, [pc, #28]	; (8006548 <vTaskPlaceOnEventList+0x44>)
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	3318      	adds	r3, #24
 800652e:	4619      	mov	r1, r3
 8006530:	6878      	ldr	r0, [r7, #4]
 8006532:	f7fe fd22 	bl	8004f7a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006536:	2101      	movs	r1, #1
 8006538:	6838      	ldr	r0, [r7, #0]
 800653a:	f000 fb7d 	bl	8006c38 <prvAddCurrentTaskToDelayedList>
}
 800653e:	bf00      	nop
 8006540:	3710      	adds	r7, #16
 8006542:	46bd      	mov	sp, r7
 8006544:	bd80      	pop	{r7, pc}
 8006546:	bf00      	nop
 8006548:	200007c8 	.word	0x200007c8

0800654c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800654c:	b580      	push	{r7, lr}
 800654e:	b086      	sub	sp, #24
 8006550:	af00      	add	r7, sp, #0
 8006552:	60f8      	str	r0, [r7, #12]
 8006554:	60b9      	str	r1, [r7, #8]
 8006556:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d109      	bne.n	8006572 <vTaskPlaceOnEventListRestricted+0x26>
 800655e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006562:	f383 8811 	msr	BASEPRI, r3
 8006566:	f3bf 8f6f 	isb	sy
 800656a:	f3bf 8f4f 	dsb	sy
 800656e:	617b      	str	r3, [r7, #20]
 8006570:	e7fe      	b.n	8006570 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006572:	4b0a      	ldr	r3, [pc, #40]	; (800659c <vTaskPlaceOnEventListRestricted+0x50>)
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	3318      	adds	r3, #24
 8006578:	4619      	mov	r1, r3
 800657a:	68f8      	ldr	r0, [r7, #12]
 800657c:	f7fe fcd9 	bl	8004f32 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d002      	beq.n	800658c <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8006586:	f04f 33ff 	mov.w	r3, #4294967295
 800658a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800658c:	6879      	ldr	r1, [r7, #4]
 800658e:	68b8      	ldr	r0, [r7, #8]
 8006590:	f000 fb52 	bl	8006c38 <prvAddCurrentTaskToDelayedList>
	}
 8006594:	bf00      	nop
 8006596:	3718      	adds	r7, #24
 8006598:	46bd      	mov	sp, r7
 800659a:	bd80      	pop	{r7, pc}
 800659c:	200007c8 	.word	0x200007c8

080065a0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b086      	sub	sp, #24
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	68db      	ldr	r3, [r3, #12]
 80065ac:	68db      	ldr	r3, [r3, #12]
 80065ae:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80065b0:	693b      	ldr	r3, [r7, #16]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d109      	bne.n	80065ca <xTaskRemoveFromEventList+0x2a>
 80065b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065ba:	f383 8811 	msr	BASEPRI, r3
 80065be:	f3bf 8f6f 	isb	sy
 80065c2:	f3bf 8f4f 	dsb	sy
 80065c6:	60fb      	str	r3, [r7, #12]
 80065c8:	e7fe      	b.n	80065c8 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80065ca:	693b      	ldr	r3, [r7, #16]
 80065cc:	3318      	adds	r3, #24
 80065ce:	4618      	mov	r0, r3
 80065d0:	f7fe fd0c 	bl	8004fec <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80065d4:	4b1d      	ldr	r3, [pc, #116]	; (800664c <xTaskRemoveFromEventList+0xac>)
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d11d      	bne.n	8006618 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80065dc:	693b      	ldr	r3, [r7, #16]
 80065de:	3304      	adds	r3, #4
 80065e0:	4618      	mov	r0, r3
 80065e2:	f7fe fd03 	bl	8004fec <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80065e6:	693b      	ldr	r3, [r7, #16]
 80065e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065ea:	4b19      	ldr	r3, [pc, #100]	; (8006650 <xTaskRemoveFromEventList+0xb0>)
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	429a      	cmp	r2, r3
 80065f0:	d903      	bls.n	80065fa <xTaskRemoveFromEventList+0x5a>
 80065f2:	693b      	ldr	r3, [r7, #16]
 80065f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065f6:	4a16      	ldr	r2, [pc, #88]	; (8006650 <xTaskRemoveFromEventList+0xb0>)
 80065f8:	6013      	str	r3, [r2, #0]
 80065fa:	693b      	ldr	r3, [r7, #16]
 80065fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065fe:	4613      	mov	r3, r2
 8006600:	009b      	lsls	r3, r3, #2
 8006602:	4413      	add	r3, r2
 8006604:	009b      	lsls	r3, r3, #2
 8006606:	4a13      	ldr	r2, [pc, #76]	; (8006654 <xTaskRemoveFromEventList+0xb4>)
 8006608:	441a      	add	r2, r3
 800660a:	693b      	ldr	r3, [r7, #16]
 800660c:	3304      	adds	r3, #4
 800660e:	4619      	mov	r1, r3
 8006610:	4610      	mov	r0, r2
 8006612:	f7fe fc8e 	bl	8004f32 <vListInsertEnd>
 8006616:	e005      	b.n	8006624 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006618:	693b      	ldr	r3, [r7, #16]
 800661a:	3318      	adds	r3, #24
 800661c:	4619      	mov	r1, r3
 800661e:	480e      	ldr	r0, [pc, #56]	; (8006658 <xTaskRemoveFromEventList+0xb8>)
 8006620:	f7fe fc87 	bl	8004f32 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006624:	693b      	ldr	r3, [r7, #16]
 8006626:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006628:	4b0c      	ldr	r3, [pc, #48]	; (800665c <xTaskRemoveFromEventList+0xbc>)
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800662e:	429a      	cmp	r2, r3
 8006630:	d905      	bls.n	800663e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006632:	2301      	movs	r3, #1
 8006634:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006636:	4b0a      	ldr	r3, [pc, #40]	; (8006660 <xTaskRemoveFromEventList+0xc0>)
 8006638:	2201      	movs	r2, #1
 800663a:	601a      	str	r2, [r3, #0]
 800663c:	e001      	b.n	8006642 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800663e:	2300      	movs	r3, #0
 8006640:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8006642:	697b      	ldr	r3, [r7, #20]
}
 8006644:	4618      	mov	r0, r3
 8006646:	3718      	adds	r7, #24
 8006648:	46bd      	mov	sp, r7
 800664a:	bd80      	pop	{r7, pc}
 800664c:	20000cc4 	.word	0x20000cc4
 8006650:	20000ca4 	.word	0x20000ca4
 8006654:	200007cc 	.word	0x200007cc
 8006658:	20000c5c 	.word	0x20000c5c
 800665c:	200007c8 	.word	0x200007c8
 8006660:	20000cb0 	.word	0x20000cb0

08006664 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006664:	b480      	push	{r7}
 8006666:	b083      	sub	sp, #12
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800666c:	4b06      	ldr	r3, [pc, #24]	; (8006688 <vTaskInternalSetTimeOutState+0x24>)
 800666e:	681a      	ldr	r2, [r3, #0]
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006674:	4b05      	ldr	r3, [pc, #20]	; (800668c <vTaskInternalSetTimeOutState+0x28>)
 8006676:	681a      	ldr	r2, [r3, #0]
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	605a      	str	r2, [r3, #4]
}
 800667c:	bf00      	nop
 800667e:	370c      	adds	r7, #12
 8006680:	46bd      	mov	sp, r7
 8006682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006686:	4770      	bx	lr
 8006688:	20000cb4 	.word	0x20000cb4
 800668c:	20000ca0 	.word	0x20000ca0

08006690 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006690:	b580      	push	{r7, lr}
 8006692:	b088      	sub	sp, #32
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
 8006698:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d109      	bne.n	80066b4 <xTaskCheckForTimeOut+0x24>
 80066a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066a4:	f383 8811 	msr	BASEPRI, r3
 80066a8:	f3bf 8f6f 	isb	sy
 80066ac:	f3bf 8f4f 	dsb	sy
 80066b0:	613b      	str	r3, [r7, #16]
 80066b2:	e7fe      	b.n	80066b2 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d109      	bne.n	80066ce <xTaskCheckForTimeOut+0x3e>
 80066ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066be:	f383 8811 	msr	BASEPRI, r3
 80066c2:	f3bf 8f6f 	isb	sy
 80066c6:	f3bf 8f4f 	dsb	sy
 80066ca:	60fb      	str	r3, [r7, #12]
 80066cc:	e7fe      	b.n	80066cc <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 80066ce:	f000 ff35 	bl	800753c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80066d2:	4b1d      	ldr	r3, [pc, #116]	; (8006748 <xTaskCheckForTimeOut+0xb8>)
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	685b      	ldr	r3, [r3, #4]
 80066dc:	69ba      	ldr	r2, [r7, #24]
 80066de:	1ad3      	subs	r3, r2, r3
 80066e0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066ea:	d102      	bne.n	80066f2 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80066ec:	2300      	movs	r3, #0
 80066ee:	61fb      	str	r3, [r7, #28]
 80066f0:	e023      	b.n	800673a <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681a      	ldr	r2, [r3, #0]
 80066f6:	4b15      	ldr	r3, [pc, #84]	; (800674c <xTaskCheckForTimeOut+0xbc>)
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	429a      	cmp	r2, r3
 80066fc:	d007      	beq.n	800670e <xTaskCheckForTimeOut+0x7e>
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	685b      	ldr	r3, [r3, #4]
 8006702:	69ba      	ldr	r2, [r7, #24]
 8006704:	429a      	cmp	r2, r3
 8006706:	d302      	bcc.n	800670e <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006708:	2301      	movs	r3, #1
 800670a:	61fb      	str	r3, [r7, #28]
 800670c:	e015      	b.n	800673a <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	697a      	ldr	r2, [r7, #20]
 8006714:	429a      	cmp	r2, r3
 8006716:	d20b      	bcs.n	8006730 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	681a      	ldr	r2, [r3, #0]
 800671c:	697b      	ldr	r3, [r7, #20]
 800671e:	1ad2      	subs	r2, r2, r3
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006724:	6878      	ldr	r0, [r7, #4]
 8006726:	f7ff ff9d 	bl	8006664 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800672a:	2300      	movs	r3, #0
 800672c:	61fb      	str	r3, [r7, #28]
 800672e:	e004      	b.n	800673a <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	2200      	movs	r2, #0
 8006734:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006736:	2301      	movs	r3, #1
 8006738:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800673a:	f000 ff2d 	bl	8007598 <vPortExitCritical>

	return xReturn;
 800673e:	69fb      	ldr	r3, [r7, #28]
}
 8006740:	4618      	mov	r0, r3
 8006742:	3720      	adds	r7, #32
 8006744:	46bd      	mov	sp, r7
 8006746:	bd80      	pop	{r7, pc}
 8006748:	20000ca0 	.word	0x20000ca0
 800674c:	20000cb4 	.word	0x20000cb4

08006750 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006750:	b480      	push	{r7}
 8006752:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006754:	4b03      	ldr	r3, [pc, #12]	; (8006764 <vTaskMissedYield+0x14>)
 8006756:	2201      	movs	r2, #1
 8006758:	601a      	str	r2, [r3, #0]
}
 800675a:	bf00      	nop
 800675c:	46bd      	mov	sp, r7
 800675e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006762:	4770      	bx	lr
 8006764:	20000cb0 	.word	0x20000cb0

08006768 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006768:	b580      	push	{r7, lr}
 800676a:	b082      	sub	sp, #8
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006770:	f000 f852 	bl	8006818 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006774:	4b06      	ldr	r3, [pc, #24]	; (8006790 <prvIdleTask+0x28>)
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	2b01      	cmp	r3, #1
 800677a:	d9f9      	bls.n	8006770 <prvIdleTask+0x8>
			{
				taskYIELD();
 800677c:	4b05      	ldr	r3, [pc, #20]	; (8006794 <prvIdleTask+0x2c>)
 800677e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006782:	601a      	str	r2, [r3, #0]
 8006784:	f3bf 8f4f 	dsb	sy
 8006788:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800678c:	e7f0      	b.n	8006770 <prvIdleTask+0x8>
 800678e:	bf00      	nop
 8006790:	200007cc 	.word	0x200007cc
 8006794:	e000ed04 	.word	0xe000ed04

08006798 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006798:	b580      	push	{r7, lr}
 800679a:	b082      	sub	sp, #8
 800679c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800679e:	2300      	movs	r3, #0
 80067a0:	607b      	str	r3, [r7, #4]
 80067a2:	e00c      	b.n	80067be <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80067a4:	687a      	ldr	r2, [r7, #4]
 80067a6:	4613      	mov	r3, r2
 80067a8:	009b      	lsls	r3, r3, #2
 80067aa:	4413      	add	r3, r2
 80067ac:	009b      	lsls	r3, r3, #2
 80067ae:	4a12      	ldr	r2, [pc, #72]	; (80067f8 <prvInitialiseTaskLists+0x60>)
 80067b0:	4413      	add	r3, r2
 80067b2:	4618      	mov	r0, r3
 80067b4:	f7fe fb90 	bl	8004ed8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	3301      	adds	r3, #1
 80067bc:	607b      	str	r3, [r7, #4]
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2b37      	cmp	r3, #55	; 0x37
 80067c2:	d9ef      	bls.n	80067a4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80067c4:	480d      	ldr	r0, [pc, #52]	; (80067fc <prvInitialiseTaskLists+0x64>)
 80067c6:	f7fe fb87 	bl	8004ed8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80067ca:	480d      	ldr	r0, [pc, #52]	; (8006800 <prvInitialiseTaskLists+0x68>)
 80067cc:	f7fe fb84 	bl	8004ed8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80067d0:	480c      	ldr	r0, [pc, #48]	; (8006804 <prvInitialiseTaskLists+0x6c>)
 80067d2:	f7fe fb81 	bl	8004ed8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80067d6:	480c      	ldr	r0, [pc, #48]	; (8006808 <prvInitialiseTaskLists+0x70>)
 80067d8:	f7fe fb7e 	bl	8004ed8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80067dc:	480b      	ldr	r0, [pc, #44]	; (800680c <prvInitialiseTaskLists+0x74>)
 80067de:	f7fe fb7b 	bl	8004ed8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80067e2:	4b0b      	ldr	r3, [pc, #44]	; (8006810 <prvInitialiseTaskLists+0x78>)
 80067e4:	4a05      	ldr	r2, [pc, #20]	; (80067fc <prvInitialiseTaskLists+0x64>)
 80067e6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80067e8:	4b0a      	ldr	r3, [pc, #40]	; (8006814 <prvInitialiseTaskLists+0x7c>)
 80067ea:	4a05      	ldr	r2, [pc, #20]	; (8006800 <prvInitialiseTaskLists+0x68>)
 80067ec:	601a      	str	r2, [r3, #0]
}
 80067ee:	bf00      	nop
 80067f0:	3708      	adds	r7, #8
 80067f2:	46bd      	mov	sp, r7
 80067f4:	bd80      	pop	{r7, pc}
 80067f6:	bf00      	nop
 80067f8:	200007cc 	.word	0x200007cc
 80067fc:	20000c2c 	.word	0x20000c2c
 8006800:	20000c40 	.word	0x20000c40
 8006804:	20000c5c 	.word	0x20000c5c
 8006808:	20000c70 	.word	0x20000c70
 800680c:	20000c88 	.word	0x20000c88
 8006810:	20000c54 	.word	0x20000c54
 8006814:	20000c58 	.word	0x20000c58

08006818 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b082      	sub	sp, #8
 800681c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800681e:	e019      	b.n	8006854 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006820:	f000 fe8c 	bl	800753c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8006824:	4b0f      	ldr	r3, [pc, #60]	; (8006864 <prvCheckTasksWaitingTermination+0x4c>)
 8006826:	68db      	ldr	r3, [r3, #12]
 8006828:	68db      	ldr	r3, [r3, #12]
 800682a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	3304      	adds	r3, #4
 8006830:	4618      	mov	r0, r3
 8006832:	f7fe fbdb 	bl	8004fec <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006836:	4b0c      	ldr	r3, [pc, #48]	; (8006868 <prvCheckTasksWaitingTermination+0x50>)
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	3b01      	subs	r3, #1
 800683c:	4a0a      	ldr	r2, [pc, #40]	; (8006868 <prvCheckTasksWaitingTermination+0x50>)
 800683e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006840:	4b0a      	ldr	r3, [pc, #40]	; (800686c <prvCheckTasksWaitingTermination+0x54>)
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	3b01      	subs	r3, #1
 8006846:	4a09      	ldr	r2, [pc, #36]	; (800686c <prvCheckTasksWaitingTermination+0x54>)
 8006848:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800684a:	f000 fea5 	bl	8007598 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800684e:	6878      	ldr	r0, [r7, #4]
 8006850:	f000 f80e 	bl	8006870 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006854:	4b05      	ldr	r3, [pc, #20]	; (800686c <prvCheckTasksWaitingTermination+0x54>)
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d1e1      	bne.n	8006820 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800685c:	bf00      	nop
 800685e:	3708      	adds	r7, #8
 8006860:	46bd      	mov	sp, r7
 8006862:	bd80      	pop	{r7, pc}
 8006864:	20000c70 	.word	0x20000c70
 8006868:	20000c9c 	.word	0x20000c9c
 800686c:	20000c84 	.word	0x20000c84

08006870 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006870:	b580      	push	{r7, lr}
 8006872:	b084      	sub	sp, #16
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800687e:	2b00      	cmp	r3, #0
 8006880:	d108      	bne.n	8006894 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006886:	4618      	mov	r0, r3
 8006888:	f001 f834 	bl	80078f4 <vPortFree>
				vPortFree( pxTCB );
 800688c:	6878      	ldr	r0, [r7, #4]
 800688e:	f001 f831 	bl	80078f4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006892:	e017      	b.n	80068c4 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800689a:	2b01      	cmp	r3, #1
 800689c:	d103      	bne.n	80068a6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800689e:	6878      	ldr	r0, [r7, #4]
 80068a0:	f001 f828 	bl	80078f4 <vPortFree>
	}
 80068a4:	e00e      	b.n	80068c4 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80068ac:	2b02      	cmp	r3, #2
 80068ae:	d009      	beq.n	80068c4 <prvDeleteTCB+0x54>
 80068b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068b4:	f383 8811 	msr	BASEPRI, r3
 80068b8:	f3bf 8f6f 	isb	sy
 80068bc:	f3bf 8f4f 	dsb	sy
 80068c0:	60fb      	str	r3, [r7, #12]
 80068c2:	e7fe      	b.n	80068c2 <prvDeleteTCB+0x52>
	}
 80068c4:	bf00      	nop
 80068c6:	3710      	adds	r7, #16
 80068c8:	46bd      	mov	sp, r7
 80068ca:	bd80      	pop	{r7, pc}

080068cc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80068cc:	b480      	push	{r7}
 80068ce:	b083      	sub	sp, #12
 80068d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80068d2:	4b0f      	ldr	r3, [pc, #60]	; (8006910 <prvResetNextTaskUnblockTime+0x44>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d101      	bne.n	80068e0 <prvResetNextTaskUnblockTime+0x14>
 80068dc:	2301      	movs	r3, #1
 80068de:	e000      	b.n	80068e2 <prvResetNextTaskUnblockTime+0x16>
 80068e0:	2300      	movs	r3, #0
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d004      	beq.n	80068f0 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80068e6:	4b0b      	ldr	r3, [pc, #44]	; (8006914 <prvResetNextTaskUnblockTime+0x48>)
 80068e8:	f04f 32ff 	mov.w	r2, #4294967295
 80068ec:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80068ee:	e008      	b.n	8006902 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80068f0:	4b07      	ldr	r3, [pc, #28]	; (8006910 <prvResetNextTaskUnblockTime+0x44>)
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	68db      	ldr	r3, [r3, #12]
 80068f6:	68db      	ldr	r3, [r3, #12]
 80068f8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	685b      	ldr	r3, [r3, #4]
 80068fe:	4a05      	ldr	r2, [pc, #20]	; (8006914 <prvResetNextTaskUnblockTime+0x48>)
 8006900:	6013      	str	r3, [r2, #0]
}
 8006902:	bf00      	nop
 8006904:	370c      	adds	r7, #12
 8006906:	46bd      	mov	sp, r7
 8006908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690c:	4770      	bx	lr
 800690e:	bf00      	nop
 8006910:	20000c54 	.word	0x20000c54
 8006914:	20000cbc 	.word	0x20000cbc

08006918 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006918:	b480      	push	{r7}
 800691a:	b083      	sub	sp, #12
 800691c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800691e:	4b0b      	ldr	r3, [pc, #44]	; (800694c <xTaskGetSchedulerState+0x34>)
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	2b00      	cmp	r3, #0
 8006924:	d102      	bne.n	800692c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006926:	2301      	movs	r3, #1
 8006928:	607b      	str	r3, [r7, #4]
 800692a:	e008      	b.n	800693e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800692c:	4b08      	ldr	r3, [pc, #32]	; (8006950 <xTaskGetSchedulerState+0x38>)
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d102      	bne.n	800693a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006934:	2302      	movs	r3, #2
 8006936:	607b      	str	r3, [r7, #4]
 8006938:	e001      	b.n	800693e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800693a:	2300      	movs	r3, #0
 800693c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800693e:	687b      	ldr	r3, [r7, #4]
	}
 8006940:	4618      	mov	r0, r3
 8006942:	370c      	adds	r7, #12
 8006944:	46bd      	mov	sp, r7
 8006946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694a:	4770      	bx	lr
 800694c:	20000ca8 	.word	0x20000ca8
 8006950:	20000cc4 	.word	0x20000cc4

08006954 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006954:	b580      	push	{r7, lr}
 8006956:	b084      	sub	sp, #16
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006960:	2300      	movs	r3, #0
 8006962:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d056      	beq.n	8006a18 <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800696a:	68bb      	ldr	r3, [r7, #8]
 800696c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800696e:	4b2d      	ldr	r3, [pc, #180]	; (8006a24 <xTaskPriorityInherit+0xd0>)
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006974:	429a      	cmp	r2, r3
 8006976:	d246      	bcs.n	8006a06 <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006978:	68bb      	ldr	r3, [r7, #8]
 800697a:	699b      	ldr	r3, [r3, #24]
 800697c:	2b00      	cmp	r3, #0
 800697e:	db06      	blt.n	800698e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006980:	4b28      	ldr	r3, [pc, #160]	; (8006a24 <xTaskPriorityInherit+0xd0>)
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006986:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800698a:	68bb      	ldr	r3, [r7, #8]
 800698c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800698e:	68bb      	ldr	r3, [r7, #8]
 8006990:	6959      	ldr	r1, [r3, #20]
 8006992:	68bb      	ldr	r3, [r7, #8]
 8006994:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006996:	4613      	mov	r3, r2
 8006998:	009b      	lsls	r3, r3, #2
 800699a:	4413      	add	r3, r2
 800699c:	009b      	lsls	r3, r3, #2
 800699e:	4a22      	ldr	r2, [pc, #136]	; (8006a28 <xTaskPriorityInherit+0xd4>)
 80069a0:	4413      	add	r3, r2
 80069a2:	4299      	cmp	r1, r3
 80069a4:	d101      	bne.n	80069aa <xTaskPriorityInherit+0x56>
 80069a6:	2301      	movs	r3, #1
 80069a8:	e000      	b.n	80069ac <xTaskPriorityInherit+0x58>
 80069aa:	2300      	movs	r3, #0
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d022      	beq.n	80069f6 <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80069b0:	68bb      	ldr	r3, [r7, #8]
 80069b2:	3304      	adds	r3, #4
 80069b4:	4618      	mov	r0, r3
 80069b6:	f7fe fb19 	bl	8004fec <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80069ba:	4b1a      	ldr	r3, [pc, #104]	; (8006a24 <xTaskPriorityInherit+0xd0>)
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069c0:	68bb      	ldr	r3, [r7, #8]
 80069c2:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80069c4:	68bb      	ldr	r3, [r7, #8]
 80069c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069c8:	4b18      	ldr	r3, [pc, #96]	; (8006a2c <xTaskPriorityInherit+0xd8>)
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	429a      	cmp	r2, r3
 80069ce:	d903      	bls.n	80069d8 <xTaskPriorityInherit+0x84>
 80069d0:	68bb      	ldr	r3, [r7, #8]
 80069d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069d4:	4a15      	ldr	r2, [pc, #84]	; (8006a2c <xTaskPriorityInherit+0xd8>)
 80069d6:	6013      	str	r3, [r2, #0]
 80069d8:	68bb      	ldr	r3, [r7, #8]
 80069da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069dc:	4613      	mov	r3, r2
 80069de:	009b      	lsls	r3, r3, #2
 80069e0:	4413      	add	r3, r2
 80069e2:	009b      	lsls	r3, r3, #2
 80069e4:	4a10      	ldr	r2, [pc, #64]	; (8006a28 <xTaskPriorityInherit+0xd4>)
 80069e6:	441a      	add	r2, r3
 80069e8:	68bb      	ldr	r3, [r7, #8]
 80069ea:	3304      	adds	r3, #4
 80069ec:	4619      	mov	r1, r3
 80069ee:	4610      	mov	r0, r2
 80069f0:	f7fe fa9f 	bl	8004f32 <vListInsertEnd>
 80069f4:	e004      	b.n	8006a00 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80069f6:	4b0b      	ldr	r3, [pc, #44]	; (8006a24 <xTaskPriorityInherit+0xd0>)
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069fc:	68bb      	ldr	r3, [r7, #8]
 80069fe:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8006a00:	2301      	movs	r3, #1
 8006a02:	60fb      	str	r3, [r7, #12]
 8006a04:	e008      	b.n	8006a18 <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006a06:	68bb      	ldr	r3, [r7, #8]
 8006a08:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006a0a:	4b06      	ldr	r3, [pc, #24]	; (8006a24 <xTaskPriorityInherit+0xd0>)
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a10:	429a      	cmp	r2, r3
 8006a12:	d201      	bcs.n	8006a18 <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8006a14:	2301      	movs	r3, #1
 8006a16:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006a18:	68fb      	ldr	r3, [r7, #12]
	}
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	3710      	adds	r7, #16
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	bd80      	pop	{r7, pc}
 8006a22:	bf00      	nop
 8006a24:	200007c8 	.word	0x200007c8
 8006a28:	200007cc 	.word	0x200007cc
 8006a2c:	20000ca4 	.word	0x20000ca4

08006a30 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b086      	sub	sp, #24
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d054      	beq.n	8006af0 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006a46:	4b2d      	ldr	r3, [pc, #180]	; (8006afc <xTaskPriorityDisinherit+0xcc>)
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	693a      	ldr	r2, [r7, #16]
 8006a4c:	429a      	cmp	r2, r3
 8006a4e:	d009      	beq.n	8006a64 <xTaskPriorityDisinherit+0x34>
 8006a50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a54:	f383 8811 	msr	BASEPRI, r3
 8006a58:	f3bf 8f6f 	isb	sy
 8006a5c:	f3bf 8f4f 	dsb	sy
 8006a60:	60fb      	str	r3, [r7, #12]
 8006a62:	e7fe      	b.n	8006a62 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8006a64:	693b      	ldr	r3, [r7, #16]
 8006a66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d109      	bne.n	8006a80 <xTaskPriorityDisinherit+0x50>
 8006a6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a70:	f383 8811 	msr	BASEPRI, r3
 8006a74:	f3bf 8f6f 	isb	sy
 8006a78:	f3bf 8f4f 	dsb	sy
 8006a7c:	60bb      	str	r3, [r7, #8]
 8006a7e:	e7fe      	b.n	8006a7e <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8006a80:	693b      	ldr	r3, [r7, #16]
 8006a82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a84:	1e5a      	subs	r2, r3, #1
 8006a86:	693b      	ldr	r3, [r7, #16]
 8006a88:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006a8a:	693b      	ldr	r3, [r7, #16]
 8006a8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a8e:	693b      	ldr	r3, [r7, #16]
 8006a90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a92:	429a      	cmp	r2, r3
 8006a94:	d02c      	beq.n	8006af0 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006a96:	693b      	ldr	r3, [r7, #16]
 8006a98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d128      	bne.n	8006af0 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006a9e:	693b      	ldr	r3, [r7, #16]
 8006aa0:	3304      	adds	r3, #4
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	f7fe faa2 	bl	8004fec <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006aa8:	693b      	ldr	r3, [r7, #16]
 8006aaa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006aac:	693b      	ldr	r3, [r7, #16]
 8006aae:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ab0:	693b      	ldr	r3, [r7, #16]
 8006ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ab4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006ab8:	693b      	ldr	r3, [r7, #16]
 8006aba:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006abc:	693b      	ldr	r3, [r7, #16]
 8006abe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ac0:	4b0f      	ldr	r3, [pc, #60]	; (8006b00 <xTaskPriorityDisinherit+0xd0>)
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	429a      	cmp	r2, r3
 8006ac6:	d903      	bls.n	8006ad0 <xTaskPriorityDisinherit+0xa0>
 8006ac8:	693b      	ldr	r3, [r7, #16]
 8006aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006acc:	4a0c      	ldr	r2, [pc, #48]	; (8006b00 <xTaskPriorityDisinherit+0xd0>)
 8006ace:	6013      	str	r3, [r2, #0]
 8006ad0:	693b      	ldr	r3, [r7, #16]
 8006ad2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ad4:	4613      	mov	r3, r2
 8006ad6:	009b      	lsls	r3, r3, #2
 8006ad8:	4413      	add	r3, r2
 8006ada:	009b      	lsls	r3, r3, #2
 8006adc:	4a09      	ldr	r2, [pc, #36]	; (8006b04 <xTaskPriorityDisinherit+0xd4>)
 8006ade:	441a      	add	r2, r3
 8006ae0:	693b      	ldr	r3, [r7, #16]
 8006ae2:	3304      	adds	r3, #4
 8006ae4:	4619      	mov	r1, r3
 8006ae6:	4610      	mov	r0, r2
 8006ae8:	f7fe fa23 	bl	8004f32 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006aec:	2301      	movs	r3, #1
 8006aee:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006af0:	697b      	ldr	r3, [r7, #20]
	}
 8006af2:	4618      	mov	r0, r3
 8006af4:	3718      	adds	r7, #24
 8006af6:	46bd      	mov	sp, r7
 8006af8:	bd80      	pop	{r7, pc}
 8006afa:	bf00      	nop
 8006afc:	200007c8 	.word	0x200007c8
 8006b00:	20000ca4 	.word	0x20000ca4
 8006b04:	200007cc 	.word	0x200007cc

08006b08 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b088      	sub	sp, #32
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
 8006b10:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8006b16:	2301      	movs	r3, #1
 8006b18:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d06d      	beq.n	8006bfc <vTaskPriorityDisinheritAfterTimeout+0xf4>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8006b20:	69bb      	ldr	r3, [r7, #24]
 8006b22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d109      	bne.n	8006b3c <vTaskPriorityDisinheritAfterTimeout+0x34>
 8006b28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b2c:	f383 8811 	msr	BASEPRI, r3
 8006b30:	f3bf 8f6f 	isb	sy
 8006b34:	f3bf 8f4f 	dsb	sy
 8006b38:	60fb      	str	r3, [r7, #12]
 8006b3a:	e7fe      	b.n	8006b3a <vTaskPriorityDisinheritAfterTimeout+0x32>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8006b3c:	69bb      	ldr	r3, [r7, #24]
 8006b3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b40:	683a      	ldr	r2, [r7, #0]
 8006b42:	429a      	cmp	r2, r3
 8006b44:	d902      	bls.n	8006b4c <vTaskPriorityDisinheritAfterTimeout+0x44>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	61fb      	str	r3, [r7, #28]
 8006b4a:	e002      	b.n	8006b52 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8006b4c:	69bb      	ldr	r3, [r7, #24]
 8006b4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b50:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8006b52:	69bb      	ldr	r3, [r7, #24]
 8006b54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b56:	69fa      	ldr	r2, [r7, #28]
 8006b58:	429a      	cmp	r2, r3
 8006b5a:	d04f      	beq.n	8006bfc <vTaskPriorityDisinheritAfterTimeout+0xf4>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006b5c:	69bb      	ldr	r3, [r7, #24]
 8006b5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b60:	697a      	ldr	r2, [r7, #20]
 8006b62:	429a      	cmp	r2, r3
 8006b64:	d14a      	bne.n	8006bfc <vTaskPriorityDisinheritAfterTimeout+0xf4>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8006b66:	4b27      	ldr	r3, [pc, #156]	; (8006c04 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	69ba      	ldr	r2, [r7, #24]
 8006b6c:	429a      	cmp	r2, r3
 8006b6e:	d109      	bne.n	8006b84 <vTaskPriorityDisinheritAfterTimeout+0x7c>
 8006b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b74:	f383 8811 	msr	BASEPRI, r3
 8006b78:	f3bf 8f6f 	isb	sy
 8006b7c:	f3bf 8f4f 	dsb	sy
 8006b80:	60bb      	str	r3, [r7, #8]
 8006b82:	e7fe      	b.n	8006b82 <vTaskPriorityDisinheritAfterTimeout+0x7a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8006b84:	69bb      	ldr	r3, [r7, #24]
 8006b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b88:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8006b8a:	69bb      	ldr	r3, [r7, #24]
 8006b8c:	69fa      	ldr	r2, [r7, #28]
 8006b8e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006b90:	69bb      	ldr	r3, [r7, #24]
 8006b92:	699b      	ldr	r3, [r3, #24]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	db04      	blt.n	8006ba2 <vTaskPriorityDisinheritAfterTimeout+0x9a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b98:	69fb      	ldr	r3, [r7, #28]
 8006b9a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006b9e:	69bb      	ldr	r3, [r7, #24]
 8006ba0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006ba2:	69bb      	ldr	r3, [r7, #24]
 8006ba4:	6959      	ldr	r1, [r3, #20]
 8006ba6:	693a      	ldr	r2, [r7, #16]
 8006ba8:	4613      	mov	r3, r2
 8006baa:	009b      	lsls	r3, r3, #2
 8006bac:	4413      	add	r3, r2
 8006bae:	009b      	lsls	r3, r3, #2
 8006bb0:	4a15      	ldr	r2, [pc, #84]	; (8006c08 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8006bb2:	4413      	add	r3, r2
 8006bb4:	4299      	cmp	r1, r3
 8006bb6:	d101      	bne.n	8006bbc <vTaskPriorityDisinheritAfterTimeout+0xb4>
 8006bb8:	2301      	movs	r3, #1
 8006bba:	e000      	b.n	8006bbe <vTaskPriorityDisinheritAfterTimeout+0xb6>
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d01c      	beq.n	8006bfc <vTaskPriorityDisinheritAfterTimeout+0xf4>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006bc2:	69bb      	ldr	r3, [r7, #24]
 8006bc4:	3304      	adds	r3, #4
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	f7fe fa10 	bl	8004fec <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8006bcc:	69bb      	ldr	r3, [r7, #24]
 8006bce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bd0:	4b0e      	ldr	r3, [pc, #56]	; (8006c0c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	429a      	cmp	r2, r3
 8006bd6:	d903      	bls.n	8006be0 <vTaskPriorityDisinheritAfterTimeout+0xd8>
 8006bd8:	69bb      	ldr	r3, [r7, #24]
 8006bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bdc:	4a0b      	ldr	r2, [pc, #44]	; (8006c0c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8006bde:	6013      	str	r3, [r2, #0]
 8006be0:	69bb      	ldr	r3, [r7, #24]
 8006be2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006be4:	4613      	mov	r3, r2
 8006be6:	009b      	lsls	r3, r3, #2
 8006be8:	4413      	add	r3, r2
 8006bea:	009b      	lsls	r3, r3, #2
 8006bec:	4a06      	ldr	r2, [pc, #24]	; (8006c08 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8006bee:	441a      	add	r2, r3
 8006bf0:	69bb      	ldr	r3, [r7, #24]
 8006bf2:	3304      	adds	r3, #4
 8006bf4:	4619      	mov	r1, r3
 8006bf6:	4610      	mov	r0, r2
 8006bf8:	f7fe f99b 	bl	8004f32 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006bfc:	bf00      	nop
 8006bfe:	3720      	adds	r7, #32
 8006c00:	46bd      	mov	sp, r7
 8006c02:	bd80      	pop	{r7, pc}
 8006c04:	200007c8 	.word	0x200007c8
 8006c08:	200007cc 	.word	0x200007cc
 8006c0c:	20000ca4 	.word	0x20000ca4

08006c10 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8006c10:	b480      	push	{r7}
 8006c12:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006c14:	4b07      	ldr	r3, [pc, #28]	; (8006c34 <pvTaskIncrementMutexHeldCount+0x24>)
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d004      	beq.n	8006c26 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006c1c:	4b05      	ldr	r3, [pc, #20]	; (8006c34 <pvTaskIncrementMutexHeldCount+0x24>)
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006c22:	3201      	adds	r2, #1
 8006c24:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8006c26:	4b03      	ldr	r3, [pc, #12]	; (8006c34 <pvTaskIncrementMutexHeldCount+0x24>)
 8006c28:	681b      	ldr	r3, [r3, #0]
	}
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c32:	4770      	bx	lr
 8006c34:	200007c8 	.word	0x200007c8

08006c38 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b084      	sub	sp, #16
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
 8006c40:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006c42:	4b21      	ldr	r3, [pc, #132]	; (8006cc8 <prvAddCurrentTaskToDelayedList+0x90>)
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006c48:	4b20      	ldr	r3, [pc, #128]	; (8006ccc <prvAddCurrentTaskToDelayedList+0x94>)
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	3304      	adds	r3, #4
 8006c4e:	4618      	mov	r0, r3
 8006c50:	f7fe f9cc 	bl	8004fec <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c5a:	d10a      	bne.n	8006c72 <prvAddCurrentTaskToDelayedList+0x3a>
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d007      	beq.n	8006c72 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006c62:	4b1a      	ldr	r3, [pc, #104]	; (8006ccc <prvAddCurrentTaskToDelayedList+0x94>)
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	3304      	adds	r3, #4
 8006c68:	4619      	mov	r1, r3
 8006c6a:	4819      	ldr	r0, [pc, #100]	; (8006cd0 <prvAddCurrentTaskToDelayedList+0x98>)
 8006c6c:	f7fe f961 	bl	8004f32 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006c70:	e026      	b.n	8006cc0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006c72:	68fa      	ldr	r2, [r7, #12]
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	4413      	add	r3, r2
 8006c78:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006c7a:	4b14      	ldr	r3, [pc, #80]	; (8006ccc <prvAddCurrentTaskToDelayedList+0x94>)
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	68ba      	ldr	r2, [r7, #8]
 8006c80:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006c82:	68ba      	ldr	r2, [r7, #8]
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	429a      	cmp	r2, r3
 8006c88:	d209      	bcs.n	8006c9e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006c8a:	4b12      	ldr	r3, [pc, #72]	; (8006cd4 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006c8c:	681a      	ldr	r2, [r3, #0]
 8006c8e:	4b0f      	ldr	r3, [pc, #60]	; (8006ccc <prvAddCurrentTaskToDelayedList+0x94>)
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	3304      	adds	r3, #4
 8006c94:	4619      	mov	r1, r3
 8006c96:	4610      	mov	r0, r2
 8006c98:	f7fe f96f 	bl	8004f7a <vListInsert>
}
 8006c9c:	e010      	b.n	8006cc0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006c9e:	4b0e      	ldr	r3, [pc, #56]	; (8006cd8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006ca0:	681a      	ldr	r2, [r3, #0]
 8006ca2:	4b0a      	ldr	r3, [pc, #40]	; (8006ccc <prvAddCurrentTaskToDelayedList+0x94>)
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	3304      	adds	r3, #4
 8006ca8:	4619      	mov	r1, r3
 8006caa:	4610      	mov	r0, r2
 8006cac:	f7fe f965 	bl	8004f7a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006cb0:	4b0a      	ldr	r3, [pc, #40]	; (8006cdc <prvAddCurrentTaskToDelayedList+0xa4>)
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	68ba      	ldr	r2, [r7, #8]
 8006cb6:	429a      	cmp	r2, r3
 8006cb8:	d202      	bcs.n	8006cc0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006cba:	4a08      	ldr	r2, [pc, #32]	; (8006cdc <prvAddCurrentTaskToDelayedList+0xa4>)
 8006cbc:	68bb      	ldr	r3, [r7, #8]
 8006cbe:	6013      	str	r3, [r2, #0]
}
 8006cc0:	bf00      	nop
 8006cc2:	3710      	adds	r7, #16
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	bd80      	pop	{r7, pc}
 8006cc8:	20000ca0 	.word	0x20000ca0
 8006ccc:	200007c8 	.word	0x200007c8
 8006cd0:	20000c88 	.word	0x20000c88
 8006cd4:	20000c58 	.word	0x20000c58
 8006cd8:	20000c54 	.word	0x20000c54
 8006cdc:	20000cbc 	.word	0x20000cbc

08006ce0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b08a      	sub	sp, #40	; 0x28
 8006ce4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006cea:	f000 fac3 	bl	8007274 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006cee:	4b1c      	ldr	r3, [pc, #112]	; (8006d60 <xTimerCreateTimerTask+0x80>)
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d021      	beq.n	8006d3a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006cfe:	1d3a      	adds	r2, r7, #4
 8006d00:	f107 0108 	add.w	r1, r7, #8
 8006d04:	f107 030c 	add.w	r3, r7, #12
 8006d08:	4618      	mov	r0, r3
 8006d0a:	f7fe f8cb 	bl	8004ea4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006d0e:	6879      	ldr	r1, [r7, #4]
 8006d10:	68bb      	ldr	r3, [r7, #8]
 8006d12:	68fa      	ldr	r2, [r7, #12]
 8006d14:	9202      	str	r2, [sp, #8]
 8006d16:	9301      	str	r3, [sp, #4]
 8006d18:	2302      	movs	r3, #2
 8006d1a:	9300      	str	r3, [sp, #0]
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	460a      	mov	r2, r1
 8006d20:	4910      	ldr	r1, [pc, #64]	; (8006d64 <xTimerCreateTimerTask+0x84>)
 8006d22:	4811      	ldr	r0, [pc, #68]	; (8006d68 <xTimerCreateTimerTask+0x88>)
 8006d24:	f7fe ffee 	bl	8005d04 <xTaskCreateStatic>
 8006d28:	4602      	mov	r2, r0
 8006d2a:	4b10      	ldr	r3, [pc, #64]	; (8006d6c <xTimerCreateTimerTask+0x8c>)
 8006d2c:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006d2e:	4b0f      	ldr	r3, [pc, #60]	; (8006d6c <xTimerCreateTimerTask+0x8c>)
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d001      	beq.n	8006d3a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006d36:	2301      	movs	r3, #1
 8006d38:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006d3a:	697b      	ldr	r3, [r7, #20]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d109      	bne.n	8006d54 <xTimerCreateTimerTask+0x74>
 8006d40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d44:	f383 8811 	msr	BASEPRI, r3
 8006d48:	f3bf 8f6f 	isb	sy
 8006d4c:	f3bf 8f4f 	dsb	sy
 8006d50:	613b      	str	r3, [r7, #16]
 8006d52:	e7fe      	b.n	8006d52 <xTimerCreateTimerTask+0x72>
	return xReturn;
 8006d54:	697b      	ldr	r3, [r7, #20]
}
 8006d56:	4618      	mov	r0, r3
 8006d58:	3718      	adds	r7, #24
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	bd80      	pop	{r7, pc}
 8006d5e:	bf00      	nop
 8006d60:	20000cf8 	.word	0x20000cf8
 8006d64:	08008180 	.word	0x08008180
 8006d68:	08006e89 	.word	0x08006e89
 8006d6c:	20000cfc 	.word	0x20000cfc

08006d70 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b08a      	sub	sp, #40	; 0x28
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	60f8      	str	r0, [r7, #12]
 8006d78:	60b9      	str	r1, [r7, #8]
 8006d7a:	607a      	str	r2, [r7, #4]
 8006d7c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006d7e:	2300      	movs	r3, #0
 8006d80:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d109      	bne.n	8006d9c <xTimerGenericCommand+0x2c>
 8006d88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d8c:	f383 8811 	msr	BASEPRI, r3
 8006d90:	f3bf 8f6f 	isb	sy
 8006d94:	f3bf 8f4f 	dsb	sy
 8006d98:	623b      	str	r3, [r7, #32]
 8006d9a:	e7fe      	b.n	8006d9a <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006d9c:	4b19      	ldr	r3, [pc, #100]	; (8006e04 <xTimerGenericCommand+0x94>)
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d02a      	beq.n	8006dfa <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006da4:	68bb      	ldr	r3, [r7, #8]
 8006da6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006db0:	68bb      	ldr	r3, [r7, #8]
 8006db2:	2b05      	cmp	r3, #5
 8006db4:	dc18      	bgt.n	8006de8 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006db6:	f7ff fdaf 	bl	8006918 <xTaskGetSchedulerState>
 8006dba:	4603      	mov	r3, r0
 8006dbc:	2b02      	cmp	r3, #2
 8006dbe:	d109      	bne.n	8006dd4 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006dc0:	4b10      	ldr	r3, [pc, #64]	; (8006e04 <xTimerGenericCommand+0x94>)
 8006dc2:	6818      	ldr	r0, [r3, #0]
 8006dc4:	f107 0110 	add.w	r1, r7, #16
 8006dc8:	2300      	movs	r3, #0
 8006dca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006dcc:	f7fe faa4 	bl	8005318 <xQueueGenericSend>
 8006dd0:	6278      	str	r0, [r7, #36]	; 0x24
 8006dd2:	e012      	b.n	8006dfa <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006dd4:	4b0b      	ldr	r3, [pc, #44]	; (8006e04 <xTimerGenericCommand+0x94>)
 8006dd6:	6818      	ldr	r0, [r3, #0]
 8006dd8:	f107 0110 	add.w	r1, r7, #16
 8006ddc:	2300      	movs	r3, #0
 8006dde:	2200      	movs	r2, #0
 8006de0:	f7fe fa9a 	bl	8005318 <xQueueGenericSend>
 8006de4:	6278      	str	r0, [r7, #36]	; 0x24
 8006de6:	e008      	b.n	8006dfa <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006de8:	4b06      	ldr	r3, [pc, #24]	; (8006e04 <xTimerGenericCommand+0x94>)
 8006dea:	6818      	ldr	r0, [r3, #0]
 8006dec:	f107 0110 	add.w	r1, r7, #16
 8006df0:	2300      	movs	r3, #0
 8006df2:	683a      	ldr	r2, [r7, #0]
 8006df4:	f7fe fb8a 	bl	800550c <xQueueGenericSendFromISR>
 8006df8:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	3728      	adds	r7, #40	; 0x28
 8006e00:	46bd      	mov	sp, r7
 8006e02:	bd80      	pop	{r7, pc}
 8006e04:	20000cf8 	.word	0x20000cf8

08006e08 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b088      	sub	sp, #32
 8006e0c:	af02      	add	r7, sp, #8
 8006e0e:	6078      	str	r0, [r7, #4]
 8006e10:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006e12:	4b1c      	ldr	r3, [pc, #112]	; (8006e84 <prvProcessExpiredTimer+0x7c>)
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	68db      	ldr	r3, [r3, #12]
 8006e18:	68db      	ldr	r3, [r3, #12]
 8006e1a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006e1c:	697b      	ldr	r3, [r7, #20]
 8006e1e:	3304      	adds	r3, #4
 8006e20:	4618      	mov	r0, r3
 8006e22:	f7fe f8e3 	bl	8004fec <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006e26:	697b      	ldr	r3, [r7, #20]
 8006e28:	69db      	ldr	r3, [r3, #28]
 8006e2a:	2b01      	cmp	r3, #1
 8006e2c:	d121      	bne.n	8006e72 <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006e2e:	697b      	ldr	r3, [r7, #20]
 8006e30:	699a      	ldr	r2, [r3, #24]
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	18d1      	adds	r1, r2, r3
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	683a      	ldr	r2, [r7, #0]
 8006e3a:	6978      	ldr	r0, [r7, #20]
 8006e3c:	f000 f8c8 	bl	8006fd0 <prvInsertTimerInActiveList>
 8006e40:	4603      	mov	r3, r0
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d015      	beq.n	8006e72 <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006e46:	2300      	movs	r3, #0
 8006e48:	9300      	str	r3, [sp, #0]
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	687a      	ldr	r2, [r7, #4]
 8006e4e:	2100      	movs	r1, #0
 8006e50:	6978      	ldr	r0, [r7, #20]
 8006e52:	f7ff ff8d 	bl	8006d70 <xTimerGenericCommand>
 8006e56:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006e58:	693b      	ldr	r3, [r7, #16]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d109      	bne.n	8006e72 <prvProcessExpiredTimer+0x6a>
 8006e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e62:	f383 8811 	msr	BASEPRI, r3
 8006e66:	f3bf 8f6f 	isb	sy
 8006e6a:	f3bf 8f4f 	dsb	sy
 8006e6e:	60fb      	str	r3, [r7, #12]
 8006e70:	e7fe      	b.n	8006e70 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006e72:	697b      	ldr	r3, [r7, #20]
 8006e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e76:	6978      	ldr	r0, [r7, #20]
 8006e78:	4798      	blx	r3
}
 8006e7a:	bf00      	nop
 8006e7c:	3718      	adds	r7, #24
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	bd80      	pop	{r7, pc}
 8006e82:	bf00      	nop
 8006e84:	20000cf0 	.word	0x20000cf0

08006e88 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b084      	sub	sp, #16
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006e90:	f107 0308 	add.w	r3, r7, #8
 8006e94:	4618      	mov	r0, r3
 8006e96:	f000 f857 	bl	8006f48 <prvGetNextExpireTime>
 8006e9a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006e9c:	68bb      	ldr	r3, [r7, #8]
 8006e9e:	4619      	mov	r1, r3
 8006ea0:	68f8      	ldr	r0, [r7, #12]
 8006ea2:	f000 f803 	bl	8006eac <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006ea6:	f000 f8d5 	bl	8007054 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006eaa:	e7f1      	b.n	8006e90 <prvTimerTask+0x8>

08006eac <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b084      	sub	sp, #16
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
 8006eb4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006eb6:	f7ff f951 	bl	800615c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006eba:	f107 0308 	add.w	r3, r7, #8
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	f000 f866 	bl	8006f90 <prvSampleTimeNow>
 8006ec4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006ec6:	68bb      	ldr	r3, [r7, #8]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d130      	bne.n	8006f2e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006ecc:	683b      	ldr	r3, [r7, #0]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d10a      	bne.n	8006ee8 <prvProcessTimerOrBlockTask+0x3c>
 8006ed2:	687a      	ldr	r2, [r7, #4]
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	429a      	cmp	r2, r3
 8006ed8:	d806      	bhi.n	8006ee8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006eda:	f7ff f94d 	bl	8006178 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006ede:	68f9      	ldr	r1, [r7, #12]
 8006ee0:	6878      	ldr	r0, [r7, #4]
 8006ee2:	f7ff ff91 	bl	8006e08 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006ee6:	e024      	b.n	8006f32 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d008      	beq.n	8006f00 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006eee:	4b13      	ldr	r3, [pc, #76]	; (8006f3c <prvProcessTimerOrBlockTask+0x90>)
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	bf0c      	ite	eq
 8006ef8:	2301      	moveq	r3, #1
 8006efa:	2300      	movne	r3, #0
 8006efc:	b2db      	uxtb	r3, r3
 8006efe:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006f00:	4b0f      	ldr	r3, [pc, #60]	; (8006f40 <prvProcessTimerOrBlockTask+0x94>)
 8006f02:	6818      	ldr	r0, [r3, #0]
 8006f04:	687a      	ldr	r2, [r7, #4]
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	1ad3      	subs	r3, r2, r3
 8006f0a:	683a      	ldr	r2, [r7, #0]
 8006f0c:	4619      	mov	r1, r3
 8006f0e:	f7fe fec5 	bl	8005c9c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006f12:	f7ff f931 	bl	8006178 <xTaskResumeAll>
 8006f16:	4603      	mov	r3, r0
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d10a      	bne.n	8006f32 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006f1c:	4b09      	ldr	r3, [pc, #36]	; (8006f44 <prvProcessTimerOrBlockTask+0x98>)
 8006f1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f22:	601a      	str	r2, [r3, #0]
 8006f24:	f3bf 8f4f 	dsb	sy
 8006f28:	f3bf 8f6f 	isb	sy
}
 8006f2c:	e001      	b.n	8006f32 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006f2e:	f7ff f923 	bl	8006178 <xTaskResumeAll>
}
 8006f32:	bf00      	nop
 8006f34:	3710      	adds	r7, #16
 8006f36:	46bd      	mov	sp, r7
 8006f38:	bd80      	pop	{r7, pc}
 8006f3a:	bf00      	nop
 8006f3c:	20000cf4 	.word	0x20000cf4
 8006f40:	20000cf8 	.word	0x20000cf8
 8006f44:	e000ed04 	.word	0xe000ed04

08006f48 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006f48:	b480      	push	{r7}
 8006f4a:	b085      	sub	sp, #20
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006f50:	4b0e      	ldr	r3, [pc, #56]	; (8006f8c <prvGetNextExpireTime+0x44>)
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	bf0c      	ite	eq
 8006f5a:	2301      	moveq	r3, #1
 8006f5c:	2300      	movne	r3, #0
 8006f5e:	b2db      	uxtb	r3, r3
 8006f60:	461a      	mov	r2, r3
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d105      	bne.n	8006f7a <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006f6e:	4b07      	ldr	r3, [pc, #28]	; (8006f8c <prvGetNextExpireTime+0x44>)
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	68db      	ldr	r3, [r3, #12]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	60fb      	str	r3, [r7, #12]
 8006f78:	e001      	b.n	8006f7e <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
}
 8006f80:	4618      	mov	r0, r3
 8006f82:	3714      	adds	r7, #20
 8006f84:	46bd      	mov	sp, r7
 8006f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8a:	4770      	bx	lr
 8006f8c:	20000cf0 	.word	0x20000cf0

08006f90 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b084      	sub	sp, #16
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006f98:	f7ff f98a 	bl	80062b0 <xTaskGetTickCount>
 8006f9c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006f9e:	4b0b      	ldr	r3, [pc, #44]	; (8006fcc <prvSampleTimeNow+0x3c>)
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	68fa      	ldr	r2, [r7, #12]
 8006fa4:	429a      	cmp	r2, r3
 8006fa6:	d205      	bcs.n	8006fb4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006fa8:	f000 f904 	bl	80071b4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2201      	movs	r2, #1
 8006fb0:	601a      	str	r2, [r3, #0]
 8006fb2:	e002      	b.n	8006fba <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006fba:	4a04      	ldr	r2, [pc, #16]	; (8006fcc <prvSampleTimeNow+0x3c>)
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006fc0:	68fb      	ldr	r3, [r7, #12]
}
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	3710      	adds	r7, #16
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	bd80      	pop	{r7, pc}
 8006fca:	bf00      	nop
 8006fcc:	20000d00 	.word	0x20000d00

08006fd0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b086      	sub	sp, #24
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	60f8      	str	r0, [r7, #12]
 8006fd8:	60b9      	str	r1, [r7, #8]
 8006fda:	607a      	str	r2, [r7, #4]
 8006fdc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006fde:	2300      	movs	r3, #0
 8006fe0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	68ba      	ldr	r2, [r7, #8]
 8006fe6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	68fa      	ldr	r2, [r7, #12]
 8006fec:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006fee:	68ba      	ldr	r2, [r7, #8]
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	429a      	cmp	r2, r3
 8006ff4:	d812      	bhi.n	800701c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ff6:	687a      	ldr	r2, [r7, #4]
 8006ff8:	683b      	ldr	r3, [r7, #0]
 8006ffa:	1ad2      	subs	r2, r2, r3
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	699b      	ldr	r3, [r3, #24]
 8007000:	429a      	cmp	r2, r3
 8007002:	d302      	bcc.n	800700a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007004:	2301      	movs	r3, #1
 8007006:	617b      	str	r3, [r7, #20]
 8007008:	e01b      	b.n	8007042 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800700a:	4b10      	ldr	r3, [pc, #64]	; (800704c <prvInsertTimerInActiveList+0x7c>)
 800700c:	681a      	ldr	r2, [r3, #0]
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	3304      	adds	r3, #4
 8007012:	4619      	mov	r1, r3
 8007014:	4610      	mov	r0, r2
 8007016:	f7fd ffb0 	bl	8004f7a <vListInsert>
 800701a:	e012      	b.n	8007042 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800701c:	687a      	ldr	r2, [r7, #4]
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	429a      	cmp	r2, r3
 8007022:	d206      	bcs.n	8007032 <prvInsertTimerInActiveList+0x62>
 8007024:	68ba      	ldr	r2, [r7, #8]
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	429a      	cmp	r2, r3
 800702a:	d302      	bcc.n	8007032 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800702c:	2301      	movs	r3, #1
 800702e:	617b      	str	r3, [r7, #20]
 8007030:	e007      	b.n	8007042 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007032:	4b07      	ldr	r3, [pc, #28]	; (8007050 <prvInsertTimerInActiveList+0x80>)
 8007034:	681a      	ldr	r2, [r3, #0]
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	3304      	adds	r3, #4
 800703a:	4619      	mov	r1, r3
 800703c:	4610      	mov	r0, r2
 800703e:	f7fd ff9c 	bl	8004f7a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007042:	697b      	ldr	r3, [r7, #20]
}
 8007044:	4618      	mov	r0, r3
 8007046:	3718      	adds	r7, #24
 8007048:	46bd      	mov	sp, r7
 800704a:	bd80      	pop	{r7, pc}
 800704c:	20000cf4 	.word	0x20000cf4
 8007050:	20000cf0 	.word	0x20000cf0

08007054 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007054:	b580      	push	{r7, lr}
 8007056:	b08e      	sub	sp, #56	; 0x38
 8007058:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800705a:	e099      	b.n	8007190 <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2b00      	cmp	r3, #0
 8007060:	da17      	bge.n	8007092 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007062:	1d3b      	adds	r3, r7, #4
 8007064:	3304      	adds	r3, #4
 8007066:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007068:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800706a:	2b00      	cmp	r3, #0
 800706c:	d109      	bne.n	8007082 <prvProcessReceivedCommands+0x2e>
 800706e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007072:	f383 8811 	msr	BASEPRI, r3
 8007076:	f3bf 8f6f 	isb	sy
 800707a:	f3bf 8f4f 	dsb	sy
 800707e:	61fb      	str	r3, [r7, #28]
 8007080:	e7fe      	b.n	8007080 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007088:	6850      	ldr	r0, [r2, #4]
 800708a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800708c:	6892      	ldr	r2, [r2, #8]
 800708e:	4611      	mov	r1, r2
 8007090:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	2b00      	cmp	r3, #0
 8007096:	db7a      	blt.n	800718e <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800709c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800709e:	695b      	ldr	r3, [r3, #20]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d004      	beq.n	80070ae <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80070a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070a6:	3304      	adds	r3, #4
 80070a8:	4618      	mov	r0, r3
 80070aa:	f7fd ff9f 	bl	8004fec <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80070ae:	463b      	mov	r3, r7
 80070b0:	4618      	mov	r0, r3
 80070b2:	f7ff ff6d 	bl	8006f90 <prvSampleTimeNow>
 80070b6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2b09      	cmp	r3, #9
 80070bc:	d868      	bhi.n	8007190 <prvProcessReceivedCommands+0x13c>
 80070be:	a201      	add	r2, pc, #4	; (adr r2, 80070c4 <prvProcessReceivedCommands+0x70>)
 80070c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070c4:	080070ed 	.word	0x080070ed
 80070c8:	080070ed 	.word	0x080070ed
 80070cc:	080070ed 	.word	0x080070ed
 80070d0:	08007191 	.word	0x08007191
 80070d4:	08007147 	.word	0x08007147
 80070d8:	0800717d 	.word	0x0800717d
 80070dc:	080070ed 	.word	0x080070ed
 80070e0:	080070ed 	.word	0x080070ed
 80070e4:	08007191 	.word	0x08007191
 80070e8:	08007147 	.word	0x08007147
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80070ec:	68ba      	ldr	r2, [r7, #8]
 80070ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070f0:	699b      	ldr	r3, [r3, #24]
 80070f2:	18d1      	adds	r1, r2, r3
 80070f4:	68bb      	ldr	r3, [r7, #8]
 80070f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80070f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80070fa:	f7ff ff69 	bl	8006fd0 <prvInsertTimerInActiveList>
 80070fe:	4603      	mov	r3, r0
 8007100:	2b00      	cmp	r3, #0
 8007102:	d045      	beq.n	8007190 <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007108:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800710a:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800710c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800710e:	69db      	ldr	r3, [r3, #28]
 8007110:	2b01      	cmp	r3, #1
 8007112:	d13d      	bne.n	8007190 <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007114:	68ba      	ldr	r2, [r7, #8]
 8007116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007118:	699b      	ldr	r3, [r3, #24]
 800711a:	441a      	add	r2, r3
 800711c:	2300      	movs	r3, #0
 800711e:	9300      	str	r3, [sp, #0]
 8007120:	2300      	movs	r3, #0
 8007122:	2100      	movs	r1, #0
 8007124:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007126:	f7ff fe23 	bl	8006d70 <xTimerGenericCommand>
 800712a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800712c:	6a3b      	ldr	r3, [r7, #32]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d12e      	bne.n	8007190 <prvProcessReceivedCommands+0x13c>
 8007132:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007136:	f383 8811 	msr	BASEPRI, r3
 800713a:	f3bf 8f6f 	isb	sy
 800713e:	f3bf 8f4f 	dsb	sy
 8007142:	61bb      	str	r3, [r7, #24]
 8007144:	e7fe      	b.n	8007144 <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007146:	68ba      	ldr	r2, [r7, #8]
 8007148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800714a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800714c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800714e:	699b      	ldr	r3, [r3, #24]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d109      	bne.n	8007168 <prvProcessReceivedCommands+0x114>
 8007154:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007158:	f383 8811 	msr	BASEPRI, r3
 800715c:	f3bf 8f6f 	isb	sy
 8007160:	f3bf 8f4f 	dsb	sy
 8007164:	617b      	str	r3, [r7, #20]
 8007166:	e7fe      	b.n	8007166 <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800716a:	699a      	ldr	r2, [r3, #24]
 800716c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800716e:	18d1      	adds	r1, r2, r3
 8007170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007172:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007174:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007176:	f7ff ff2b 	bl	8006fd0 <prvInsertTimerInActiveList>
					break;
 800717a:	e009      	b.n	8007190 <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800717c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800717e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007182:	2b00      	cmp	r3, #0
 8007184:	d104      	bne.n	8007190 <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 8007186:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007188:	f000 fbb4 	bl	80078f4 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800718c:	e000      	b.n	8007190 <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800718e:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007190:	4b07      	ldr	r3, [pc, #28]	; (80071b0 <prvProcessReceivedCommands+0x15c>)
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	1d39      	adds	r1, r7, #4
 8007196:	2200      	movs	r2, #0
 8007198:	4618      	mov	r0, r3
 800719a:	f7fe fa4b 	bl	8005634 <xQueueReceive>
 800719e:	4603      	mov	r3, r0
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	f47f af5b 	bne.w	800705c <prvProcessReceivedCommands+0x8>
	}
}
 80071a6:	bf00      	nop
 80071a8:	3730      	adds	r7, #48	; 0x30
 80071aa:	46bd      	mov	sp, r7
 80071ac:	bd80      	pop	{r7, pc}
 80071ae:	bf00      	nop
 80071b0:	20000cf8 	.word	0x20000cf8

080071b4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b088      	sub	sp, #32
 80071b8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80071ba:	e044      	b.n	8007246 <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80071bc:	4b2b      	ldr	r3, [pc, #172]	; (800726c <prvSwitchTimerLists+0xb8>)
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	68db      	ldr	r3, [r3, #12]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80071c6:	4b29      	ldr	r3, [pc, #164]	; (800726c <prvSwitchTimerLists+0xb8>)
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	68db      	ldr	r3, [r3, #12]
 80071cc:	68db      	ldr	r3, [r3, #12]
 80071ce:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	3304      	adds	r3, #4
 80071d4:	4618      	mov	r0, r3
 80071d6:	f7fd ff09 	bl	8004fec <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071de:	68f8      	ldr	r0, [r7, #12]
 80071e0:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	69db      	ldr	r3, [r3, #28]
 80071e6:	2b01      	cmp	r3, #1
 80071e8:	d12d      	bne.n	8007246 <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	699b      	ldr	r3, [r3, #24]
 80071ee:	693a      	ldr	r2, [r7, #16]
 80071f0:	4413      	add	r3, r2
 80071f2:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80071f4:	68ba      	ldr	r2, [r7, #8]
 80071f6:	693b      	ldr	r3, [r7, #16]
 80071f8:	429a      	cmp	r2, r3
 80071fa:	d90e      	bls.n	800721a <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	68ba      	ldr	r2, [r7, #8]
 8007200:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	68fa      	ldr	r2, [r7, #12]
 8007206:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007208:	4b18      	ldr	r3, [pc, #96]	; (800726c <prvSwitchTimerLists+0xb8>)
 800720a:	681a      	ldr	r2, [r3, #0]
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	3304      	adds	r3, #4
 8007210:	4619      	mov	r1, r3
 8007212:	4610      	mov	r0, r2
 8007214:	f7fd feb1 	bl	8004f7a <vListInsert>
 8007218:	e015      	b.n	8007246 <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800721a:	2300      	movs	r3, #0
 800721c:	9300      	str	r3, [sp, #0]
 800721e:	2300      	movs	r3, #0
 8007220:	693a      	ldr	r2, [r7, #16]
 8007222:	2100      	movs	r1, #0
 8007224:	68f8      	ldr	r0, [r7, #12]
 8007226:	f7ff fda3 	bl	8006d70 <xTimerGenericCommand>
 800722a:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d109      	bne.n	8007246 <prvSwitchTimerLists+0x92>
 8007232:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007236:	f383 8811 	msr	BASEPRI, r3
 800723a:	f3bf 8f6f 	isb	sy
 800723e:	f3bf 8f4f 	dsb	sy
 8007242:	603b      	str	r3, [r7, #0]
 8007244:	e7fe      	b.n	8007244 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007246:	4b09      	ldr	r3, [pc, #36]	; (800726c <prvSwitchTimerLists+0xb8>)
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	2b00      	cmp	r3, #0
 800724e:	d1b5      	bne.n	80071bc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007250:	4b06      	ldr	r3, [pc, #24]	; (800726c <prvSwitchTimerLists+0xb8>)
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007256:	4b06      	ldr	r3, [pc, #24]	; (8007270 <prvSwitchTimerLists+0xbc>)
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	4a04      	ldr	r2, [pc, #16]	; (800726c <prvSwitchTimerLists+0xb8>)
 800725c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800725e:	4a04      	ldr	r2, [pc, #16]	; (8007270 <prvSwitchTimerLists+0xbc>)
 8007260:	697b      	ldr	r3, [r7, #20]
 8007262:	6013      	str	r3, [r2, #0]
}
 8007264:	bf00      	nop
 8007266:	3718      	adds	r7, #24
 8007268:	46bd      	mov	sp, r7
 800726a:	bd80      	pop	{r7, pc}
 800726c:	20000cf0 	.word	0x20000cf0
 8007270:	20000cf4 	.word	0x20000cf4

08007274 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007274:	b580      	push	{r7, lr}
 8007276:	b082      	sub	sp, #8
 8007278:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800727a:	f000 f95f 	bl	800753c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800727e:	4b15      	ldr	r3, [pc, #84]	; (80072d4 <prvCheckForValidListAndQueue+0x60>)
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d120      	bne.n	80072c8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007286:	4814      	ldr	r0, [pc, #80]	; (80072d8 <prvCheckForValidListAndQueue+0x64>)
 8007288:	f7fd fe26 	bl	8004ed8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800728c:	4813      	ldr	r0, [pc, #76]	; (80072dc <prvCheckForValidListAndQueue+0x68>)
 800728e:	f7fd fe23 	bl	8004ed8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007292:	4b13      	ldr	r3, [pc, #76]	; (80072e0 <prvCheckForValidListAndQueue+0x6c>)
 8007294:	4a10      	ldr	r2, [pc, #64]	; (80072d8 <prvCheckForValidListAndQueue+0x64>)
 8007296:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007298:	4b12      	ldr	r3, [pc, #72]	; (80072e4 <prvCheckForValidListAndQueue+0x70>)
 800729a:	4a10      	ldr	r2, [pc, #64]	; (80072dc <prvCheckForValidListAndQueue+0x68>)
 800729c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800729e:	2300      	movs	r3, #0
 80072a0:	9300      	str	r3, [sp, #0]
 80072a2:	4b11      	ldr	r3, [pc, #68]	; (80072e8 <prvCheckForValidListAndQueue+0x74>)
 80072a4:	4a11      	ldr	r2, [pc, #68]	; (80072ec <prvCheckForValidListAndQueue+0x78>)
 80072a6:	2110      	movs	r1, #16
 80072a8:	200a      	movs	r0, #10
 80072aa:	f7fd ff31 	bl	8005110 <xQueueGenericCreateStatic>
 80072ae:	4602      	mov	r2, r0
 80072b0:	4b08      	ldr	r3, [pc, #32]	; (80072d4 <prvCheckForValidListAndQueue+0x60>)
 80072b2:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80072b4:	4b07      	ldr	r3, [pc, #28]	; (80072d4 <prvCheckForValidListAndQueue+0x60>)
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d005      	beq.n	80072c8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80072bc:	4b05      	ldr	r3, [pc, #20]	; (80072d4 <prvCheckForValidListAndQueue+0x60>)
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	490b      	ldr	r1, [pc, #44]	; (80072f0 <prvCheckForValidListAndQueue+0x7c>)
 80072c2:	4618      	mov	r0, r3
 80072c4:	f7fe fcc2 	bl	8005c4c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80072c8:	f000 f966 	bl	8007598 <vPortExitCritical>
}
 80072cc:	bf00      	nop
 80072ce:	46bd      	mov	sp, r7
 80072d0:	bd80      	pop	{r7, pc}
 80072d2:	bf00      	nop
 80072d4:	20000cf8 	.word	0x20000cf8
 80072d8:	20000cc8 	.word	0x20000cc8
 80072dc:	20000cdc 	.word	0x20000cdc
 80072e0:	20000cf0 	.word	0x20000cf0
 80072e4:	20000cf4 	.word	0x20000cf4
 80072e8:	20000da4 	.word	0x20000da4
 80072ec:	20000d04 	.word	0x20000d04
 80072f0:	08008188 	.word	0x08008188

080072f4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80072f4:	b480      	push	{r7}
 80072f6:	b085      	sub	sp, #20
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	60f8      	str	r0, [r7, #12]
 80072fc:	60b9      	str	r1, [r7, #8]
 80072fe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	3b04      	subs	r3, #4
 8007304:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800730c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	3b04      	subs	r3, #4
 8007312:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007314:	68bb      	ldr	r3, [r7, #8]
 8007316:	f023 0201 	bic.w	r2, r3, #1
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	3b04      	subs	r3, #4
 8007322:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007324:	4a0c      	ldr	r2, [pc, #48]	; (8007358 <pxPortInitialiseStack+0x64>)
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	3b14      	subs	r3, #20
 800732e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007330:	687a      	ldr	r2, [r7, #4]
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	3b04      	subs	r3, #4
 800733a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	f06f 0202 	mvn.w	r2, #2
 8007342:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	3b20      	subs	r3, #32
 8007348:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800734a:	68fb      	ldr	r3, [r7, #12]
}
 800734c:	4618      	mov	r0, r3
 800734e:	3714      	adds	r7, #20
 8007350:	46bd      	mov	sp, r7
 8007352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007356:	4770      	bx	lr
 8007358:	0800735d 	.word	0x0800735d

0800735c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800735c:	b480      	push	{r7}
 800735e:	b085      	sub	sp, #20
 8007360:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007362:	2300      	movs	r3, #0
 8007364:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007366:	4b11      	ldr	r3, [pc, #68]	; (80073ac <prvTaskExitError+0x50>)
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800736e:	d009      	beq.n	8007384 <prvTaskExitError+0x28>
 8007370:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007374:	f383 8811 	msr	BASEPRI, r3
 8007378:	f3bf 8f6f 	isb	sy
 800737c:	f3bf 8f4f 	dsb	sy
 8007380:	60fb      	str	r3, [r7, #12]
 8007382:	e7fe      	b.n	8007382 <prvTaskExitError+0x26>
 8007384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007388:	f383 8811 	msr	BASEPRI, r3
 800738c:	f3bf 8f6f 	isb	sy
 8007390:	f3bf 8f4f 	dsb	sy
 8007394:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007396:	bf00      	nop
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d0fc      	beq.n	8007398 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800739e:	bf00      	nop
 80073a0:	3714      	adds	r7, #20
 80073a2:	46bd      	mov	sp, r7
 80073a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a8:	4770      	bx	lr
 80073aa:	bf00      	nop
 80073ac:	2000001c 	.word	0x2000001c

080073b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80073b0:	4b07      	ldr	r3, [pc, #28]	; (80073d0 <pxCurrentTCBConst2>)
 80073b2:	6819      	ldr	r1, [r3, #0]
 80073b4:	6808      	ldr	r0, [r1, #0]
 80073b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073ba:	f380 8809 	msr	PSP, r0
 80073be:	f3bf 8f6f 	isb	sy
 80073c2:	f04f 0000 	mov.w	r0, #0
 80073c6:	f380 8811 	msr	BASEPRI, r0
 80073ca:	4770      	bx	lr
 80073cc:	f3af 8000 	nop.w

080073d0 <pxCurrentTCBConst2>:
 80073d0:	200007c8 	.word	0x200007c8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80073d4:	bf00      	nop
 80073d6:	bf00      	nop

080073d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80073d8:	4808      	ldr	r0, [pc, #32]	; (80073fc <prvPortStartFirstTask+0x24>)
 80073da:	6800      	ldr	r0, [r0, #0]
 80073dc:	6800      	ldr	r0, [r0, #0]
 80073de:	f380 8808 	msr	MSP, r0
 80073e2:	f04f 0000 	mov.w	r0, #0
 80073e6:	f380 8814 	msr	CONTROL, r0
 80073ea:	b662      	cpsie	i
 80073ec:	b661      	cpsie	f
 80073ee:	f3bf 8f4f 	dsb	sy
 80073f2:	f3bf 8f6f 	isb	sy
 80073f6:	df00      	svc	0
 80073f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80073fa:	bf00      	nop
 80073fc:	e000ed08 	.word	0xe000ed08

08007400 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007400:	b580      	push	{r7, lr}
 8007402:	b086      	sub	sp, #24
 8007404:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007406:	4b44      	ldr	r3, [pc, #272]	; (8007518 <xPortStartScheduler+0x118>)
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	4a44      	ldr	r2, [pc, #272]	; (800751c <xPortStartScheduler+0x11c>)
 800740c:	4293      	cmp	r3, r2
 800740e:	d109      	bne.n	8007424 <xPortStartScheduler+0x24>
 8007410:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007414:	f383 8811 	msr	BASEPRI, r3
 8007418:	f3bf 8f6f 	isb	sy
 800741c:	f3bf 8f4f 	dsb	sy
 8007420:	613b      	str	r3, [r7, #16]
 8007422:	e7fe      	b.n	8007422 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007424:	4b3c      	ldr	r3, [pc, #240]	; (8007518 <xPortStartScheduler+0x118>)
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	4a3d      	ldr	r2, [pc, #244]	; (8007520 <xPortStartScheduler+0x120>)
 800742a:	4293      	cmp	r3, r2
 800742c:	d109      	bne.n	8007442 <xPortStartScheduler+0x42>
 800742e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007432:	f383 8811 	msr	BASEPRI, r3
 8007436:	f3bf 8f6f 	isb	sy
 800743a:	f3bf 8f4f 	dsb	sy
 800743e:	60fb      	str	r3, [r7, #12]
 8007440:	e7fe      	b.n	8007440 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007442:	4b38      	ldr	r3, [pc, #224]	; (8007524 <xPortStartScheduler+0x124>)
 8007444:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007446:	697b      	ldr	r3, [r7, #20]
 8007448:	781b      	ldrb	r3, [r3, #0]
 800744a:	b2db      	uxtb	r3, r3
 800744c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800744e:	697b      	ldr	r3, [r7, #20]
 8007450:	22ff      	movs	r2, #255	; 0xff
 8007452:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007454:	697b      	ldr	r3, [r7, #20]
 8007456:	781b      	ldrb	r3, [r3, #0]
 8007458:	b2db      	uxtb	r3, r3
 800745a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800745c:	78fb      	ldrb	r3, [r7, #3]
 800745e:	b2db      	uxtb	r3, r3
 8007460:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007464:	b2da      	uxtb	r2, r3
 8007466:	4b30      	ldr	r3, [pc, #192]	; (8007528 <xPortStartScheduler+0x128>)
 8007468:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800746a:	4b30      	ldr	r3, [pc, #192]	; (800752c <xPortStartScheduler+0x12c>)
 800746c:	2207      	movs	r2, #7
 800746e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007470:	e009      	b.n	8007486 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8007472:	4b2e      	ldr	r3, [pc, #184]	; (800752c <xPortStartScheduler+0x12c>)
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	3b01      	subs	r3, #1
 8007478:	4a2c      	ldr	r2, [pc, #176]	; (800752c <xPortStartScheduler+0x12c>)
 800747a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800747c:	78fb      	ldrb	r3, [r7, #3]
 800747e:	b2db      	uxtb	r3, r3
 8007480:	005b      	lsls	r3, r3, #1
 8007482:	b2db      	uxtb	r3, r3
 8007484:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007486:	78fb      	ldrb	r3, [r7, #3]
 8007488:	b2db      	uxtb	r3, r3
 800748a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800748e:	2b80      	cmp	r3, #128	; 0x80
 8007490:	d0ef      	beq.n	8007472 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007492:	4b26      	ldr	r3, [pc, #152]	; (800752c <xPortStartScheduler+0x12c>)
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	f1c3 0307 	rsb	r3, r3, #7
 800749a:	2b04      	cmp	r3, #4
 800749c:	d009      	beq.n	80074b2 <xPortStartScheduler+0xb2>
 800749e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074a2:	f383 8811 	msr	BASEPRI, r3
 80074a6:	f3bf 8f6f 	isb	sy
 80074aa:	f3bf 8f4f 	dsb	sy
 80074ae:	60bb      	str	r3, [r7, #8]
 80074b0:	e7fe      	b.n	80074b0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80074b2:	4b1e      	ldr	r3, [pc, #120]	; (800752c <xPortStartScheduler+0x12c>)
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	021b      	lsls	r3, r3, #8
 80074b8:	4a1c      	ldr	r2, [pc, #112]	; (800752c <xPortStartScheduler+0x12c>)
 80074ba:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80074bc:	4b1b      	ldr	r3, [pc, #108]	; (800752c <xPortStartScheduler+0x12c>)
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80074c4:	4a19      	ldr	r2, [pc, #100]	; (800752c <xPortStartScheduler+0x12c>)
 80074c6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	b2da      	uxtb	r2, r3
 80074cc:	697b      	ldr	r3, [r7, #20]
 80074ce:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80074d0:	4b17      	ldr	r3, [pc, #92]	; (8007530 <xPortStartScheduler+0x130>)
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	4a16      	ldr	r2, [pc, #88]	; (8007530 <xPortStartScheduler+0x130>)
 80074d6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80074da:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80074dc:	4b14      	ldr	r3, [pc, #80]	; (8007530 <xPortStartScheduler+0x130>)
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	4a13      	ldr	r2, [pc, #76]	; (8007530 <xPortStartScheduler+0x130>)
 80074e2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80074e6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80074e8:	f000 f8d6 	bl	8007698 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80074ec:	4b11      	ldr	r3, [pc, #68]	; (8007534 <xPortStartScheduler+0x134>)
 80074ee:	2200      	movs	r2, #0
 80074f0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80074f2:	f000 f8f5 	bl	80076e0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80074f6:	4b10      	ldr	r3, [pc, #64]	; (8007538 <xPortStartScheduler+0x138>)
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	4a0f      	ldr	r2, [pc, #60]	; (8007538 <xPortStartScheduler+0x138>)
 80074fc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007500:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007502:	f7ff ff69 	bl	80073d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007506:	f7fe ffa1 	bl	800644c <vTaskSwitchContext>
	prvTaskExitError();
 800750a:	f7ff ff27 	bl	800735c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800750e:	2300      	movs	r3, #0
}
 8007510:	4618      	mov	r0, r3
 8007512:	3718      	adds	r7, #24
 8007514:	46bd      	mov	sp, r7
 8007516:	bd80      	pop	{r7, pc}
 8007518:	e000ed00 	.word	0xe000ed00
 800751c:	410fc271 	.word	0x410fc271
 8007520:	410fc270 	.word	0x410fc270
 8007524:	e000e400 	.word	0xe000e400
 8007528:	20000df4 	.word	0x20000df4
 800752c:	20000df8 	.word	0x20000df8
 8007530:	e000ed20 	.word	0xe000ed20
 8007534:	2000001c 	.word	0x2000001c
 8007538:	e000ef34 	.word	0xe000ef34

0800753c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800753c:	b480      	push	{r7}
 800753e:	b083      	sub	sp, #12
 8007540:	af00      	add	r7, sp, #0
 8007542:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007546:	f383 8811 	msr	BASEPRI, r3
 800754a:	f3bf 8f6f 	isb	sy
 800754e:	f3bf 8f4f 	dsb	sy
 8007552:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007554:	4b0e      	ldr	r3, [pc, #56]	; (8007590 <vPortEnterCritical+0x54>)
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	3301      	adds	r3, #1
 800755a:	4a0d      	ldr	r2, [pc, #52]	; (8007590 <vPortEnterCritical+0x54>)
 800755c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800755e:	4b0c      	ldr	r3, [pc, #48]	; (8007590 <vPortEnterCritical+0x54>)
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	2b01      	cmp	r3, #1
 8007564:	d10e      	bne.n	8007584 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007566:	4b0b      	ldr	r3, [pc, #44]	; (8007594 <vPortEnterCritical+0x58>)
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	b2db      	uxtb	r3, r3
 800756c:	2b00      	cmp	r3, #0
 800756e:	d009      	beq.n	8007584 <vPortEnterCritical+0x48>
 8007570:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007574:	f383 8811 	msr	BASEPRI, r3
 8007578:	f3bf 8f6f 	isb	sy
 800757c:	f3bf 8f4f 	dsb	sy
 8007580:	603b      	str	r3, [r7, #0]
 8007582:	e7fe      	b.n	8007582 <vPortEnterCritical+0x46>
	}
}
 8007584:	bf00      	nop
 8007586:	370c      	adds	r7, #12
 8007588:	46bd      	mov	sp, r7
 800758a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758e:	4770      	bx	lr
 8007590:	2000001c 	.word	0x2000001c
 8007594:	e000ed04 	.word	0xe000ed04

08007598 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007598:	b480      	push	{r7}
 800759a:	b083      	sub	sp, #12
 800759c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800759e:	4b11      	ldr	r3, [pc, #68]	; (80075e4 <vPortExitCritical+0x4c>)
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d109      	bne.n	80075ba <vPortExitCritical+0x22>
 80075a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075aa:	f383 8811 	msr	BASEPRI, r3
 80075ae:	f3bf 8f6f 	isb	sy
 80075b2:	f3bf 8f4f 	dsb	sy
 80075b6:	607b      	str	r3, [r7, #4]
 80075b8:	e7fe      	b.n	80075b8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80075ba:	4b0a      	ldr	r3, [pc, #40]	; (80075e4 <vPortExitCritical+0x4c>)
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	3b01      	subs	r3, #1
 80075c0:	4a08      	ldr	r2, [pc, #32]	; (80075e4 <vPortExitCritical+0x4c>)
 80075c2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80075c4:	4b07      	ldr	r3, [pc, #28]	; (80075e4 <vPortExitCritical+0x4c>)
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d104      	bne.n	80075d6 <vPortExitCritical+0x3e>
 80075cc:	2300      	movs	r3, #0
 80075ce:	603b      	str	r3, [r7, #0]
	__asm volatile
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80075d6:	bf00      	nop
 80075d8:	370c      	adds	r7, #12
 80075da:	46bd      	mov	sp, r7
 80075dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e0:	4770      	bx	lr
 80075e2:	bf00      	nop
 80075e4:	2000001c 	.word	0x2000001c
	...

080075f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80075f0:	f3ef 8009 	mrs	r0, PSP
 80075f4:	f3bf 8f6f 	isb	sy
 80075f8:	4b15      	ldr	r3, [pc, #84]	; (8007650 <pxCurrentTCBConst>)
 80075fa:	681a      	ldr	r2, [r3, #0]
 80075fc:	f01e 0f10 	tst.w	lr, #16
 8007600:	bf08      	it	eq
 8007602:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007606:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800760a:	6010      	str	r0, [r2, #0]
 800760c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007610:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007614:	f380 8811 	msr	BASEPRI, r0
 8007618:	f3bf 8f4f 	dsb	sy
 800761c:	f3bf 8f6f 	isb	sy
 8007620:	f7fe ff14 	bl	800644c <vTaskSwitchContext>
 8007624:	f04f 0000 	mov.w	r0, #0
 8007628:	f380 8811 	msr	BASEPRI, r0
 800762c:	bc09      	pop	{r0, r3}
 800762e:	6819      	ldr	r1, [r3, #0]
 8007630:	6808      	ldr	r0, [r1, #0]
 8007632:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007636:	f01e 0f10 	tst.w	lr, #16
 800763a:	bf08      	it	eq
 800763c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007640:	f380 8809 	msr	PSP, r0
 8007644:	f3bf 8f6f 	isb	sy
 8007648:	4770      	bx	lr
 800764a:	bf00      	nop
 800764c:	f3af 8000 	nop.w

08007650 <pxCurrentTCBConst>:
 8007650:	200007c8 	.word	0x200007c8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007654:	bf00      	nop
 8007656:	bf00      	nop

08007658 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007658:	b580      	push	{r7, lr}
 800765a:	b082      	sub	sp, #8
 800765c:	af00      	add	r7, sp, #0
	__asm volatile
 800765e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007662:	f383 8811 	msr	BASEPRI, r3
 8007666:	f3bf 8f6f 	isb	sy
 800766a:	f3bf 8f4f 	dsb	sy
 800766e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007670:	f7fe fe2e 	bl	80062d0 <xTaskIncrementTick>
 8007674:	4603      	mov	r3, r0
 8007676:	2b00      	cmp	r3, #0
 8007678:	d003      	beq.n	8007682 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800767a:	4b06      	ldr	r3, [pc, #24]	; (8007694 <SysTick_Handler+0x3c>)
 800767c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007680:	601a      	str	r2, [r3, #0]
 8007682:	2300      	movs	r3, #0
 8007684:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007686:	683b      	ldr	r3, [r7, #0]
 8007688:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800768c:	bf00      	nop
 800768e:	3708      	adds	r7, #8
 8007690:	46bd      	mov	sp, r7
 8007692:	bd80      	pop	{r7, pc}
 8007694:	e000ed04 	.word	0xe000ed04

08007698 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007698:	b480      	push	{r7}
 800769a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800769c:	4b0b      	ldr	r3, [pc, #44]	; (80076cc <vPortSetupTimerInterrupt+0x34>)
 800769e:	2200      	movs	r2, #0
 80076a0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80076a2:	4b0b      	ldr	r3, [pc, #44]	; (80076d0 <vPortSetupTimerInterrupt+0x38>)
 80076a4:	2200      	movs	r2, #0
 80076a6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80076a8:	4b0a      	ldr	r3, [pc, #40]	; (80076d4 <vPortSetupTimerInterrupt+0x3c>)
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	4a0a      	ldr	r2, [pc, #40]	; (80076d8 <vPortSetupTimerInterrupt+0x40>)
 80076ae:	fba2 2303 	umull	r2, r3, r2, r3
 80076b2:	099b      	lsrs	r3, r3, #6
 80076b4:	4a09      	ldr	r2, [pc, #36]	; (80076dc <vPortSetupTimerInterrupt+0x44>)
 80076b6:	3b01      	subs	r3, #1
 80076b8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80076ba:	4b04      	ldr	r3, [pc, #16]	; (80076cc <vPortSetupTimerInterrupt+0x34>)
 80076bc:	2207      	movs	r2, #7
 80076be:	601a      	str	r2, [r3, #0]
}
 80076c0:	bf00      	nop
 80076c2:	46bd      	mov	sp, r7
 80076c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c8:	4770      	bx	lr
 80076ca:	bf00      	nop
 80076cc:	e000e010 	.word	0xe000e010
 80076d0:	e000e018 	.word	0xe000e018
 80076d4:	20000010 	.word	0x20000010
 80076d8:	10624dd3 	.word	0x10624dd3
 80076dc:	e000e014 	.word	0xe000e014

080076e0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80076e0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80076f0 <vPortEnableVFP+0x10>
 80076e4:	6801      	ldr	r1, [r0, #0]
 80076e6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80076ea:	6001      	str	r1, [r0, #0]
 80076ec:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80076ee:	bf00      	nop
 80076f0:	e000ed88 	.word	0xe000ed88

080076f4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80076f4:	b480      	push	{r7}
 80076f6:	b085      	sub	sp, #20
 80076f8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80076fa:	f3ef 8305 	mrs	r3, IPSR
 80076fe:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	2b0f      	cmp	r3, #15
 8007704:	d913      	bls.n	800772e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007706:	4a16      	ldr	r2, [pc, #88]	; (8007760 <vPortValidateInterruptPriority+0x6c>)
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	4413      	add	r3, r2
 800770c:	781b      	ldrb	r3, [r3, #0]
 800770e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007710:	4b14      	ldr	r3, [pc, #80]	; (8007764 <vPortValidateInterruptPriority+0x70>)
 8007712:	781b      	ldrb	r3, [r3, #0]
 8007714:	7afa      	ldrb	r2, [r7, #11]
 8007716:	429a      	cmp	r2, r3
 8007718:	d209      	bcs.n	800772e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800771a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800771e:	f383 8811 	msr	BASEPRI, r3
 8007722:	f3bf 8f6f 	isb	sy
 8007726:	f3bf 8f4f 	dsb	sy
 800772a:	607b      	str	r3, [r7, #4]
 800772c:	e7fe      	b.n	800772c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800772e:	4b0e      	ldr	r3, [pc, #56]	; (8007768 <vPortValidateInterruptPriority+0x74>)
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007736:	4b0d      	ldr	r3, [pc, #52]	; (800776c <vPortValidateInterruptPriority+0x78>)
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	429a      	cmp	r2, r3
 800773c:	d909      	bls.n	8007752 <vPortValidateInterruptPriority+0x5e>
 800773e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007742:	f383 8811 	msr	BASEPRI, r3
 8007746:	f3bf 8f6f 	isb	sy
 800774a:	f3bf 8f4f 	dsb	sy
 800774e:	603b      	str	r3, [r7, #0]
 8007750:	e7fe      	b.n	8007750 <vPortValidateInterruptPriority+0x5c>
	}
 8007752:	bf00      	nop
 8007754:	3714      	adds	r7, #20
 8007756:	46bd      	mov	sp, r7
 8007758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775c:	4770      	bx	lr
 800775e:	bf00      	nop
 8007760:	e000e3f0 	.word	0xe000e3f0
 8007764:	20000df4 	.word	0x20000df4
 8007768:	e000ed0c 	.word	0xe000ed0c
 800776c:	20000df8 	.word	0x20000df8

08007770 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007770:	b580      	push	{r7, lr}
 8007772:	b08a      	sub	sp, #40	; 0x28
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007778:	2300      	movs	r3, #0
 800777a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800777c:	f7fe fcee 	bl	800615c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007780:	4b57      	ldr	r3, [pc, #348]	; (80078e0 <pvPortMalloc+0x170>)
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d101      	bne.n	800778c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007788:	f000 f90c 	bl	80079a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800778c:	4b55      	ldr	r3, [pc, #340]	; (80078e4 <pvPortMalloc+0x174>)
 800778e:	681a      	ldr	r2, [r3, #0]
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	4013      	ands	r3, r2
 8007794:	2b00      	cmp	r3, #0
 8007796:	f040 808c 	bne.w	80078b2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d01c      	beq.n	80077da <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 80077a0:	2208      	movs	r2, #8
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	4413      	add	r3, r2
 80077a6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	f003 0307 	and.w	r3, r3, #7
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d013      	beq.n	80077da <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	f023 0307 	bic.w	r3, r3, #7
 80077b8:	3308      	adds	r3, #8
 80077ba:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	f003 0307 	and.w	r3, r3, #7
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d009      	beq.n	80077da <pvPortMalloc+0x6a>
 80077c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077ca:	f383 8811 	msr	BASEPRI, r3
 80077ce:	f3bf 8f6f 	isb	sy
 80077d2:	f3bf 8f4f 	dsb	sy
 80077d6:	617b      	str	r3, [r7, #20]
 80077d8:	e7fe      	b.n	80077d8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d068      	beq.n	80078b2 <pvPortMalloc+0x142>
 80077e0:	4b41      	ldr	r3, [pc, #260]	; (80078e8 <pvPortMalloc+0x178>)
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	687a      	ldr	r2, [r7, #4]
 80077e6:	429a      	cmp	r2, r3
 80077e8:	d863      	bhi.n	80078b2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80077ea:	4b40      	ldr	r3, [pc, #256]	; (80078ec <pvPortMalloc+0x17c>)
 80077ec:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80077ee:	4b3f      	ldr	r3, [pc, #252]	; (80078ec <pvPortMalloc+0x17c>)
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80077f4:	e004      	b.n	8007800 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80077f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077f8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80077fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007802:	685b      	ldr	r3, [r3, #4]
 8007804:	687a      	ldr	r2, [r7, #4]
 8007806:	429a      	cmp	r2, r3
 8007808:	d903      	bls.n	8007812 <pvPortMalloc+0xa2>
 800780a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	2b00      	cmp	r3, #0
 8007810:	d1f1      	bne.n	80077f6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007812:	4b33      	ldr	r3, [pc, #204]	; (80078e0 <pvPortMalloc+0x170>)
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007818:	429a      	cmp	r2, r3
 800781a:	d04a      	beq.n	80078b2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800781c:	6a3b      	ldr	r3, [r7, #32]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	2208      	movs	r2, #8
 8007822:	4413      	add	r3, r2
 8007824:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007828:	681a      	ldr	r2, [r3, #0]
 800782a:	6a3b      	ldr	r3, [r7, #32]
 800782c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800782e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007830:	685a      	ldr	r2, [r3, #4]
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	1ad2      	subs	r2, r2, r3
 8007836:	2308      	movs	r3, #8
 8007838:	005b      	lsls	r3, r3, #1
 800783a:	429a      	cmp	r2, r3
 800783c:	d91e      	bls.n	800787c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800783e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	4413      	add	r3, r2
 8007844:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007846:	69bb      	ldr	r3, [r7, #24]
 8007848:	f003 0307 	and.w	r3, r3, #7
 800784c:	2b00      	cmp	r3, #0
 800784e:	d009      	beq.n	8007864 <pvPortMalloc+0xf4>
 8007850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007854:	f383 8811 	msr	BASEPRI, r3
 8007858:	f3bf 8f6f 	isb	sy
 800785c:	f3bf 8f4f 	dsb	sy
 8007860:	613b      	str	r3, [r7, #16]
 8007862:	e7fe      	b.n	8007862 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007866:	685a      	ldr	r2, [r3, #4]
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	1ad2      	subs	r2, r2, r3
 800786c:	69bb      	ldr	r3, [r7, #24]
 800786e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007872:	687a      	ldr	r2, [r7, #4]
 8007874:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007876:	69b8      	ldr	r0, [r7, #24]
 8007878:	f000 f8f6 	bl	8007a68 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800787c:	4b1a      	ldr	r3, [pc, #104]	; (80078e8 <pvPortMalloc+0x178>)
 800787e:	681a      	ldr	r2, [r3, #0]
 8007880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007882:	685b      	ldr	r3, [r3, #4]
 8007884:	1ad3      	subs	r3, r2, r3
 8007886:	4a18      	ldr	r2, [pc, #96]	; (80078e8 <pvPortMalloc+0x178>)
 8007888:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800788a:	4b17      	ldr	r3, [pc, #92]	; (80078e8 <pvPortMalloc+0x178>)
 800788c:	681a      	ldr	r2, [r3, #0]
 800788e:	4b18      	ldr	r3, [pc, #96]	; (80078f0 <pvPortMalloc+0x180>)
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	429a      	cmp	r2, r3
 8007894:	d203      	bcs.n	800789e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007896:	4b14      	ldr	r3, [pc, #80]	; (80078e8 <pvPortMalloc+0x178>)
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	4a15      	ldr	r2, [pc, #84]	; (80078f0 <pvPortMalloc+0x180>)
 800789c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800789e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078a0:	685a      	ldr	r2, [r3, #4]
 80078a2:	4b10      	ldr	r3, [pc, #64]	; (80078e4 <pvPortMalloc+0x174>)
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	431a      	orrs	r2, r3
 80078a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078aa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80078ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ae:	2200      	movs	r2, #0
 80078b0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80078b2:	f7fe fc61 	bl	8006178 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80078b6:	69fb      	ldr	r3, [r7, #28]
 80078b8:	f003 0307 	and.w	r3, r3, #7
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d009      	beq.n	80078d4 <pvPortMalloc+0x164>
 80078c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078c4:	f383 8811 	msr	BASEPRI, r3
 80078c8:	f3bf 8f6f 	isb	sy
 80078cc:	f3bf 8f4f 	dsb	sy
 80078d0:	60fb      	str	r3, [r7, #12]
 80078d2:	e7fe      	b.n	80078d2 <pvPortMalloc+0x162>
	return pvReturn;
 80078d4:	69fb      	ldr	r3, [r7, #28]
}
 80078d6:	4618      	mov	r0, r3
 80078d8:	3728      	adds	r7, #40	; 0x28
 80078da:	46bd      	mov	sp, r7
 80078dc:	bd80      	pop	{r7, pc}
 80078de:	bf00      	nop
 80078e0:	20004a04 	.word	0x20004a04
 80078e4:	20004a10 	.word	0x20004a10
 80078e8:	20004a08 	.word	0x20004a08
 80078ec:	200049fc 	.word	0x200049fc
 80078f0:	20004a0c 	.word	0x20004a0c

080078f4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80078f4:	b580      	push	{r7, lr}
 80078f6:	b086      	sub	sp, #24
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	2b00      	cmp	r3, #0
 8007904:	d046      	beq.n	8007994 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007906:	2308      	movs	r3, #8
 8007908:	425b      	negs	r3, r3
 800790a:	697a      	ldr	r2, [r7, #20]
 800790c:	4413      	add	r3, r2
 800790e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007910:	697b      	ldr	r3, [r7, #20]
 8007912:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007914:	693b      	ldr	r3, [r7, #16]
 8007916:	685a      	ldr	r2, [r3, #4]
 8007918:	4b20      	ldr	r3, [pc, #128]	; (800799c <vPortFree+0xa8>)
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	4013      	ands	r3, r2
 800791e:	2b00      	cmp	r3, #0
 8007920:	d109      	bne.n	8007936 <vPortFree+0x42>
 8007922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007926:	f383 8811 	msr	BASEPRI, r3
 800792a:	f3bf 8f6f 	isb	sy
 800792e:	f3bf 8f4f 	dsb	sy
 8007932:	60fb      	str	r3, [r7, #12]
 8007934:	e7fe      	b.n	8007934 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007936:	693b      	ldr	r3, [r7, #16]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d009      	beq.n	8007952 <vPortFree+0x5e>
 800793e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007942:	f383 8811 	msr	BASEPRI, r3
 8007946:	f3bf 8f6f 	isb	sy
 800794a:	f3bf 8f4f 	dsb	sy
 800794e:	60bb      	str	r3, [r7, #8]
 8007950:	e7fe      	b.n	8007950 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007952:	693b      	ldr	r3, [r7, #16]
 8007954:	685a      	ldr	r2, [r3, #4]
 8007956:	4b11      	ldr	r3, [pc, #68]	; (800799c <vPortFree+0xa8>)
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	4013      	ands	r3, r2
 800795c:	2b00      	cmp	r3, #0
 800795e:	d019      	beq.n	8007994 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007960:	693b      	ldr	r3, [r7, #16]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	2b00      	cmp	r3, #0
 8007966:	d115      	bne.n	8007994 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007968:	693b      	ldr	r3, [r7, #16]
 800796a:	685a      	ldr	r2, [r3, #4]
 800796c:	4b0b      	ldr	r3, [pc, #44]	; (800799c <vPortFree+0xa8>)
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	43db      	mvns	r3, r3
 8007972:	401a      	ands	r2, r3
 8007974:	693b      	ldr	r3, [r7, #16]
 8007976:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007978:	f7fe fbf0 	bl	800615c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800797c:	693b      	ldr	r3, [r7, #16]
 800797e:	685a      	ldr	r2, [r3, #4]
 8007980:	4b07      	ldr	r3, [pc, #28]	; (80079a0 <vPortFree+0xac>)
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	4413      	add	r3, r2
 8007986:	4a06      	ldr	r2, [pc, #24]	; (80079a0 <vPortFree+0xac>)
 8007988:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800798a:	6938      	ldr	r0, [r7, #16]
 800798c:	f000 f86c 	bl	8007a68 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007990:	f7fe fbf2 	bl	8006178 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007994:	bf00      	nop
 8007996:	3718      	adds	r7, #24
 8007998:	46bd      	mov	sp, r7
 800799a:	bd80      	pop	{r7, pc}
 800799c:	20004a10 	.word	0x20004a10
 80079a0:	20004a08 	.word	0x20004a08

080079a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80079a4:	b480      	push	{r7}
 80079a6:	b085      	sub	sp, #20
 80079a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80079aa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80079ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80079b0:	4b27      	ldr	r3, [pc, #156]	; (8007a50 <prvHeapInit+0xac>)
 80079b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	f003 0307 	and.w	r3, r3, #7
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d00c      	beq.n	80079d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	3307      	adds	r3, #7
 80079c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	f023 0307 	bic.w	r3, r3, #7
 80079ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80079cc:	68ba      	ldr	r2, [r7, #8]
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	1ad3      	subs	r3, r2, r3
 80079d2:	4a1f      	ldr	r2, [pc, #124]	; (8007a50 <prvHeapInit+0xac>)
 80079d4:	4413      	add	r3, r2
 80079d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80079dc:	4a1d      	ldr	r2, [pc, #116]	; (8007a54 <prvHeapInit+0xb0>)
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80079e2:	4b1c      	ldr	r3, [pc, #112]	; (8007a54 <prvHeapInit+0xb0>)
 80079e4:	2200      	movs	r2, #0
 80079e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	68ba      	ldr	r2, [r7, #8]
 80079ec:	4413      	add	r3, r2
 80079ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80079f0:	2208      	movs	r2, #8
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	1a9b      	subs	r3, r3, r2
 80079f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	f023 0307 	bic.w	r3, r3, #7
 80079fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	4a15      	ldr	r2, [pc, #84]	; (8007a58 <prvHeapInit+0xb4>)
 8007a04:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007a06:	4b14      	ldr	r3, [pc, #80]	; (8007a58 <prvHeapInit+0xb4>)
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007a0e:	4b12      	ldr	r3, [pc, #72]	; (8007a58 <prvHeapInit+0xb4>)
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	2200      	movs	r2, #0
 8007a14:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	68fa      	ldr	r2, [r7, #12]
 8007a1e:	1ad2      	subs	r2, r2, r3
 8007a20:	683b      	ldr	r3, [r7, #0]
 8007a22:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007a24:	4b0c      	ldr	r3, [pc, #48]	; (8007a58 <prvHeapInit+0xb4>)
 8007a26:	681a      	ldr	r2, [r3, #0]
 8007a28:	683b      	ldr	r3, [r7, #0]
 8007a2a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007a2c:	683b      	ldr	r3, [r7, #0]
 8007a2e:	685b      	ldr	r3, [r3, #4]
 8007a30:	4a0a      	ldr	r2, [pc, #40]	; (8007a5c <prvHeapInit+0xb8>)
 8007a32:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007a34:	683b      	ldr	r3, [r7, #0]
 8007a36:	685b      	ldr	r3, [r3, #4]
 8007a38:	4a09      	ldr	r2, [pc, #36]	; (8007a60 <prvHeapInit+0xbc>)
 8007a3a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007a3c:	4b09      	ldr	r3, [pc, #36]	; (8007a64 <prvHeapInit+0xc0>)
 8007a3e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007a42:	601a      	str	r2, [r3, #0]
}
 8007a44:	bf00      	nop
 8007a46:	3714      	adds	r7, #20
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4e:	4770      	bx	lr
 8007a50:	20000dfc 	.word	0x20000dfc
 8007a54:	200049fc 	.word	0x200049fc
 8007a58:	20004a04 	.word	0x20004a04
 8007a5c:	20004a0c 	.word	0x20004a0c
 8007a60:	20004a08 	.word	0x20004a08
 8007a64:	20004a10 	.word	0x20004a10

08007a68 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007a68:	b480      	push	{r7}
 8007a6a:	b085      	sub	sp, #20
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007a70:	4b28      	ldr	r3, [pc, #160]	; (8007b14 <prvInsertBlockIntoFreeList+0xac>)
 8007a72:	60fb      	str	r3, [r7, #12]
 8007a74:	e002      	b.n	8007a7c <prvInsertBlockIntoFreeList+0x14>
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	60fb      	str	r3, [r7, #12]
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	687a      	ldr	r2, [r7, #4]
 8007a82:	429a      	cmp	r2, r3
 8007a84:	d8f7      	bhi.n	8007a76 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	685b      	ldr	r3, [r3, #4]
 8007a8e:	68ba      	ldr	r2, [r7, #8]
 8007a90:	4413      	add	r3, r2
 8007a92:	687a      	ldr	r2, [r7, #4]
 8007a94:	429a      	cmp	r2, r3
 8007a96:	d108      	bne.n	8007aaa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	685a      	ldr	r2, [r3, #4]
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	685b      	ldr	r3, [r3, #4]
 8007aa0:	441a      	add	r2, r3
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	685b      	ldr	r3, [r3, #4]
 8007ab2:	68ba      	ldr	r2, [r7, #8]
 8007ab4:	441a      	add	r2, r3
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	429a      	cmp	r2, r3
 8007abc:	d118      	bne.n	8007af0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	681a      	ldr	r2, [r3, #0]
 8007ac2:	4b15      	ldr	r3, [pc, #84]	; (8007b18 <prvInsertBlockIntoFreeList+0xb0>)
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	429a      	cmp	r2, r3
 8007ac8:	d00d      	beq.n	8007ae6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	685a      	ldr	r2, [r3, #4]
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	685b      	ldr	r3, [r3, #4]
 8007ad4:	441a      	add	r2, r3
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	681a      	ldr	r2, [r3, #0]
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	601a      	str	r2, [r3, #0]
 8007ae4:	e008      	b.n	8007af8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007ae6:	4b0c      	ldr	r3, [pc, #48]	; (8007b18 <prvInsertBlockIntoFreeList+0xb0>)
 8007ae8:	681a      	ldr	r2, [r3, #0]
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	601a      	str	r2, [r3, #0]
 8007aee:	e003      	b.n	8007af8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	681a      	ldr	r2, [r3, #0]
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007af8:	68fa      	ldr	r2, [r7, #12]
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	429a      	cmp	r2, r3
 8007afe:	d002      	beq.n	8007b06 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	687a      	ldr	r2, [r7, #4]
 8007b04:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007b06:	bf00      	nop
 8007b08:	3714      	adds	r7, #20
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b10:	4770      	bx	lr
 8007b12:	bf00      	nop
 8007b14:	200049fc 	.word	0x200049fc
 8007b18:	20004a04 	.word	0x20004a04

08007b1c <__errno>:
 8007b1c:	4b01      	ldr	r3, [pc, #4]	; (8007b24 <__errno+0x8>)
 8007b1e:	6818      	ldr	r0, [r3, #0]
 8007b20:	4770      	bx	lr
 8007b22:	bf00      	nop
 8007b24:	20000020 	.word	0x20000020

08007b28 <__libc_init_array>:
 8007b28:	b570      	push	{r4, r5, r6, lr}
 8007b2a:	4e0d      	ldr	r6, [pc, #52]	; (8007b60 <__libc_init_array+0x38>)
 8007b2c:	4c0d      	ldr	r4, [pc, #52]	; (8007b64 <__libc_init_array+0x3c>)
 8007b2e:	1ba4      	subs	r4, r4, r6
 8007b30:	10a4      	asrs	r4, r4, #2
 8007b32:	2500      	movs	r5, #0
 8007b34:	42a5      	cmp	r5, r4
 8007b36:	d109      	bne.n	8007b4c <__libc_init_array+0x24>
 8007b38:	4e0b      	ldr	r6, [pc, #44]	; (8007b68 <__libc_init_array+0x40>)
 8007b3a:	4c0c      	ldr	r4, [pc, #48]	; (8007b6c <__libc_init_array+0x44>)
 8007b3c:	f000 faea 	bl	8008114 <_init>
 8007b40:	1ba4      	subs	r4, r4, r6
 8007b42:	10a4      	asrs	r4, r4, #2
 8007b44:	2500      	movs	r5, #0
 8007b46:	42a5      	cmp	r5, r4
 8007b48:	d105      	bne.n	8007b56 <__libc_init_array+0x2e>
 8007b4a:	bd70      	pop	{r4, r5, r6, pc}
 8007b4c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007b50:	4798      	blx	r3
 8007b52:	3501      	adds	r5, #1
 8007b54:	e7ee      	b.n	8007b34 <__libc_init_array+0xc>
 8007b56:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007b5a:	4798      	blx	r3
 8007b5c:	3501      	adds	r5, #1
 8007b5e:	e7f2      	b.n	8007b46 <__libc_init_array+0x1e>
 8007b60:	08008240 	.word	0x08008240
 8007b64:	08008240 	.word	0x08008240
 8007b68:	08008240 	.word	0x08008240
 8007b6c:	08008244 	.word	0x08008244

08007b70 <memcpy>:
 8007b70:	b510      	push	{r4, lr}
 8007b72:	1e43      	subs	r3, r0, #1
 8007b74:	440a      	add	r2, r1
 8007b76:	4291      	cmp	r1, r2
 8007b78:	d100      	bne.n	8007b7c <memcpy+0xc>
 8007b7a:	bd10      	pop	{r4, pc}
 8007b7c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007b80:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007b84:	e7f7      	b.n	8007b76 <memcpy+0x6>

08007b86 <memset>:
 8007b86:	4402      	add	r2, r0
 8007b88:	4603      	mov	r3, r0
 8007b8a:	4293      	cmp	r3, r2
 8007b8c:	d100      	bne.n	8007b90 <memset+0xa>
 8007b8e:	4770      	bx	lr
 8007b90:	f803 1b01 	strb.w	r1, [r3], #1
 8007b94:	e7f9      	b.n	8007b8a <memset+0x4>

08007b96 <strcpy>:
 8007b96:	4603      	mov	r3, r0
 8007b98:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007b9c:	f803 2b01 	strb.w	r2, [r3], #1
 8007ba0:	2a00      	cmp	r2, #0
 8007ba2:	d1f9      	bne.n	8007b98 <strcpy+0x2>
 8007ba4:	4770      	bx	lr
	...

08007ba8 <atan>:
 8007ba8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bac:	ec55 4b10 	vmov	r4, r5, d0
 8007bb0:	4bc3      	ldr	r3, [pc, #780]	; (8007ec0 <atan+0x318>)
 8007bb2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8007bb6:	429e      	cmp	r6, r3
 8007bb8:	46ab      	mov	fp, r5
 8007bba:	dd18      	ble.n	8007bee <atan+0x46>
 8007bbc:	4bc1      	ldr	r3, [pc, #772]	; (8007ec4 <atan+0x31c>)
 8007bbe:	429e      	cmp	r6, r3
 8007bc0:	dc01      	bgt.n	8007bc6 <atan+0x1e>
 8007bc2:	d109      	bne.n	8007bd8 <atan+0x30>
 8007bc4:	b144      	cbz	r4, 8007bd8 <atan+0x30>
 8007bc6:	4622      	mov	r2, r4
 8007bc8:	462b      	mov	r3, r5
 8007bca:	4620      	mov	r0, r4
 8007bcc:	4629      	mov	r1, r5
 8007bce:	f7f8 fb05 	bl	80001dc <__adddf3>
 8007bd2:	4604      	mov	r4, r0
 8007bd4:	460d      	mov	r5, r1
 8007bd6:	e006      	b.n	8007be6 <atan+0x3e>
 8007bd8:	f1bb 0f00 	cmp.w	fp, #0
 8007bdc:	f340 8131 	ble.w	8007e42 <atan+0x29a>
 8007be0:	a59b      	add	r5, pc, #620	; (adr r5, 8007e50 <atan+0x2a8>)
 8007be2:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007be6:	ec45 4b10 	vmov	d0, r4, r5
 8007bea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bee:	4bb6      	ldr	r3, [pc, #728]	; (8007ec8 <atan+0x320>)
 8007bf0:	429e      	cmp	r6, r3
 8007bf2:	dc14      	bgt.n	8007c1e <atan+0x76>
 8007bf4:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8007bf8:	429e      	cmp	r6, r3
 8007bfa:	dc0d      	bgt.n	8007c18 <atan+0x70>
 8007bfc:	a396      	add	r3, pc, #600	; (adr r3, 8007e58 <atan+0x2b0>)
 8007bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c02:	ee10 0a10 	vmov	r0, s0
 8007c06:	4629      	mov	r1, r5
 8007c08:	f7f8 fae8 	bl	80001dc <__adddf3>
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	4baf      	ldr	r3, [pc, #700]	; (8007ecc <atan+0x324>)
 8007c10:	f7f8 ff2a 	bl	8000a68 <__aeabi_dcmpgt>
 8007c14:	2800      	cmp	r0, #0
 8007c16:	d1e6      	bne.n	8007be6 <atan+0x3e>
 8007c18:	f04f 3aff 	mov.w	sl, #4294967295
 8007c1c:	e02b      	b.n	8007c76 <atan+0xce>
 8007c1e:	f000 f963 	bl	8007ee8 <fabs>
 8007c22:	4bab      	ldr	r3, [pc, #684]	; (8007ed0 <atan+0x328>)
 8007c24:	429e      	cmp	r6, r3
 8007c26:	ec55 4b10 	vmov	r4, r5, d0
 8007c2a:	f300 80bf 	bgt.w	8007dac <atan+0x204>
 8007c2e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8007c32:	429e      	cmp	r6, r3
 8007c34:	f300 80a0 	bgt.w	8007d78 <atan+0x1d0>
 8007c38:	ee10 2a10 	vmov	r2, s0
 8007c3c:	ee10 0a10 	vmov	r0, s0
 8007c40:	462b      	mov	r3, r5
 8007c42:	4629      	mov	r1, r5
 8007c44:	f7f8 faca 	bl	80001dc <__adddf3>
 8007c48:	2200      	movs	r2, #0
 8007c4a:	4ba0      	ldr	r3, [pc, #640]	; (8007ecc <atan+0x324>)
 8007c4c:	f7f8 fac4 	bl	80001d8 <__aeabi_dsub>
 8007c50:	2200      	movs	r2, #0
 8007c52:	4606      	mov	r6, r0
 8007c54:	460f      	mov	r7, r1
 8007c56:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007c5a:	4620      	mov	r0, r4
 8007c5c:	4629      	mov	r1, r5
 8007c5e:	f7f8 fabd 	bl	80001dc <__adddf3>
 8007c62:	4602      	mov	r2, r0
 8007c64:	460b      	mov	r3, r1
 8007c66:	4630      	mov	r0, r6
 8007c68:	4639      	mov	r1, r7
 8007c6a:	f7f8 fd97 	bl	800079c <__aeabi_ddiv>
 8007c6e:	f04f 0a00 	mov.w	sl, #0
 8007c72:	4604      	mov	r4, r0
 8007c74:	460d      	mov	r5, r1
 8007c76:	4622      	mov	r2, r4
 8007c78:	462b      	mov	r3, r5
 8007c7a:	4620      	mov	r0, r4
 8007c7c:	4629      	mov	r1, r5
 8007c7e:	f7f8 fc63 	bl	8000548 <__aeabi_dmul>
 8007c82:	4602      	mov	r2, r0
 8007c84:	460b      	mov	r3, r1
 8007c86:	4680      	mov	r8, r0
 8007c88:	4689      	mov	r9, r1
 8007c8a:	f7f8 fc5d 	bl	8000548 <__aeabi_dmul>
 8007c8e:	a374      	add	r3, pc, #464	; (adr r3, 8007e60 <atan+0x2b8>)
 8007c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c94:	4606      	mov	r6, r0
 8007c96:	460f      	mov	r7, r1
 8007c98:	f7f8 fc56 	bl	8000548 <__aeabi_dmul>
 8007c9c:	a372      	add	r3, pc, #456	; (adr r3, 8007e68 <atan+0x2c0>)
 8007c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ca2:	f7f8 fa9b 	bl	80001dc <__adddf3>
 8007ca6:	4632      	mov	r2, r6
 8007ca8:	463b      	mov	r3, r7
 8007caa:	f7f8 fc4d 	bl	8000548 <__aeabi_dmul>
 8007cae:	a370      	add	r3, pc, #448	; (adr r3, 8007e70 <atan+0x2c8>)
 8007cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cb4:	f7f8 fa92 	bl	80001dc <__adddf3>
 8007cb8:	4632      	mov	r2, r6
 8007cba:	463b      	mov	r3, r7
 8007cbc:	f7f8 fc44 	bl	8000548 <__aeabi_dmul>
 8007cc0:	a36d      	add	r3, pc, #436	; (adr r3, 8007e78 <atan+0x2d0>)
 8007cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cc6:	f7f8 fa89 	bl	80001dc <__adddf3>
 8007cca:	4632      	mov	r2, r6
 8007ccc:	463b      	mov	r3, r7
 8007cce:	f7f8 fc3b 	bl	8000548 <__aeabi_dmul>
 8007cd2:	a36b      	add	r3, pc, #428	; (adr r3, 8007e80 <atan+0x2d8>)
 8007cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cd8:	f7f8 fa80 	bl	80001dc <__adddf3>
 8007cdc:	4632      	mov	r2, r6
 8007cde:	463b      	mov	r3, r7
 8007ce0:	f7f8 fc32 	bl	8000548 <__aeabi_dmul>
 8007ce4:	a368      	add	r3, pc, #416	; (adr r3, 8007e88 <atan+0x2e0>)
 8007ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cea:	f7f8 fa77 	bl	80001dc <__adddf3>
 8007cee:	4642      	mov	r2, r8
 8007cf0:	464b      	mov	r3, r9
 8007cf2:	f7f8 fc29 	bl	8000548 <__aeabi_dmul>
 8007cf6:	a366      	add	r3, pc, #408	; (adr r3, 8007e90 <atan+0x2e8>)
 8007cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cfc:	4680      	mov	r8, r0
 8007cfe:	4689      	mov	r9, r1
 8007d00:	4630      	mov	r0, r6
 8007d02:	4639      	mov	r1, r7
 8007d04:	f7f8 fc20 	bl	8000548 <__aeabi_dmul>
 8007d08:	a363      	add	r3, pc, #396	; (adr r3, 8007e98 <atan+0x2f0>)
 8007d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d0e:	f7f8 fa63 	bl	80001d8 <__aeabi_dsub>
 8007d12:	4632      	mov	r2, r6
 8007d14:	463b      	mov	r3, r7
 8007d16:	f7f8 fc17 	bl	8000548 <__aeabi_dmul>
 8007d1a:	a361      	add	r3, pc, #388	; (adr r3, 8007ea0 <atan+0x2f8>)
 8007d1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d20:	f7f8 fa5a 	bl	80001d8 <__aeabi_dsub>
 8007d24:	4632      	mov	r2, r6
 8007d26:	463b      	mov	r3, r7
 8007d28:	f7f8 fc0e 	bl	8000548 <__aeabi_dmul>
 8007d2c:	a35e      	add	r3, pc, #376	; (adr r3, 8007ea8 <atan+0x300>)
 8007d2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d32:	f7f8 fa51 	bl	80001d8 <__aeabi_dsub>
 8007d36:	4632      	mov	r2, r6
 8007d38:	463b      	mov	r3, r7
 8007d3a:	f7f8 fc05 	bl	8000548 <__aeabi_dmul>
 8007d3e:	a35c      	add	r3, pc, #368	; (adr r3, 8007eb0 <atan+0x308>)
 8007d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d44:	f7f8 fa48 	bl	80001d8 <__aeabi_dsub>
 8007d48:	4632      	mov	r2, r6
 8007d4a:	463b      	mov	r3, r7
 8007d4c:	f7f8 fbfc 	bl	8000548 <__aeabi_dmul>
 8007d50:	4602      	mov	r2, r0
 8007d52:	460b      	mov	r3, r1
 8007d54:	4640      	mov	r0, r8
 8007d56:	4649      	mov	r1, r9
 8007d58:	f7f8 fa40 	bl	80001dc <__adddf3>
 8007d5c:	4622      	mov	r2, r4
 8007d5e:	462b      	mov	r3, r5
 8007d60:	f7f8 fbf2 	bl	8000548 <__aeabi_dmul>
 8007d64:	f1ba 3fff 	cmp.w	sl, #4294967295
 8007d68:	4602      	mov	r2, r0
 8007d6a:	460b      	mov	r3, r1
 8007d6c:	d14b      	bne.n	8007e06 <atan+0x25e>
 8007d6e:	4620      	mov	r0, r4
 8007d70:	4629      	mov	r1, r5
 8007d72:	f7f8 fa31 	bl	80001d8 <__aeabi_dsub>
 8007d76:	e72c      	b.n	8007bd2 <atan+0x2a>
 8007d78:	ee10 0a10 	vmov	r0, s0
 8007d7c:	2200      	movs	r2, #0
 8007d7e:	4b53      	ldr	r3, [pc, #332]	; (8007ecc <atan+0x324>)
 8007d80:	4629      	mov	r1, r5
 8007d82:	f7f8 fa29 	bl	80001d8 <__aeabi_dsub>
 8007d86:	2200      	movs	r2, #0
 8007d88:	4606      	mov	r6, r0
 8007d8a:	460f      	mov	r7, r1
 8007d8c:	4b4f      	ldr	r3, [pc, #316]	; (8007ecc <atan+0x324>)
 8007d8e:	4620      	mov	r0, r4
 8007d90:	4629      	mov	r1, r5
 8007d92:	f7f8 fa23 	bl	80001dc <__adddf3>
 8007d96:	4602      	mov	r2, r0
 8007d98:	460b      	mov	r3, r1
 8007d9a:	4630      	mov	r0, r6
 8007d9c:	4639      	mov	r1, r7
 8007d9e:	f7f8 fcfd 	bl	800079c <__aeabi_ddiv>
 8007da2:	f04f 0a01 	mov.w	sl, #1
 8007da6:	4604      	mov	r4, r0
 8007da8:	460d      	mov	r5, r1
 8007daa:	e764      	b.n	8007c76 <atan+0xce>
 8007dac:	4b49      	ldr	r3, [pc, #292]	; (8007ed4 <atan+0x32c>)
 8007dae:	429e      	cmp	r6, r3
 8007db0:	dc1d      	bgt.n	8007dee <atan+0x246>
 8007db2:	ee10 0a10 	vmov	r0, s0
 8007db6:	2200      	movs	r2, #0
 8007db8:	4b47      	ldr	r3, [pc, #284]	; (8007ed8 <atan+0x330>)
 8007dba:	4629      	mov	r1, r5
 8007dbc:	f7f8 fa0c 	bl	80001d8 <__aeabi_dsub>
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	4606      	mov	r6, r0
 8007dc4:	460f      	mov	r7, r1
 8007dc6:	4b44      	ldr	r3, [pc, #272]	; (8007ed8 <atan+0x330>)
 8007dc8:	4620      	mov	r0, r4
 8007dca:	4629      	mov	r1, r5
 8007dcc:	f7f8 fbbc 	bl	8000548 <__aeabi_dmul>
 8007dd0:	2200      	movs	r2, #0
 8007dd2:	4b3e      	ldr	r3, [pc, #248]	; (8007ecc <atan+0x324>)
 8007dd4:	f7f8 fa02 	bl	80001dc <__adddf3>
 8007dd8:	4602      	mov	r2, r0
 8007dda:	460b      	mov	r3, r1
 8007ddc:	4630      	mov	r0, r6
 8007dde:	4639      	mov	r1, r7
 8007de0:	f7f8 fcdc 	bl	800079c <__aeabi_ddiv>
 8007de4:	f04f 0a02 	mov.w	sl, #2
 8007de8:	4604      	mov	r4, r0
 8007dea:	460d      	mov	r5, r1
 8007dec:	e743      	b.n	8007c76 <atan+0xce>
 8007dee:	462b      	mov	r3, r5
 8007df0:	ee10 2a10 	vmov	r2, s0
 8007df4:	2000      	movs	r0, #0
 8007df6:	4939      	ldr	r1, [pc, #228]	; (8007edc <atan+0x334>)
 8007df8:	f7f8 fcd0 	bl	800079c <__aeabi_ddiv>
 8007dfc:	f04f 0a03 	mov.w	sl, #3
 8007e00:	4604      	mov	r4, r0
 8007e02:	460d      	mov	r5, r1
 8007e04:	e737      	b.n	8007c76 <atan+0xce>
 8007e06:	4b36      	ldr	r3, [pc, #216]	; (8007ee0 <atan+0x338>)
 8007e08:	4e36      	ldr	r6, [pc, #216]	; (8007ee4 <atan+0x33c>)
 8007e0a:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 8007e0e:	4456      	add	r6, sl
 8007e10:	449a      	add	sl, r3
 8007e12:	e9da 2300 	ldrd	r2, r3, [sl]
 8007e16:	f7f8 f9df 	bl	80001d8 <__aeabi_dsub>
 8007e1a:	4622      	mov	r2, r4
 8007e1c:	462b      	mov	r3, r5
 8007e1e:	f7f8 f9db 	bl	80001d8 <__aeabi_dsub>
 8007e22:	4602      	mov	r2, r0
 8007e24:	460b      	mov	r3, r1
 8007e26:	e9d6 0100 	ldrd	r0, r1, [r6]
 8007e2a:	f7f8 f9d5 	bl	80001d8 <__aeabi_dsub>
 8007e2e:	f1bb 0f00 	cmp.w	fp, #0
 8007e32:	4604      	mov	r4, r0
 8007e34:	460d      	mov	r5, r1
 8007e36:	f6bf aed6 	bge.w	8007be6 <atan+0x3e>
 8007e3a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007e3e:	461d      	mov	r5, r3
 8007e40:	e6d1      	b.n	8007be6 <atan+0x3e>
 8007e42:	a51d      	add	r5, pc, #116	; (adr r5, 8007eb8 <atan+0x310>)
 8007e44:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007e48:	e6cd      	b.n	8007be6 <atan+0x3e>
 8007e4a:	bf00      	nop
 8007e4c:	f3af 8000 	nop.w
 8007e50:	54442d18 	.word	0x54442d18
 8007e54:	3ff921fb 	.word	0x3ff921fb
 8007e58:	8800759c 	.word	0x8800759c
 8007e5c:	7e37e43c 	.word	0x7e37e43c
 8007e60:	e322da11 	.word	0xe322da11
 8007e64:	3f90ad3a 	.word	0x3f90ad3a
 8007e68:	24760deb 	.word	0x24760deb
 8007e6c:	3fa97b4b 	.word	0x3fa97b4b
 8007e70:	a0d03d51 	.word	0xa0d03d51
 8007e74:	3fb10d66 	.word	0x3fb10d66
 8007e78:	c54c206e 	.word	0xc54c206e
 8007e7c:	3fb745cd 	.word	0x3fb745cd
 8007e80:	920083ff 	.word	0x920083ff
 8007e84:	3fc24924 	.word	0x3fc24924
 8007e88:	5555550d 	.word	0x5555550d
 8007e8c:	3fd55555 	.word	0x3fd55555
 8007e90:	2c6a6c2f 	.word	0x2c6a6c2f
 8007e94:	bfa2b444 	.word	0xbfa2b444
 8007e98:	52defd9a 	.word	0x52defd9a
 8007e9c:	3fadde2d 	.word	0x3fadde2d
 8007ea0:	af749a6d 	.word	0xaf749a6d
 8007ea4:	3fb3b0f2 	.word	0x3fb3b0f2
 8007ea8:	fe231671 	.word	0xfe231671
 8007eac:	3fbc71c6 	.word	0x3fbc71c6
 8007eb0:	9998ebc4 	.word	0x9998ebc4
 8007eb4:	3fc99999 	.word	0x3fc99999
 8007eb8:	54442d18 	.word	0x54442d18
 8007ebc:	bff921fb 	.word	0xbff921fb
 8007ec0:	440fffff 	.word	0x440fffff
 8007ec4:	7ff00000 	.word	0x7ff00000
 8007ec8:	3fdbffff 	.word	0x3fdbffff
 8007ecc:	3ff00000 	.word	0x3ff00000
 8007ed0:	3ff2ffff 	.word	0x3ff2ffff
 8007ed4:	40037fff 	.word	0x40037fff
 8007ed8:	3ff80000 	.word	0x3ff80000
 8007edc:	bff00000 	.word	0xbff00000
 8007ee0:	08008210 	.word	0x08008210
 8007ee4:	080081f0 	.word	0x080081f0

08007ee8 <fabs>:
 8007ee8:	ec51 0b10 	vmov	r0, r1, d0
 8007eec:	ee10 2a10 	vmov	r2, s0
 8007ef0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007ef4:	ec43 2b10 	vmov	d0, r2, r3
 8007ef8:	4770      	bx	lr
	...

08007efc <sqrt>:
 8007efc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007f00:	ed2d 8b02 	vpush	{d8}
 8007f04:	b08b      	sub	sp, #44	; 0x2c
 8007f06:	ec55 4b10 	vmov	r4, r5, d0
 8007f0a:	f000 f851 	bl	8007fb0 <__ieee754_sqrt>
 8007f0e:	4b26      	ldr	r3, [pc, #152]	; (8007fa8 <sqrt+0xac>)
 8007f10:	eeb0 8a40 	vmov.f32	s16, s0
 8007f14:	eef0 8a60 	vmov.f32	s17, s1
 8007f18:	f993 6000 	ldrsb.w	r6, [r3]
 8007f1c:	1c73      	adds	r3, r6, #1
 8007f1e:	d02a      	beq.n	8007f76 <sqrt+0x7a>
 8007f20:	4622      	mov	r2, r4
 8007f22:	462b      	mov	r3, r5
 8007f24:	4620      	mov	r0, r4
 8007f26:	4629      	mov	r1, r5
 8007f28:	f7f8 fda8 	bl	8000a7c <__aeabi_dcmpun>
 8007f2c:	4607      	mov	r7, r0
 8007f2e:	bb10      	cbnz	r0, 8007f76 <sqrt+0x7a>
 8007f30:	f04f 0800 	mov.w	r8, #0
 8007f34:	f04f 0900 	mov.w	r9, #0
 8007f38:	4642      	mov	r2, r8
 8007f3a:	464b      	mov	r3, r9
 8007f3c:	4620      	mov	r0, r4
 8007f3e:	4629      	mov	r1, r5
 8007f40:	f7f8 fd74 	bl	8000a2c <__aeabi_dcmplt>
 8007f44:	b1b8      	cbz	r0, 8007f76 <sqrt+0x7a>
 8007f46:	2301      	movs	r3, #1
 8007f48:	9300      	str	r3, [sp, #0]
 8007f4a:	4b18      	ldr	r3, [pc, #96]	; (8007fac <sqrt+0xb0>)
 8007f4c:	9301      	str	r3, [sp, #4]
 8007f4e:	9708      	str	r7, [sp, #32]
 8007f50:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8007f54:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8007f58:	b9b6      	cbnz	r6, 8007f88 <sqrt+0x8c>
 8007f5a:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8007f5e:	4668      	mov	r0, sp
 8007f60:	f000 f8d6 	bl	8008110 <matherr>
 8007f64:	b1d0      	cbz	r0, 8007f9c <sqrt+0xa0>
 8007f66:	9b08      	ldr	r3, [sp, #32]
 8007f68:	b11b      	cbz	r3, 8007f72 <sqrt+0x76>
 8007f6a:	f7ff fdd7 	bl	8007b1c <__errno>
 8007f6e:	9b08      	ldr	r3, [sp, #32]
 8007f70:	6003      	str	r3, [r0, #0]
 8007f72:	ed9d 8b06 	vldr	d8, [sp, #24]
 8007f76:	eeb0 0a48 	vmov.f32	s0, s16
 8007f7a:	eef0 0a68 	vmov.f32	s1, s17
 8007f7e:	b00b      	add	sp, #44	; 0x2c
 8007f80:	ecbd 8b02 	vpop	{d8}
 8007f84:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007f88:	4642      	mov	r2, r8
 8007f8a:	464b      	mov	r3, r9
 8007f8c:	4640      	mov	r0, r8
 8007f8e:	4649      	mov	r1, r9
 8007f90:	f7f8 fc04 	bl	800079c <__aeabi_ddiv>
 8007f94:	2e02      	cmp	r6, #2
 8007f96:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007f9a:	d1e0      	bne.n	8007f5e <sqrt+0x62>
 8007f9c:	f7ff fdbe 	bl	8007b1c <__errno>
 8007fa0:	2321      	movs	r3, #33	; 0x21
 8007fa2:	6003      	str	r3, [r0, #0]
 8007fa4:	e7df      	b.n	8007f66 <sqrt+0x6a>
 8007fa6:	bf00      	nop
 8007fa8:	20000084 	.word	0x20000084
 8007fac:	08008230 	.word	0x08008230

08007fb0 <__ieee754_sqrt>:
 8007fb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007fb4:	4955      	ldr	r1, [pc, #340]	; (800810c <__ieee754_sqrt+0x15c>)
 8007fb6:	ec55 4b10 	vmov	r4, r5, d0
 8007fba:	43a9      	bics	r1, r5
 8007fbc:	462b      	mov	r3, r5
 8007fbe:	462a      	mov	r2, r5
 8007fc0:	d112      	bne.n	8007fe8 <__ieee754_sqrt+0x38>
 8007fc2:	ee10 2a10 	vmov	r2, s0
 8007fc6:	ee10 0a10 	vmov	r0, s0
 8007fca:	4629      	mov	r1, r5
 8007fcc:	f7f8 fabc 	bl	8000548 <__aeabi_dmul>
 8007fd0:	4602      	mov	r2, r0
 8007fd2:	460b      	mov	r3, r1
 8007fd4:	4620      	mov	r0, r4
 8007fd6:	4629      	mov	r1, r5
 8007fd8:	f7f8 f900 	bl	80001dc <__adddf3>
 8007fdc:	4604      	mov	r4, r0
 8007fde:	460d      	mov	r5, r1
 8007fe0:	ec45 4b10 	vmov	d0, r4, r5
 8007fe4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007fe8:	2d00      	cmp	r5, #0
 8007fea:	ee10 0a10 	vmov	r0, s0
 8007fee:	4621      	mov	r1, r4
 8007ff0:	dc0f      	bgt.n	8008012 <__ieee754_sqrt+0x62>
 8007ff2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8007ff6:	4330      	orrs	r0, r6
 8007ff8:	d0f2      	beq.n	8007fe0 <__ieee754_sqrt+0x30>
 8007ffa:	b155      	cbz	r5, 8008012 <__ieee754_sqrt+0x62>
 8007ffc:	ee10 2a10 	vmov	r2, s0
 8008000:	4620      	mov	r0, r4
 8008002:	4629      	mov	r1, r5
 8008004:	f7f8 f8e8 	bl	80001d8 <__aeabi_dsub>
 8008008:	4602      	mov	r2, r0
 800800a:	460b      	mov	r3, r1
 800800c:	f7f8 fbc6 	bl	800079c <__aeabi_ddiv>
 8008010:	e7e4      	b.n	8007fdc <__ieee754_sqrt+0x2c>
 8008012:	151b      	asrs	r3, r3, #20
 8008014:	d073      	beq.n	80080fe <__ieee754_sqrt+0x14e>
 8008016:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800801a:	07dd      	lsls	r5, r3, #31
 800801c:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8008020:	bf48      	it	mi
 8008022:	0fc8      	lsrmi	r0, r1, #31
 8008024:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8008028:	bf44      	itt	mi
 800802a:	0049      	lslmi	r1, r1, #1
 800802c:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8008030:	2500      	movs	r5, #0
 8008032:	1058      	asrs	r0, r3, #1
 8008034:	0fcb      	lsrs	r3, r1, #31
 8008036:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 800803a:	0049      	lsls	r1, r1, #1
 800803c:	2316      	movs	r3, #22
 800803e:	462c      	mov	r4, r5
 8008040:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8008044:	19a7      	adds	r7, r4, r6
 8008046:	4297      	cmp	r7, r2
 8008048:	bfde      	ittt	le
 800804a:	19bc      	addle	r4, r7, r6
 800804c:	1bd2      	suble	r2, r2, r7
 800804e:	19ad      	addle	r5, r5, r6
 8008050:	0fcf      	lsrs	r7, r1, #31
 8008052:	3b01      	subs	r3, #1
 8008054:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8008058:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800805c:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8008060:	d1f0      	bne.n	8008044 <__ieee754_sqrt+0x94>
 8008062:	f04f 0c20 	mov.w	ip, #32
 8008066:	469e      	mov	lr, r3
 8008068:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800806c:	42a2      	cmp	r2, r4
 800806e:	eb06 070e 	add.w	r7, r6, lr
 8008072:	dc02      	bgt.n	800807a <__ieee754_sqrt+0xca>
 8008074:	d112      	bne.n	800809c <__ieee754_sqrt+0xec>
 8008076:	428f      	cmp	r7, r1
 8008078:	d810      	bhi.n	800809c <__ieee754_sqrt+0xec>
 800807a:	2f00      	cmp	r7, #0
 800807c:	eb07 0e06 	add.w	lr, r7, r6
 8008080:	da42      	bge.n	8008108 <__ieee754_sqrt+0x158>
 8008082:	f1be 0f00 	cmp.w	lr, #0
 8008086:	db3f      	blt.n	8008108 <__ieee754_sqrt+0x158>
 8008088:	f104 0801 	add.w	r8, r4, #1
 800808c:	1b12      	subs	r2, r2, r4
 800808e:	428f      	cmp	r7, r1
 8008090:	bf88      	it	hi
 8008092:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8008096:	1bc9      	subs	r1, r1, r7
 8008098:	4433      	add	r3, r6
 800809a:	4644      	mov	r4, r8
 800809c:	0052      	lsls	r2, r2, #1
 800809e:	f1bc 0c01 	subs.w	ip, ip, #1
 80080a2:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 80080a6:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80080aa:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80080ae:	d1dd      	bne.n	800806c <__ieee754_sqrt+0xbc>
 80080b0:	430a      	orrs	r2, r1
 80080b2:	d006      	beq.n	80080c2 <__ieee754_sqrt+0x112>
 80080b4:	1c5c      	adds	r4, r3, #1
 80080b6:	bf13      	iteet	ne
 80080b8:	3301      	addne	r3, #1
 80080ba:	3501      	addeq	r5, #1
 80080bc:	4663      	moveq	r3, ip
 80080be:	f023 0301 	bicne.w	r3, r3, #1
 80080c2:	106a      	asrs	r2, r5, #1
 80080c4:	085b      	lsrs	r3, r3, #1
 80080c6:	07e9      	lsls	r1, r5, #31
 80080c8:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 80080cc:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 80080d0:	bf48      	it	mi
 80080d2:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80080d6:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 80080da:	461c      	mov	r4, r3
 80080dc:	e780      	b.n	8007fe0 <__ieee754_sqrt+0x30>
 80080de:	0aca      	lsrs	r2, r1, #11
 80080e0:	3815      	subs	r0, #21
 80080e2:	0549      	lsls	r1, r1, #21
 80080e4:	2a00      	cmp	r2, #0
 80080e6:	d0fa      	beq.n	80080de <__ieee754_sqrt+0x12e>
 80080e8:	02d6      	lsls	r6, r2, #11
 80080ea:	d50a      	bpl.n	8008102 <__ieee754_sqrt+0x152>
 80080ec:	f1c3 0420 	rsb	r4, r3, #32
 80080f0:	fa21 f404 	lsr.w	r4, r1, r4
 80080f4:	1e5d      	subs	r5, r3, #1
 80080f6:	4099      	lsls	r1, r3
 80080f8:	4322      	orrs	r2, r4
 80080fa:	1b43      	subs	r3, r0, r5
 80080fc:	e78b      	b.n	8008016 <__ieee754_sqrt+0x66>
 80080fe:	4618      	mov	r0, r3
 8008100:	e7f0      	b.n	80080e4 <__ieee754_sqrt+0x134>
 8008102:	0052      	lsls	r2, r2, #1
 8008104:	3301      	adds	r3, #1
 8008106:	e7ef      	b.n	80080e8 <__ieee754_sqrt+0x138>
 8008108:	46a0      	mov	r8, r4
 800810a:	e7bf      	b.n	800808c <__ieee754_sqrt+0xdc>
 800810c:	7ff00000 	.word	0x7ff00000

08008110 <matherr>:
 8008110:	2000      	movs	r0, #0
 8008112:	4770      	bx	lr

08008114 <_init>:
 8008114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008116:	bf00      	nop
 8008118:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800811a:	bc08      	pop	{r3}
 800811c:	469e      	mov	lr, r3
 800811e:	4770      	bx	lr

08008120 <_fini>:
 8008120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008122:	bf00      	nop
 8008124:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008126:	bc08      	pop	{r3}
 8008128:	469e      	mov	lr, r3
 800812a:	4770      	bx	lr
